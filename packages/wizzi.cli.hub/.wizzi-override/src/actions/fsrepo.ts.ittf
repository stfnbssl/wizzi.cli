module
    import path from 'path'
    import 
        @ fSystem 
        from 'wizzi-utils'
    import
        @ PackiFiles
        from '../features/packi/types'
    import
        @ wizziProds 
        from '../features/wizzi'
    +
    export
        function getFilteredPackiFiles
            param options
                :any
            :return
                :ref Promise
                    :param 
                        :ref PackiFiles
            r_promise()
                _ fSystem.vfile().getFiles
                    @ options.sourceFolder
                    {
                        @ deep true
                        @ documentContent true
                    a_reject(files)
                        log 'getFilteredPackiFiles.files', files
                        const result
                            :ref PackiFiles
                            {
                        foreach f in files
                            if !options.filter || options.filter(f.relPath, f.content)
                                set result[f.relPath]
                                    {
                                        @ type "CODE"
                                        @ contents f.content
                        _ resolve
                            @ result

    +
    export
        function getFileContents
            param options
                :any
            :return
                :ref Promise
                    :param 
                        :string
            r_promise()
                _ fSystem.vfile().read
                    @ options.sourceFile
                    a_reject(contents)
                        log 'getFileContents.contents', contents
                        _ resolve
                            @ contents
    +
    export
        function writePackiToDest
            param packiFiles
                :ref PackiFiles
            param destFolder
                :string
            foreach k in Object.keys(packiFiles)
                _ fSystem.vfile().write
                    _ path.join
                        @ destFolder
                        @ k
                    @ packiFiles[k].contents
    +
    export
        function getFileJSON
            param options
                :any
            :return
                :ref Promise
                    :param 
                        :string
            r_promise()
                if options.sourceFile.endsWith(".ittf")
                    _ wizziProds.generateArtifactFs
                        @ options.sourceFile
                        a_then_catch_throw( contents, :any, , fsrepo.getFileJSON.generateArtifactFs )
                            log 'getFileJSON.ittf.contents', contents
                            _ resolve
                                @ JSON.parse(contents.artifactContent)
                else
                    _ fSystem.vfile().read
                        @ options.sourceFile
                        a_reject(contents)
                            log 'getFileJSON.json.contents', contents
                            _ resolve
                                @ JSON.parse(contents)