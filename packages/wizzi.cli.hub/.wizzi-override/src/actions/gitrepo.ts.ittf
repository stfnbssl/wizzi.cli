module
    import path from 'path'
    import 
        @ fSystem 
        from 'wizzi-utils'
    import
        @ PackiFiles
        from '../features/packi/types'
    import 
        @ githubApiCalls
        from '../features/github'
    import
        @ wizziProds 
        from '../features/wizzi'
    import 
        @ config
        from '../features/config'
    +
    export
        function downloadGitRepo
            param owner
                :string
            param repoName
                :string
            param branchName
                :string
            param options
                :any
            :return
                :ref Promise
                    :param any
            r_promise()
                _ githubApiCalls.cloneBranch
                    { 
                        @ owner owner
                        @ name repoName
                        @ token config.githubAccessToken
                    @ branchName || 'main'
                    a_then_catch_reject( clonedBranch, :any, , gitrepo.downloadGitRepo.githubApiCalls.cloneBranch )
                        const filteredRepoFiles
                            _ filterRepoFiles
                                @ clonedBranch.files
                                @ options
                        if options.destFolder
                            _ writeToDest
                                @ filteredRepoFiles
                                @ options.destFolder
                        if options.destFolderIttf
                            _ wizzifyAndWriteToDestIttf
                                @ filteredRepoFiles
                                @ options.destFolderIttf
                                a_then_catch_reject( result, :any, , gitrepo.downloadGitRepo.wizzifyAndWriteToDestIttf )
                                    _ resolve
                                        @ result
                        else
                            return
                                _ resolve
                                    @ filteredRepoFiles
    +
    function filterRepoFiles
        param packiFiles
            :ref PackiFiles
        param options
            :any
        if !options || !options.filter
            return packiFiles
        else
            const result
                :ref PackiFiles
                {
            foreach k in Object.keys(packiFiles)
                if options.filter(k, packiFiles[k].type, packiFiles[k].contents)
                    set result[k] = packiFiles[k]
            return result
    +
    function writeToDest
        param packiFiles
            :ref PackiFiles
        param destFolder
            :string
        foreach k in Object.keys(packiFiles)
            _ fSystem.vfile().write
                _ path.join
                    @ destFolder
                    @ k
                @ packiFiles[k].contents 
    +
    function wizzifyAndWriteToDestIttf
        param packiFiles
            :ref PackiFiles
        param destFolderIttf
            :string
        :return
            :ref Promise
                :param any
        r_promise()
            _ wizziProds.wizzify
                @ packiFiles
                a_then_catch_reject( wizzifiedPackiFiles, :any, , gitrepo.wizzifyAndWriteToDestIttf.wizzify )
                    _ writeToDest
                        @ wizzifiedPackiFiles
                        @ destFolderIttf
                    _ resolve
                        @ wizzifiedPackiFiles