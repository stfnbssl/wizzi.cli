module
    import path from 'path'
    import 
        @ config
        from '../features/config'
    import 
        @ artifactApi
        from '../features/wizzi-production'
    import App from '../App'
    import
        @ downloadArtifact
        @ downloadArtifactList
        @ downloadPackage
        @ downloadPackageList
        @ downloadPlugin
        @ downloadPluginList
        @ downloadMeta
        @ downloadMetaList
        @ downloadTFolder
        @ downloadTFolderList
        from '../actions/download'
    import
        @ uploadArtifact
        @ uploadPackage
        @ uploadPlugin
        @ uploadMeta
        @ uploadTFolder
        from '../actions/upload'

    const wizzihubProductionsFolder = "C:/My/wizzi/stfnbssl/wizzihub-productions"
    var app
        :any

    export
        function uploadWizzihubArtifact
            param name
            param description
            param mainIttf
            param wizziSchema
            param action
            $$ loog 'uploadWizzihubArtifact.action', action
            _ start
                a_cb_throw(startedapp)
                    set app = startedapp
                    _ uploadArtifact
                        @ "stfnbssl"
                        @ decodeURIComponent(name)
                        @ description
                        @ mainIttf
                        @ wizziSchema
                        {
                            @ create action == 'create'
                            @ update action == 'update'
                            @ sourceFolder
                                _ path.join
                                    @ wizzihubProductionsFolder
                                    @ "uploads"
                                    @ "artifacts"
                                    @ name
                        ._ then
                            =>
                                param result
                                $$ loog 'uploadArtifact', name, result
                                _ app.services.mongodbClose
                        ._ catch
                            =>
                                param err
                                $$ loog 'uploadArtifact.error', err
                                _ app.services.mongodbClose

    export
        function uploadWizzihubPackage
            param name
            param description
            param action
            $$ loog 'uploadWizzihubPackage.action', action
            _ start
                a_cb_throw(startedapp)
                    set app = startedapp
                    _ uploadPackage
                        @ "stfnbssl"
                        @ decodeURIComponent(name)
                        @ description
                        {
                            @ create action == 'create'
                            @ update action == 'update'
                            @ sourceFolder
                                _ path.join
                                    @ wizzihubProductionsFolder
                                    @ "uploads"
                                    @ "packages"
                                    @ name
                        ._ then
                            =>
                                param result
                                $$ loog 'uploadPackage', name, result
                                _ app.services.mongodbClose
                        ._ catch
                            =>
                                param err
                                $$ loog 'uploadPackage.error', err
                                _ app.services.mongodbClose

    export
        function uploadWizzihubPlugin
            param name
            param description
            param action
            $$ loog 'uploadWizzihubPlugin.action', action
            _ start
                a_cb_throw(startedapp)
                    set app = startedapp
                    _ uploadPlugin
                        @ "stfnbssl"
                        @ decodeURIComponent(name)
                        @ description
                        {
                            @ create action == 'create'
                            @ update action == 'update'
                            @ sourceFolder
                                _ path.join
                                    @ wizzihubProductionsFolder
                                    @ "uploads"
                                    @ "plugins"
                                    @ name
                        ._ then
                            =>
                                param result
                                $$ loog 'uploadPlugin', name, result
                                _ app.services.mongodbClose
                        ._ catch
                            =>
                                param err
                                $$ loog 'uploadPlugin.error', err
                                _ app.services.mongodbClose


    export
        function uploadWizzihubMeta
            param name
            param description
            param action
            $$ loog 'uploadWizzihubMeta.action', action
            _ start
                a_cb_throw(startedapp)
                    set app = startedapp
                    _ uploadMeta
                        @ "stfnbssl"
                        @ decodeURIComponent(name)
                        @ description
                        {
                            @ create action == 'create'
                            @ update action == 'update'
                            @ sourceFolder
                                _ path.join
                                    @ wizzihubProductionsFolder
                                    @ "uploads"
                                    @ "metas"
                                    @ name
                        ._ then
                            =>
                                param result
                                $$ loog 'uploadMeta', name, result
                                _ app.services.mongodbClose
                        ._ catch
                            =>
                                param err
                                $$ loog 'uploadMeta.error', err
                                _ app.services.mongodbClose


    export
        function uploadWizzihubTFolder
            param name
            param description
            param action
            $$ loog 'uploadWizzihubTFolder.action', action
            _ start
                a_cb_throw(startedapp)
                    set app = startedapp
                    _ uploadTFolder
                        @ "stfnbssl"
                        @ decodeURIComponent(name)
                        @ description
                        {
                            @ create action == 'create'
                            @ update action == 'update'
                            @ sourceFolder
                                _ path.join
                                    @ wizzihubProductionsFolder
                                    @ "uploads"
                                    @ "tfolders"
                                    @ name
                        ._ then
                            =>
                                param result
                                $$ loog 'uploadTFolder', name, result
                                _ app.services.mongodbClose
                        ._ catch
                            =>
                                param err
                                $$ loog 'uploadTFolder.error', err
                                _ app.services.mongodbClose

    export
        function downloadWizzihub
            param options
                :any
            set options = options || {}
            info 'downloadWizzihub.options.metaFolder', options.metaFolder
            info 'downloadWizzihub.options.filter', options.filter
            _ start
                a_cb_throw(startedapp)
                    set app = startedapp
                    if options.artifacts
                        set options.all = false
                        _ downloadWizzihubArtifacts
                            @ options
                    if options.packages
                        set options.all = false
                        _ downloadWizzihubPackages
                            @ options
                    if options.plugins
                        set options.all = false
                        _ downloadWizzihubPlugins
                            @ options
                    if options.metas
                        set options.all = false
                        _ downloadWizzihubMetas
                            @ options
                    if options.tFolders
                        set options.all = false
                        _ downloadWizzihubTFolders
                            @ options
                    if options.all
                        _ downloadWizzihubArtifacts
                            @ options

    function downloadWizzihubArtifacts
        param options
            :any
        set options = options || {}
        _ downloadArtifactList
            @ "stfnbssl"
            {
                @ destPath
                    _ path.join
                        @ __dirname
                        @ '..'
                        @ 'downloads'
                        @ 'artifactList.json'
                @ destFolder
                    _ path.join
                        @ wizzihubProductionsFolder
                        @ 'downloads'
                        @ 'artifacts'
                @ destMetaFolder options.metaFolder ? path.join(options.metaFolder, 'artifacts') : null
                @ filter options.filter
            ._ then
                =>
                    param result
                    $$ loog 'downloadArtifactList', result.length
                    if options.all
                        _ downloadWizzihubPackages
                            @ options
                    else
                        _ app.services.mongodbClose
            ._ catch
                =>
                    param err
                    $$ loog 'downloadArtifact.error', err
                    _ app.services.mongodbClose
    
    function downloadWizzihubPackages
        param options
            :any
        set options = options || {}
        _ downloadPackageList
            @ "stfnbssl"
            {
                @ destPath
                    _ path.join
                        @ __dirname
                        @ '..'
                        @ 'downloads'
                        @ 'packageList.json'
                @ destFolder
                    _ path.join
                        @ wizzihubProductionsFolder
                        @ 'downloads'
                        @ 'packages'
                @ destMetaFolder options.metaFolder ? path.join(options.metaFolder, 'packages') : null
                @ filter options.filter
            ._ then
                =>
                    param result
                    $$ loog 'downloadPackageList', result.length
                    if options.all
                        _ downloadWizzihubPlugins
                            @ options
                    else
                        _ app.services.mongodbClose
            ._ catch
                =>
                    param err
                    $$ loog 'downloadPackageList.error', err
                    _ app.services.mongodbClose
    
    function downloadWizzihubPlugins
        param options
            :any
        set options = options || {}
        _ downloadPluginList
            @ "stfnbssl"
            {
                @ destPath
                    _ path.join
                        @ __dirname
                        @ '..'
                        @ 'downloads'
                        @ 'pluginList.json'
                @ destFolder
                    _ path.join
                        @ wizzihubProductionsFolder
                        @ 'downloads'
                        @ 'plugins'
                @ destMetaFolder options.metaFolder ? path.join(options.metaFolder, 'plugins') : null
                @ filter options.filter
            ._ then
                =>
                    param result
                    $$ loog 'downloadPluginList', result.length
                    if options.all                    
                        _ downloadWizzihubMetas
                            @ options
                    else
                        _ app.services.mongodbClose
            ._ catch
                =>
                    param err
                    $$ loog 'downloadPluginList.error', err
                    _ app.services.mongodbClose
    
    function downloadWizzihubMetas
        param options
            :any
        set options = options || {}
        _ downloadMetaList
            @ "stfnbssl"
            {
                @ destPath
                    _ path.join
                        @ __dirname
                        @ '..'
                        @ 'downloads'
                        @ 'metaList.json'
                @ destFolder
                    _ path.join
                        @ wizzihubProductionsFolder
                        @ 'downloads'
                        @ 'metas'
                @ destMetaFolder options.metaFolder ? path.join(options.metaFolder, 'metas') : null
                @ filter options.filter
            ._ then
                =>
                    param result
                    $$ loog 'downloadMetaList', result.length
                    if options.all                    
                        _ downloadWizzihubTFolders
                            @ options
                    else
                        _ app.services.mongodbClose
            ._ catch
                =>
                    param err
                    $$ loog 'downloadMetaList.error', err
                    _ app.services.mongodbClose
    
    function downloadWizzihubTFolders
        param options
            :any
        set options = options || {}
        _ downloadTFolderList
            @ "stfnbssl"
            {
                @ destPath
                    _ path.join
                        @ __dirname
                        @ '..'
                        @ 'downloads'
                        @ 'tfolderList.json'
                @ destFolder
                    _ path.join
                        @ wizzihubProductionsFolder
                        @ 'downloads'
                        @ 'tfolders'
                @ destMetaFolder options.metaFolder ? path.join(options.metaFolder, 'tfolders') : null
                @ filter options.filter
            ._ then
                =>
                    param result
                    $$ loog 'downloadTFolderList', result.length
                    _ app.services.mongodbClose
            ._ catch
                =>
                    param err
                    $$ loog 'downloadTFolderList.error', err
                    _ app.services.mongodbClose

    +
    async-function start
        param callback
        const app
            await App.start()
        _ callback
            @ null
            @ app


