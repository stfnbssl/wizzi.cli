module
    kind react
    const path = require("path")
    const fse = require("fs-extra")
    const 
        { 
            @ version
        = require("./packages/react-router/package.json")
    const majorVersion = version.split(".").shift()
    const PRETTY = !!process.env.PRETTY
        #
            # *
            # * Determine the relevant directories for a rollup build, relative to the
            # * current working directory and taking LOCAL_BUILD_DIRECTORY into account
            # *
            # * ROOT_DIR     Root directory for the react-router repo
            # * SOURCE_DIR   Source package directory we will read input files from
            # * OUTPUT_DIR   Destination directory to write rollup output to
            # *
            # * @param {string} packageName  npm package name (i.e., @remix-run/router)
            # * @param {string} [folderName] folder name (i.e., router). Defaults to package name
            # 
    function getBuildDirectories
        param packageName
        param folderName
        let ROOT_DIR = __dirname
        let SOURCE_DIR
            iif folderName
                then path.join(__dirname, "packages", folderName)
                else path.join(__dirname, "packages", ...packageName.split("/"))
            # Update if we're not running from root
        if process.cwd() !== __dirname
            set ROOT_DIR = path.dirname(path.dirname(process.cwd()))
            set SOURCE_DIR = process.cwd()
        let OUTPUT_DIR = path.join(SOURCE_DIR, "dist")
        if process.env.LOCAL_BUILD_DIRECTORY
            try 
                let nodeModulesDir = path.resolve(process.env.LOCAL_BUILD_DIRECTORY, "node_modules")
                _ fse.readdirSync(nodeModulesDir)
                set OUTPUT_DIR = path.join(nodeModulesDir, ...packageName.split("/"), "dist")
            catch e
                _ console.error("Oops! You pointed LOCAL_BUILD_DIRECTORY to a directory that " + "does not have a node_modules/ folder. Please `npm install` in that " + "directory and try again.")
                _ process.exit(1)
        return 
            { 
                @ ROOT_DIR
                @ SOURCE_DIR
                @ OUTPUT_DIR
        #
            # *
            # * Determine the relevant directories for a rollup build, relative to the
            # * current working directory and taking LOCAL_BUILD_DIRECTORY into account
            # *
            # * ROOT_DIR     Root directory for the react-router repo
            # * SOURCE_DIR   Source package directory we will read input files from
            # * OUTPUT_DIR   Destination directory to write rollup output to
            # *
            # * @param {string} packageName  npm package name (i.e., @remix-run/router)
            # * @param {string} [folderName] folder name (i.e., router). Defaults to package name
            # 
    function createBanner
        param packageName
        param version
        return 
            `lit 
                + /**&lf;
                + &nbsp;*&nbsp;
                @ packageName
                + &nbsp;v
                @ version
                + &lf;
                + &nbsp;*&lf;
                + &nbsp;* Copyright (c) Remix Software Inc.&lf;
                + &nbsp;*&lf;
                + &nbsp;* This source code is licensed under the MIT license found in the&lf;
                + &nbsp;* LICENSE.md file in the root directory of this source tree.&lf;
                + &nbsp;*&lf;
                + &nbsp;* @license MIT&lf;
                + &nbsp;*/
        # Babel plugin to replace `const REACT_ROUTER_VERSION = "0.0.0";` with the
        # current version at build time, so we can set it on `window.__reactRouterVersion`
        # for consumption by the Core Web Vitals Technology Report
    function babelPluginReplaceVersionPlaceholder
        return 
            function 
                param babel
                var t = babel.types
                const KIND = "const"
                const NAME = "REACT_ROUTER_VERSION"
                const PLACEHOLDER = "0"
                return 
                    { 
                        { visitor
                            { VariableDeclaration
                                @ enter
                                    function 
                                        param path
                                        if !path.parentPath.isProgram()
                                            return 
                                        if version.startsWith("0.0.0")
                                            return 
                                        let 
                                            { 
                                                @ kind
                                                @ declarations
                                            = path.node
                                        if kind === KIND && declarations.length === 1 && declarations[0].id.name === NAME && declarations[0].init?.value === PLACEHOLDER
                                            _ path.replaceWith
                                                _ t.variableDeclaration
                                                    @ KIND
                                                    [ 
                                                        @ t.variableDeclarator(t.identifier(NAME), t.stringLiteral(majorVersion))
        # Babel plugin to replace `const REACT_ROUTER_VERSION = "0.0.0";` with the
        # current version at build time, so we can set it on `window.__reactRouterVersion`
        # for consumption by the Core Web Vitals Technology Report
        # Post-build plugin to validate that the version placeholder was replaced
    function validateReplacedVersion
        return 
            { 
                @ name "validate-replaced-version"
                m writeBundle
                    param _
                    param bundle
                    _ Object.entries(bundle).forEach
                        => 
                            param [filename, contents]
                            if !filename.endsWith(".js") || filename === "server.js"
                                return 
                            let requiredStrs
                                iif filename.endsWith(".min.js")
                                    then
                                        [ 
                                            `lit 
                                                + {window.__reactRouterVersion="
                                                @ majorVersion
                                                + "}
                                    else
                                        [ 
                                            `lit 
                                                + const REACT_ROUTER_VERSION = "
                                                @ majorVersion
                                                + ";
                                            `lit 
                                                + window.__reactRouterVersion = REACT_ROUTER_VERSION;
                            _ requiredStrs.forEach
                                => 
                                    param str
                                    if !contents.code.includes(str)
                                        throw 
                                            new Error
                                                `lit 
                                                    + Expected&nbsp;
                                                    @ filename
                                                    + &nbsp;to include \`
                                                    @ str
                                                    + \` but it did not
        # Post-build plugin to validate that the version placeholder was replaced
        # rollup.config.js
    set module.exports =
        { 
            @ getBuildDirectories
            @ createBanner
            @ babelPluginReplaceVersionPlaceholder
            @ validateReplacedVersion
            @ PRETTY
        # rollup.config.js
