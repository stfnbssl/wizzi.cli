module
    :import-type 
        @ LoaderFunctionArgs
        from "react-router-dom"
    import 
        @ isRouteErrorResponse
        @ json
        @ Link
        @ Outlet
        @ useLoaderData
        @ useRouteError
        from "react-router-dom"
    export 
        function Fallback
            return 
                p 
                    + Performing initial data "load"
    export 
        function Layout
            return 
                < React.Fragment
                    nav 
                        < Link 
                            @ to "/projects/authorized"
                            + Authorized Project
                        + |
                        < Link 
                            @ to "/projects/unauthorized"
                            + Unauthorized Project
                        + |
                        < Link 
                            @ to "/projects/broken"
                            + Broken Project
                    p 
                        + This example shows the flexibility of
                        + {" "}
                        code 
                            + <Route errorElement>
                    ul 
                        li 
                            + Clicking the "Authorized Project" link will take you to the happy path&lf;          where we successfully load and render the details for a project.
                        li 
                            + Clicking the "Unauthorized Project" link will simulate a case where&lf;          the user does not have access to the given project, so our loader can&lf;          throw a 401 response that is handed in-context by a
                            + {" "}
                            code 
                                + <ProjectErrorBoundary>
                            + .
                        li 
                            + Clicking the "Broken Project" link will return some malformed data&lf;          causing a render error. This is beyond what
                            + {" "}
                            code 
                                + <ProjectErrorBoundary>
                            + can handle, so it re-throws&lf;          the error and it gets handled by
                            + {" "}
                            code 
                                + <RootErrorBoundary>
                            + instead.
                    < Outlet 
    export 
        function RootErrorBoundary
            let error
                _ useRouteError()
                    :as 
                        :ref Error
            return 
                div 
                    h1 
                        + Uh oh, something went terribly wrong ðŸ˜©
                    pre 
                        + {error.message || JSON.stringify(error)}
                    button 
                        @ onClick
                            => 
                                set window.location.href = "/"
                        + Click here to reload the app
    export 
        function projectLoader
            { 
                @ params
                :ref LoaderFunctionArgs
            if params.projectId === "unauthorized"
                throw 
                    _ json
                        { 
                            @ contactEmail "administrator@fake.com"
                        { 
                            @ status 401
            if params.projectId === "broken"
                return 
                    _ json
                        { 
                            @ id params.projectId
                            @ name "Break Some Stuff"
                            @ owner "The Joker"
                            @ deadline "June 2022"
                            @ cost "FREE"
                    # Uh oh - in this flow we somehow didn't get our data nested under `project`
                    # and instead got it at the root - this will cause a render error!
            return 
                _ json
                    { 
                        { project
                            @ id params.projectId
                            @ name "Build Some Stuff"
                            @ owner "Joe"
                            @ deadline "June 2022"
                            @ cost "$5,000 USD"
    export 
        function Project
            let 
                { 
                    @ project
                = useLoaderData()
            return 
                < React.Fragment
                    h1 
                        + Project Name:
                        + {project.name}
                    p 
                        + Owner:
                        + {project.owner}
                    p 
                        + Deadline:
                        + {project.deadline}
                    p 
                        + Cost:
                        + {project.cost}
    export 
        function ProjectErrorBoundary
            let error = useRouteError()
                # We only care to handle 401's at this level, so if this is not a 401
                # ErrorResponse, re-throw to let the RootErrorBoundary handle it
            if !isRouteErrorResponse(error) || error.status !== 401
                throw error
            return 
                < React.Fragment
                    h1 
                        + You do not have access to this project
                    p 
                        + Please reach out to
                        + {" "}
                        a 
                            @ href
                                `lit 
                                    + mailto:
                                    @ error.data.contactEmail
                                    + 
                            + {error.data.contactEmail}
                        + {" "}
                        + to obtain access.
