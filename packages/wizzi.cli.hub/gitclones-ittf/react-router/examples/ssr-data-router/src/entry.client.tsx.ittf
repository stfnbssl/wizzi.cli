module
    import 
        as React
        from "react"
    import 
        as ReactDOM
        from "react-dom/client"
    import 
        @ createBrowserRouter
        @ matchRoutes
        @ RouterProvider
        from "react-router-dom"
    import 
        @ routes
        from "./App"
    _ hydrate()
    async-function hydrate
        let lazyMatches
            _ matchRoutes(routes, window.location)?.filter?.
                => 
                    param m
                    +
                        @expr m.route.lazy
            # Determine if any of the initial routes are lazy
            # Load the lazy matches and update the routes before creating your router
            # so we can hydrate the SSR-rendered content synchronously
        if lazyMatches && lazyMatches?.length > 0
            await 
                _ Promise.all
                    _ lazyMatches.map
                        async=> 
                            param m
                            let routeModule
                                await 
                                    _ 
                                        @expr m.route.lazy
                            _ Object.assign
                                @expr m.route
                                { 
                                    @ ...routeModule
                                    @ lazy undefined
        let router = createBrowserRouter(routes)
        _ ReactDOM.hydrateRoot
            :! 
                _ document.getElementById("app")
            < React.StrictMode 
                < RouterProvider 
                    @ router {router}
                    @ fallbackElement {null}
