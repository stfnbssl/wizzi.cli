module
    import 
        as React
        from "react"
    import 
        @ Routes
        @ Route
        @ Link
        @ useNavigate
        @ useLocation
        @ Navigate
        @ Outlet
        from "react-router-dom"
    import 
        @ fakeAuthProvider
        from "./auth"
    export-default 
        function App
            return 
                < AuthProvider 
                    h1 
                        + Auth Example
                    p 
                        + This example demonstrates a simple login flow with three pages: a public&lf;        page, a protected page, and a login page. In order to see the protected&lf;        page, you must first login. Pretty standard stuff.
                    p 
                        + First, visit the public page. Then, visit the protected page. You're not&lf;        yet logged in, so you are redirected to the login page. After you login,&lf;        you are redirected back to the protected page.
                    p 
                        + Notice the URL change each time. If you click the back button at this&lf;        point, would you expect to go back to the login page? No! You're already&lf;        logged in. Try it out, and you'll see you go back to the page you&lf;        visited just *before* logging in, the public page.
                    < Routes 
                        < Route 
                            @ element
                                < Layout 
                            < Route 
                                @ path "/"
                                @ element
                                    < PublicPage 
                            < Route 
                                @ path "/login"
                                @ element
                                    < LoginPage 
                            < Route 
                                @ path "/protected"
                                @ element
                                    < RequireAuth 
                                        < ProtectedPage 
    function Layout
        return 
            div 
                < AuthStatus 
                ul 
                    li 
                        < Link 
                            @ to "/"
                            + Public Page
                    li 
                        < Link 
                            @ to "/protected"
                            + Protected Page
                < Outlet 
    :interface AuthContextType
        :p user
            :any 
        :p signin
            :=> 
                :void 
                param user
                    :string 
                param callback
                    :ref VoidFunction
        :p signout
            :=> 
                :void 
                param callback
                    :ref VoidFunction
    let AuthContext
        _ React.createContext
            :param 
                :ref AuthContextType
            :! null
    function AuthProvider
        { 
            @ children
            :{ 
                :p children
                    :ref React.ReactNode
        let [user, setUser]
            _ React.useState
                :param any
                @ null
        let signin
            => 
                param newUser
                    :string 
                param callback
                    :ref VoidFunction
                return 
                    _ fakeAuthProvider.signin
                        => 
                            _ setUser(newUser)
                            _ callback()
        let signout
            => 
                param callback
                    :ref VoidFunction
                return 
                    _ fakeAuthProvider.signout
                        => 
                            _ setUser(null)
                            _ callback()
        let value
            { 
                @ user
                @ signin
                @ signout
        return 
            < AuthContext.Provider 
                @ value {value}
                + {children}
    function useAuth
        return React.useContext(AuthContext)
    function AuthStatus
        let auth = useAuth()
        let navigate = useNavigate()
        if !auth.user
            return 
                p 
                    + You are not logged in.
        return 
            p 
                + Welcome
                + {auth.user}
                + !
                + {" "}
                button 
                    @ onClick
                        => 
                            _ auth.signout
                                => 
                                    _ navigate("/")
                    + Sign out
    function RequireAuth
        { 
            @ children
            :{ 
                :p children
                    :ref JSX.Element
        let auth = useAuth()
        let location = useLocation()
        if !auth.user
            return 
                < Navigate 
                    @ to "/login"
                    @ state
                        { 
                            @ from location
                    @ replace
                # Redirect them to the /login page, but save the current location they were
                # trying to go to when they were redirected. This allows us to send them
                # along to that page after they login, which is a nicer user experience
                # than dropping them off on the home page.
        return children
    function LoginPage
        let navigate = useNavigate()
        let location = useLocation()
        let auth = useAuth()
        let from = location.state?.from?.pathname || "/"
        function handleSubmit
            param event
                :ref React.FormEvent
                    :param 
                        :ref HTMLFormElement
            _ event.preventDefault()
            let formData = new FormData(event.currentTarget)
            let username
                _ formData.get("username")
                    :as 
                        :string 
            _ auth.signin
                @ username
                => 
                    _ navigate
                        @ from
                        { 
                            @ replace true
                        # Send them back to the page they tried to visit when they were
                        # redirected to the login page. Use { replace: true } so we don't create
                        # another entry in the history stack for the login page.  This means that
                        # when they get to the protected page and click the back button, they
                        # won't end up back on the login page, which is also really nice for the
                        # user experience.
        return 
            div 
                p 
                    + You must log in to view the page at
                    + {from}
                form 
                    @ onSubmit {handleSubmit}
                    label 
                        + Username:
                        input 
                            @ name "username"
                            @ type "text"
                    + {" "}
                    button 
                        @ type "submit"
                        + Login
    function PublicPage
        return 
            h3 
                + Public
    function ProtectedPage
        return 
            h3 
                + Protected
