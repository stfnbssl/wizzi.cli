module
    import 
        as React
        from "react"
    import 
        as JSURL
        from "jsurl"
    :import-type 
        @ NavigateOptions
        from "react-router-dom"
    import 
        @ Routes
        @ Route
        @ Link
        @ useSearchParams
        from "react-router-dom"
    export-default 
        function App
            return 
                div 
                    h1 
                        + Custom Query Parsing Example
                    p 
                        + This example demonstrates how to store a complex data structure in a URL&lf;        query parameter.
                    p 
                        + Each time a field in the form below changes, the URL is updated with a&lf;        serialized version of the form's values. To see the effect this has,&lf;        manipulate some fields in the form. Then, copy the URL in the address&lf;        bar and paste it into a new tab in your browser to see the form in the&lf;        exact same state as when you left it!
                    < Routes 
                        < Route 
                            @ index
                            @ element
                                < Home 
                        < Route 
                            @ path "*"
                            @ element
                                < NoMatch 
        #
            # *
            # * This custom hook is a wrapper around `useSearchParams()` that parses and
            # * serializes the search param value using the JSURL library, which permits any
            # * JavaScript value to be safely URL-encoded.
            # *
            # * It's a good example of how React hooks offer a great deal of flexibility when
            # * you compose them together!
            # *
            # * TODO: rethink the generic type here, users can put whatever they want in the
            # * URL, probably best to use runtime validation with a type predicate:
            # * https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates
            # 
    function useQueryParam
        :< T
        param key
            :string 
        :return
            :tuple 
                :union 
                    :ref T
                    :undefined 
                :=> 
                    :void 
                    param newQuery
                        :ref T
                    param options
                        :ref NavigateOptions
                        :optional 
        let [searchParams, setSearchParams] = useSearchParams()
        let paramValue = searchParams.get(key)
        let value
            _ React.useMemo
                => 
                    _ JSURL.parse(paramValue)
                [ 
                    @ paramValue
        let setValue
            _ React.useCallback
                => 
                    param newValue
                        :ref T
                    param options
                        :ref NavigateOptions
                        :optional 
                    let newSearchParams = new URLSearchParams(searchParams)
                    _ newSearchParams.set(key, JSURL.stringify(newValue))
                    _ setSearchParams(newSearchParams, options)
                [ 
                    @ key
                    @ searchParams
                    @ setSearchParams
        return 
            [ 
                @ value
                @ setValue
        #
            # *
            # * This custom hook is a wrapper around `useSearchParams()` that parses and
            # * serializes the search param value using the JSURL library, which permits any
            # * JavaScript value to be safely URL-encoded.
            # *
            # * It's a good example of how React hooks offer a great deal of flexibility when
            # * you compose them together!
            # *
            # * TODO: rethink the generic type here, users can put whatever they want in the
            # * URL, probably best to use runtime validation with a type predicate:
            # * https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates
            # 
    :interface Pizza
        :p toppings
            :[ 
                :string 
        :p crust
            :string 
        :p extraSauce
            :boolean 
    function Home
        let [pizza, setPizza]
            _ useQueryParam
                :param 
                    :ref Pizza
                @ "pizza"
        if !pizza
            set pizza =
                { 
                    @ toppings []
                    @ crust "regular"
                    @ extraSauce false
        function handleChange
            param event
                :ref React.ChangeEvent
                    :param 
                        :ref HTMLFormElement
            let form = event.currentTarget
            let formData = new FormData(form)
                # This complex data structure is preserved in the URL in the
                # `pizza` query parameter each time a value in the form changes!
            let pizza
                :ref Pizza
                =
                    { 
                        @ toppings
                            _ formData.getAll("toppings")
                                :as 
                                    :[ 
                                        :string 
                        @ crust
                            _ formData.get("crust")
                                :as 
                                    :string 
                        @ extraSauce formData.get("extraSauce") === "on"
                # This complex data structure is preserved in the URL in the
                # `pizza` query parameter each time a value in the form changes!
            _ setPizza
                @ pizza
                { 
                    @ replace true
        return 
            div 
                form 
                    @ onChange {handleChange}
                    p 
                        + What would you like on your pizza?
                    p 
                        label 
                            input 
                                @ defaultChecked {pizza.toppings.includes("pepperoni")}
                                @ type "checkbox"
                                @ name "toppings"
                                @ value "pepperoni"
                            + {" "}
                            + Pepperoni
                        br 
                        label 
                            input 
                                @ defaultChecked {pizza.toppings.includes("bell-peppers")}
                                @ type "checkbox"
                                @ name "toppings"
                                @ value "bell-peppers"
                            + {" "}
                            + Bell Peppers
                        br 
                        label 
                            input 
                                @ type "checkbox"
                                @ name "toppings"
                                @ value "olives"
                                @ defaultChecked {pizza.toppings.includes("olives")}
                            + {" "}
                            + Olives
                    p 
                        label 
                            input 
                                @ type "radio"
                                @ name "crust"
                                @ value "regular"
                                @ defaultChecked {pizza.crust === "regular"}
                            + {" "}
                            + Regular Crust
                        br 
                        label 
                            input 
                                @ type "radio"
                                @ name "crust"
                                @ value "thin"
                                @ defaultChecked {pizza.crust === "thin"}
                            + {" "}
                            + Thin Crust
                        br 
                        label 
                            input 
                                @ type "radio"
                                @ name "crust"
                                @ value "deep-dish"
                                @ defaultChecked {pizza.crust === "deep-dish"}
                            + {" "}
                            + Deep Dish
                    p 
                        label 
                            input 
                                @ type "checkbox"
                                @ name "extraSauce"
                                @ defaultChecked {pizza.extraSauce}
                            + {" "}
                            + Extra Sauce
                hr 
                p 
                    + The current form values are:
                pre 
                    { 
                        _ JSON.stringify
                            || 
                                + pizza
                                { 
                            @ null
                            @ 2
    function NoMatch
        return 
            div 
                h2 
                    + Nothing to see here!
                p 
                    < Link 
                        @ to "/"
                        + Go to the home page
