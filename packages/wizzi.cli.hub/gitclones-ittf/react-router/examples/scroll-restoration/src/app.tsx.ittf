module
    import 
        as React
        from "react"
    :import-type 
        @ Location
        @ useMatches
        from "react-router-dom"
    import 
        @ createBrowserRouter
        @ Link
        @ Outlet
        @ RouterProvider
        @ ScrollRestoration
        @ useLoaderData
        @ useLocation
        @ useNavigation
        from "react-router-dom"
    import "./index.css"
    let router
        _ createBrowserRouter
            [ 
                { 
                    @ path "/"
                    @ element
                        < Layout 
                    [ children
                        { 
                            @ index true
                            @ element
                                h2 
                                    + Home
                        { 
                            @ path "restore-by-key"
                            @ loader getArrayLoader
                            @ element
                                < LongPage 
                        { 
                            @ path "restore-by-pathname"
                            @ loader getArrayLoader
                            @ element
                                < LongPage 
                            { handle
                                @ scrollMode "pathname"
                        { 
                            @ path "link-to-hash"
                            @ loader getArrayLoader
                            @ element
                                < LongPage 
    if import.meta.hot
        _ import.meta.hot.dispose
            => 
                _ router.dispose()
    export-default 
        function App
            return 
                < RouterProvider 
                    @ router {router}
                    @ fallbackElement
                        p 
                            + Loading...
    function Layout
        let navigation = useNavigation()
            # You can provide a custom implementation of what "key" should be used to
            # cache scroll positions for a given location.  Using the location.key will
            # provide standard browser behavior and only restore on back/forward
            # navigations.  Using location.pathname will provide more aggressive
            # restoration and will also restore on normal link navigations to a
            # previously-accessed path.  Or - go nuts and lump many pages into a
            # single key (i.e., anything /wizard/* uses the same key)!
        let getKey
            _ React.useCallback
                => 
                    param location
                        :ref Location
                    param matches
                        :ref ReturnType
                            :param 
                                :typeof useMatches
                    let match
                        _ matches.find
                            => 
                                param m
                                +
                                    @expr 
                                        ( ?
                                            @expr m.handle
                                                :as 
                                                    :any 
                                        . scrollMode
                    if 
                        test
                            === 
                                @expr 
                                    ( ?
                                        @expr match?.handle
                                            :as 
                                                :any 
                                    . scrollMode
                                + "pathname"
                        return location.pathname
                    return location.key
                [ 
            # You can provide a custom implementation of what "key" should be used to
            # cache scroll positions for a given location.  Using the location.key will
            # provide standard browser behavior and only restore on back/forward
            # navigations.  Using location.pathname will provide more aggressive
            # restoration and will also restore on normal link navigations to a
            # previously-accessed path.  Or - go nuts and lump many pages into a
            # single key (i.e., anything /wizard/* uses the same key)!
        return 
            < React.Fragment
                < style 
                    { 
                        `lit 
                            + &lf;
                            + &nbsp;       .wrapper {&lf;
                            + &nbsp;         display: grid;&lf;
                            + &nbsp;         grid-template-columns: 1fr 2fr;&lf;
                            + &nbsp;         padding: 1rem;&lf;
                            + &nbsp;       }&lf;
                            + &lf;
                            + &nbsp;       .fixed {&lf;
                            + &nbsp;         position: fixed;&lf;
                            + &nbsp;         max-width: 20%;&lf;
                            + &nbsp;         height: 100%;&lf;
                            + &nbsp;         padding: 1rem;&lf;
                            + &nbsp;       }&lf;
                            + &lf;
                            + &nbsp;       .navitem {&lf;
                            + &nbsp;         margin: 1rem 0;&lf;
                            + &nbsp;       }&lf;
                            + &lf;
                            + &nbsp;       .spinner {&lf;
                            + &nbsp;         position: fixed;&lf;
                            + &nbsp;         top: 0;&lf;
                            + &nbsp;         right: 0;&lf;
                            + &nbsp;         padding: 5px;&lf;
                            + &nbsp;         background-color: lightgreen;&lf;
                            + &nbsp;       }&lf;
                            + &nbsp;    &nbsp;
                div 
                    @ className "spinner"
                    @ style
                        { 
                            @ display
                                iif navigation.state === "idle"
                                    then "none"
                                    else "block"
                    + Navigating...
                div 
                    @ className "wrapper"
                    div 
                        @ className "left"
                        div 
                            @ className "fixed"
                            nav 
                                ul 
                                    li 
                                        @ className "navitem"
                                        < Link 
                                            @ to "/"
                                            + Home
                                    li 
                                        @ className "navitem"
                                        < Link 
                                            @ to "/restore-by-key"
                                            + This page restores by location.key
                                    li 
                                        @ className "navitem"
                                        < Link 
                                            @ to "/restore-by-pathname"
                                            + {" "}
                                            + This page restores by location.pathname
                                    li 
                                        @ className "navitem"
                                        < Link 
                                            @ to "/link-to-hash#heading"
                                            + This link will link to a nested heading via hash
                                    li 
                                        @ className "navitem"
                                        < Link 
                                            @ to "/restore-by-key"
                                            @ preventScrollReset
                                            + This link will not scroll to the top
                                    li 
                                        @ className "navitem"
                                        a 
                                            @ href "https://www.google.com"
                                            + This links to an external site (google)
                    div 
                        @ className "right"
                        < Outlet 
                { 
                    # 
                        # 
                        # Including this component inside a data router component tree is what
                        # enables restoration
                        # 
                < ScrollRestoration 
                    @ getKey {getKey}
    :interface ArrayLoaderData
        :p arr
            :ref Array
                :param number
    async-function getArrayLoader
        :return
            :ref Promise
                :param 
                    :ref ArrayLoaderData
        await 
            new Promise
                => 
                    param r
                    _ setTimeout(r, 1000)
        return 
            { 
                @ arr
                    _ new Array(100).fill(null).map
                        => 
                            param _
                            param i
                            + i
    function LongPage
        let data
            _ useLoaderData()
                :as 
                    :ref ArrayLoaderData
        let location = useLocation()
        return 
            < React.Fragment
                h2 
                    + Long Page
                { 
                    _ data.arr.map
                        => 
                            param n
                            p 
                                @ key {n}
                                + Item
                                + {n}
                                + on
                                + {location.pathname}
                h3 
                    @ id "heading"
                    + This is a linkable heading
                { 
                    _ data.arr.map
                        => 
                            param n
                            p 
                                @ key {n}
                                + Item
                                + {n + 100}
                                + on
                                + {location.pathname}
