module
    import 
        as React
        from "react"
    import 
        as ReactDOM
        from "react-dom/client"
    import 
        @ act
        from "react-dom/test-utils"
    :import-type 
        @ Blocker
        @ RouteObject
        from "../index"
    import 
        @ createMemoryRouter
        @ json
        @ Link
        @ NavLink
        @ Outlet
        @ RouterProvider
        @ useBlocker
        @ useNavigate
        from "../index"
    :type Router
        :ref ReturnType
            :param 
                :typeof createMemoryRouter
    const LOADER_LATENCY_MS = 100
    async-function slowLoader
        await 
            _ sleep(LOADER_LATENCY_MS)
        return json(null)
    _ describe
        @ "navigation blocking with useBlocker"
        => 
            let node
                :ref HTMLDivElement
            let router
                :ref Router
            let blocker
                :union 
                    :ref Blocker
                    :null 
                = null
            let root
                :ref ReactDOM.Root
            _ beforeEach
                => 
                    set node = document.createElement("div")
                    _ document.body.appendChild(node)
            _ afterEach
                => 
                    _ document.body.removeChild(node)
                    set node =
                        :! null
            _ it
                @ "initializes an 'unblocked' blocker"
                async=> 
                    let initialEntries
                        [ 
                            @ "/"
                    let routes
                        :[ 
                            :ref RouteObject
                        =
                            [ 
                                { 
                                    @ path "/"
                                    @ element
                                        _ React.createElement
                                            => 
                                                let b = useBlocker(false)
                                                set blocker = b
                                                return null
                    set router =
                        _ createMemoryRouter
                            @ routes
                            { 
                                @ initialEntries
                    _ act
                        => 
                            set root = ReactDOM.createRoot(node)
                            _ root.render
                                < RouterProvider 
                                    @ router {router}
                    _ expect(blocker).toEqual
                        { 
                            @ state "unblocked"
                            @ proceed undefined
                            @ reset undefined
                    _ act
                        => 
                            _ root.unmount()
            _ it
                @ "strips basename from location provided to blocker function"
                async=> 
                    let shouldBlock = jest.fn()
                    set router =
                        _ createMemoryRouter
                            [ 
                                { 
                                    m Component
                                        _ useBlocker(shouldBlock)
                                        return 
                                            div 
                                                < Link 
                                                    @ to "/about"
                                                    + About
                                                < Outlet 
                                    [ children
                                        { 
                                            @ path "/"
                                            @ element
                                                h1 
                                                    + Home
                                        { 
                                            @ path "/about"
                                            @ element
                                                h1 
                                                    + About
                            { 
                                @ basename "/base"
                                [ initialEntries
                                    @ "/base"
                    _ act
                        => 
                            set root = ReactDOM.createRoot(node)
                            _ root.render
                                < RouterProvider 
                                    @ router {router}
                    _ act
                        => 
                            _ click(node.querySelector("a[href='/base/about']"))
                    _ expect(router.state.location.pathname).toBe("/base/about")
                    _ expect(shouldBlock).toHaveBeenCalledWith
                        { 
                            @ currentLocation
                                _ expect.objectContaining
                                    { 
                                        @ pathname "/"
                            @ nextLocation
                                _ expect.objectContaining
                                    { 
                                        @ pathname "/about"
                            @ historyAction "PUSH"
                    _ act
                        => 
                            _ root.unmount()
            _ it
                @ "handles unstable blocker function identities"
                async=> 
                    let count = 0
                    set router =
                        _ createMemoryRouter
                            [ 
                                { 
                                    @ element
                                        _ React.createElement
                                            => 
                                                let b
                                                    _ useBlocker
                                                        => 
                                                            + false
                                                    # New function identity on each render
                                                set blocker = b
                                                if ++count > 50
                                                    throw new Error("useBlocker caused a re-render loop!")
                                                return 
                                                    div 
                                                        < Link 
                                                            @ to "/about"
                                                            + /about
                                                        < Outlet 
                                    [ children
                                        { 
                                            @ path "/"
                                            @ element
                                                h1 
                                                    + Home
                                        { 
                                            @ path "/about"
                                            @ element
                                                h1 
                                                    + About
                    _ act
                        => 
                            set root = ReactDOM.createRoot(node)
                            _ root.render
                                < RouterProvider 
                                    @ router {router}
                    _ expect(node.querySelector("h1")?.textContent).toBe("Home")
                    _ act
                        => 
                            _ click(node.querySelector("a[href='/about']"))
                    _ expect(node.querySelector("h1")?.textContent).toBe("About")
                    _ act
                        => 
                            _ root.unmount()
            _ it
                @ "handles reused blocker in a layout route"
                async=> 
                    set router =
                        _ createMemoryRouter
                            [ 
                                { 
                                    m Component
                                        let blocker = useBlocker(true)
                                        return 
                                            div 
                                                < Link 
                                                    @ to "/one"
                                                    + /one
                                                < Link 
                                                    @ to "/two"
                                                    + /two
                                                < Outlet 
                                                p 
                                                    + {blocker.state}
                                                { 
                                                    iif blocker.state === "blocked"
                                                        then
                                                            button 
                                                                @ onClick
                                                                    => 
                                                                        _ blocker.proceed?.()
                                                                + Proceed
                                                        else null
                                    [ children
                                        { 
                                            @ path "/"
                                            @ element
                                                h1 
                                                    + Home
                                        { 
                                            @ path "/one"
                                            @ element
                                                h1 
                                                    + One
                                        { 
                                            @ path "/two"
                                            @ element
                                                h1 
                                                    + Two
                    _ act
                        => 
                            set root = ReactDOM.createRoot(node)
                            _ root.render
                                < RouterProvider 
                                    @ router {router}
                        # Start on /
                    _ expect(node.querySelector("h1")?.textContent).toBe("Home")
                        # Start on /
                    _ expect(node.querySelector("p")?.textContent).toBe("unblocked")
                    _ expect(node.querySelector("button")).toBeNull()
                        # Blocked navigation to /one
                    _ act
                        => 
                            _ click(node.querySelector("a[href='/one']"))
                        # Blocked navigation to /one
                    _ expect(node.querySelector("h1")?.textContent).toBe("Home")
                    _ expect(node.querySelector("p")?.textContent).toBe("blocked")
                    _ expect(node.querySelector("button")?.textContent).toBe("Proceed")
                        # Proceed to /one
                    _ act
                        => 
                            _ click(node.querySelector("button"))
                        # Proceed to /one
                    _ expect(node.querySelector("h1")?.textContent).toBe("One")
                    _ expect(node.querySelector("p")?.textContent).toBe("unblocked")
                    _ expect(node.querySelector("button")).toBeNull()
                        # Blocked navigation to /two
                    _ act
                        => 
                            _ click(node.querySelector("a[href='/two']"))
                        # Blocked navigation to /two
                    _ expect(node.querySelector("h1")?.textContent).toBe("One")
                    _ expect(node.querySelector("p")?.textContent).toBe("blocked")
                    _ expect(node.querySelector("button")?.textContent).toBe("Proceed")
                        # Proceed to /two
                    _ act
                        => 
                            _ click(node.querySelector("button"))
                        # Proceed to /two
                    _ expect(node.querySelector("h1")?.textContent).toBe("Two")
                    _ expect(node.querySelector("p")?.textContent).toBe("unblocked")
                    _ expect(node.querySelector("button")).toBeNull()
                    _ act
                        => 
                            _ root.unmount()
            _ describe
                @ "on <Link> navigation"
                => 
                    _ describe
                        @ "blocker returns false"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                    let initialIndex = 0
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(false)
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            + About
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "navigates"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("a[href='/about']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("About")
                            _ it
                                @ "gets an 'unblocked' blocker after navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "gets an 'unblocked' blocker after navigation completes"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("a[href='/about']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                    _ describe
                        @ "blocker returns true"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                    let initialIndex = 0
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(true)
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            + About
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "does not navigate"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("a[href='/about']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).not.toBe("About")
                            _ it
                                @ "gets a 'blocked' blocker after navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "blocked"
                                            @ proceed expect.any(Function)
                                            @ reset expect.any(Function)
                                            @ location expect.any(Object)
                            _ it
                                @ "gets a 'blocked' blocker after navigation promise resolves"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("a[href='/about']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "blocked"
                                            @ proceed expect.any(Function)
                                            @ reset expect.any(Function)
                                            @ location expect.any(Object)
                    _ describe
                        @ "exiting from blocked state"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                    let initialIndex = 0
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(true)
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            + About
                                                                        { 
                                                                            && 
                                                                                + b.state === "blocked"
                                                                                div 
                                                                                    button 
                                                                                        @ data-action "proceed"
                                                                                        @ onClick {b.proceed}
                                                                                        + Proceed
                                                                                    button 
                                                                                        @ data-action "reset"
                                                                                        @ onClick {b.reset}
                                                                                        + Reset
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "gets a 'proceeding' blocker after proceeding navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='proceed']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "proceeding"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location expect.any(Object)
                            _ it
                                @ "gets an 'unblocked' blocker after proceeding navigation completes"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='proceed']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "navigates after proceeding navigation completes"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='proceed']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("About")
                            _ it
                                @ "gets an 'unblocked' blocker after resetting navigation"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='reset']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "stays at current location after resetting"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='reset']"))
                                                    # wait for '/about' loader so we catch failure if navigation proceeds
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                                    # wait for '/about' loader so we catch failure if navigation proceeds
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("Home")
            _ describe
                @ "on <Link replace> navigation"
                => 
                    _ describe
                        @ "blocker returns false"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                    let initialIndex = 0
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(false)
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            @ replace
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            @ replace
                                                                            + About
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "navigates"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("a[href='/about']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("About")
                            _ it
                                @ "gets an 'unblocked' blocker after navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "gets an 'unblocked' blocker after navigation completes"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("a[href='/about']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                    _ describe
                        @ "blocker returns true"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                    let initialIndex = 0
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(true)
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            @ replace
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            @ replace
                                                                            + About
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "does not navigate"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("a[href='/about']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).not.toBe("About")
                            _ it
                                @ "gets a 'blocked' blocker after navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "blocked"
                                            @ proceed expect.any(Function)
                                            @ reset expect.any(Function)
                                            @ location expect.any(Object)
                            _ it
                                @ "gets a 'blocked' blocker after navigation promise resolves"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("a[href='/about']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "blocked"
                                            @ proceed expect.any(Function)
                                            @ reset expect.any(Function)
                                            @ location expect.any(Object)
                    _ describe
                        @ "exiting from blocked state"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                    let initialIndex = 0
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(true)
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            @ replace
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            @ replace
                                                                            + About
                                                                        { 
                                                                            && 
                                                                                + b.state === "blocked"
                                                                                div 
                                                                                    button 
                                                                                        @ data-action "proceed"
                                                                                        @ onClick {b.proceed}
                                                                                        + Proceed
                                                                                    button 
                                                                                        @ data-action "reset"
                                                                                        @ onClick {b.reset}
                                                                                        + Reset
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "gets a 'proceeding' blocker after proceeding navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='proceed']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "proceeding"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location expect.any(Object)
                            _ it
                                @ "gets an 'unblocked' blocker after proceeding navigation completes"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='proceed']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "navigates after proceeding navigation completes"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='proceed']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("About")
                            _ it
                                @ "gets an 'unblocked' blocker after resetting navigation"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='reset']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "stays at current location after resetting"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("a[href='/about']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='reset']"))
                                                    # wait for '/about' loader so we catch failure if navigation proceeds
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                                    # wait for '/about' loader so we catch failure if navigation proceeds
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("Home")
            _ describe
                @ "on POP navigation"
                => 
                    _ describe
                        @ "blocker returns false"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                            @ "/about"
                                            @ "/contact"
                                    let initialIndex = 2
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(false)
                                                                let navigate = useNavigate()
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            @ replace
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            @ replace
                                                                            + About
                                                                        button 
                                                                            @ data-action "back"
                                                                            @ onClick
                                                                                => 
                                                                                    _ navigate(-1)
                                                                            + Go Back
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                                        { 
                                                            @ path "/contact"
                                                            @ element
                                                                h1 
                                                                    + Contact
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "navigates"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='back']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("About")
                            _ it
                                @ "gets an 'unblocked' blocker after navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='back']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "gets an 'unblocked' blocker after navigation completes"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='back']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                    _ describe
                        @ "blocker returns true"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                            @ "/about"
                                            @ "/contact"
                                    let initialIndex = 2
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(true)
                                                                let navigate = useNavigate()
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            @ replace
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            @ replace
                                                                            + About
                                                                        button 
                                                                            @ data-action "back"
                                                                            @ onClick
                                                                                => 
                                                                                    _ navigate(-1)
                                                                            + Go Back
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                                        { 
                                                            @ path "/contact"
                                                            @ element
                                                                h1 
                                                                    + Contact
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "does not navigate"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='back']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).not.toBe("About")
                            _ it
                                @ "gets a 'blocked' blocker after navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='back']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "blocked"
                                            @ proceed expect.any(Function)
                                            @ reset expect.any(Function)
                                            @ location expect.any(Object)
                            _ it
                                @ "gets a 'blocked' blocker after navigation promise resolves"
                                async=> 
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='back']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "blocked"
                                            @ proceed expect.any(Function)
                                            @ reset expect.any(Function)
                                            @ location expect.any(Object)
                    _ describe
                        @ "exiting from blocked state"
                        => 
                            _ beforeEach
                                => 
                                    let initialEntries
                                        [ 
                                            @ "/"
                                            @ "/about"
                                            @ "/contact"
                                    let initialIndex = 2
                                    set router =
                                        _ createMemoryRouter
                                            [ 
                                                { 
                                                    @ element
                                                        _ React.createElement
                                                            => 
                                                                let b = useBlocker(true)
                                                                let navigate = useNavigate()
                                                                set blocker = b
                                                                return 
                                                                    div 
                                                                        < NavLink 
                                                                            @ to "/"
                                                                            @ replace
                                                                            + Home
                                                                        < NavLink 
                                                                            @ to "/about"
                                                                            @ replace
                                                                            + About
                                                                        button 
                                                                            @ data-action "back"
                                                                            @ onClick
                                                                                => 
                                                                                    _ navigate(-1)
                                                                            + Go Back
                                                                        { 
                                                                            && 
                                                                                + b.state === "blocked"
                                                                                div 
                                                                                    button 
                                                                                        @ data-action "proceed"
                                                                                        @ onClick {b.proceed}
                                                                                        + Proceed
                                                                                    button 
                                                                                        @ data-action "reset"
                                                                                        @ onClick {b.reset}
                                                                                        + Reset
                                                                        < Outlet 
                                                    [ children
                                                        { 
                                                            @ path "/"
                                                            @ element
                                                                h1 
                                                                    + Home
                                                        { 
                                                            @ path "/about"
                                                            @ element
                                                                h1 
                                                                    + About
                                                            @ loader slowLoader
                                                        { 
                                                            @ path "/contact"
                                                            @ element
                                                                h1 
                                                                    + Contact
                                            { 
                                                @ initialEntries
                                                @ initialIndex
                                    _ act
                                        => 
                                            set root = ReactDOM.createRoot(node)
                                            _ root.render
                                                < RouterProvider 
                                                    @ router {router}
                            _ afterEach
                                => 
                                    _ act
                                        => 
                                            _ root.unmount()
                            _ it
                                @ "gets a 'proceeding' blocker after proceeding navigation starts"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='back']"))
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='proceed']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "proceeding"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location expect.any(Object)
                            _ it
                                @ "gets an 'unblocked' blocker after proceeding navigation completes"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='back']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='proceed']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "navigates after proceeding navigation completes"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='back']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='proceed']"))
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("About")
                            _ it
                                @ "gets an 'unblocked' blocker after resetting navigation"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='back']"))
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='reset']"))
                                    _ expect(blocker).toEqual
                                        { 
                                            @ state "unblocked"
                                            @ proceed undefined
                                            @ reset undefined
                                            @ location undefined
                            _ it
                                @ "stays at current location after resetting"
                                async=> 
                                    _ act
                                        => 
                                            _ click(node.querySelector("[data-action='back']"))
                                    await 
                                        _ act
                                            async=> 
                                                _ click(node.querySelector("[data-action='reset']"))
                                                    # wait for '/about' loader so we catch failure if navigation proceeds
                                                await 
                                                    _ sleep(LOADER_LATENCY_MS)
                                                    # wait for '/about' loader so we catch failure if navigation proceeds
                                    let h1 = node.querySelector("h1")
                                    _ expect(h1?.textContent).toBe("Contact")
    function sleep
        param n
            :number 
            = 500
        return 
            new Promise
                :param void
                => 
                    param r
                    _ setTimeout(r, n)
    function click
        param target
            :union 
                :ref EventTarget
                :null 
                :undefined 
        _ target?.dispatchEvent?.
            new MouseEvent
                @ "click"
                { 
                    @ view window
                    @ bubbles true
                    @ cancelable true
