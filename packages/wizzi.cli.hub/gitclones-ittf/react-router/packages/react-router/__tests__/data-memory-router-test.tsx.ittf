module
    :import-type 
        @ ErrorResponse
        from "@remix-run/router"
    import "@testing-library/jest-dom"
    import 
        @ fireEvent
        @ queryByText
        @ render
        @ screen
        @ waitFor
        from "@testing-library/react"
    import 
        as React
        from "react"
    import 
        @ Await
        @ MemoryRouter
        @ Outlet
        @ Route
        @ RouterProvider
        @ Routes
        @ createMemoryRouter
        @ createRoutesFromElements
        @ defer
        @ redirect
        @ useActionData
        @ useAsyncError
        @ useAsyncValue
        @ useLoaderData
        @ useLocation
        @ useMatches
        @ useNavigation
        @ useRouteError
        @ useRouteLoaderData
        from "react-router"
    import 
        @ createDeferred
        from "../../router/__tests__/utils/utils"
    import MemoryNavigate from "./utils/MemoryNavigate"
    import getHtml from "./utils/getHtml"
    _ describe
        @ "createMemoryRouter"
        => 
            let consoleWarn
                :ref jest.SpyInstance
            let consoleError
                :ref jest.SpyInstance
            _ beforeEach
                => 
                    set consoleWarn =
                        _ jest.spyOn(console, "warn").mockImplementation
                            => 
                    set consoleError =
                        _ jest.spyOn(console, "error").mockImplementation
                            => 
            _ afterEach
                => 
                    _ consoleWarn.mockRestore()
                    _ consoleError.mockRestore()
            _ it
                @ "renders the first route that matches the URL (element)"
                => 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        h1 
                                            + Home
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Home&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "renders the first route that matches the URL (Component)"
                => 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ Component
                                        => 
                                            h1 
                                                + Home
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Home&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "supports a `routes` prop instead of <Route /> children"
                => 
                    let router
                        _ createMemoryRouter
                            [ 
                                { 
                                    @ path "/"
                                    @ element
                                        h1 
                                            + Home
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Home&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "renders the first route that matches the URL when wrapped in a root route"
                => 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/my/base/path"
                                    < Route 
                                        @ path "thing"
                                        @ element
                                            h1 
                                                + Heyooo
                            { 
                                [ initialEntries
                                    @ "/my/base/path/thing"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Heyooo&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "supports a basename prop"
                => 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "thing"
                                    @ element
                                        h1 
                                            + Heyooo
                            { 
                                @ basename "/my/base/path"
                                [ initialEntries
                                    @ "/my/base/path/thing"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Heyooo&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "prepends basename to loader/action redirects"
                async=> 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Root 
                                    < Route 
                                        @ path "thing"
                                        @ loader
                                            => 
                                                _ redirect("/other")
                                    < Route 
                                        @ path "other"
                                        @ element
                                            h1 
                                                + Other
                            { 
                                @ basename "/my/base/path"
                                [ initialEntries
                                    @ "/my/base/path"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    function Root
                        return 
                            < React.Fragment
                                < MemoryNavigate 
                                    @ to "/thing"
                                    + Link to thing
                                < Outlet 
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <a&lf;
                            + &nbsp;         href="/my/base/path/thing"&lf;
                            + &nbsp;       >&lf;
                            + &nbsp;         Link to thing&lf;
                            + &nbsp;       </a>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ fireEvent.click(screen.getByText("Link to thing"))
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Other")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <a&lf;
                            + &nbsp;         href="/my/base/path/thing"&lf;
                            + &nbsp;       >&lf;
                            + &nbsp;         Link to thing&lf;
                            + &nbsp;       </a>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Other&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "supports relative routing in loader/action redirects"
                async=> 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Root 
                                    < Route 
                                        @ path "parent"
                                        @ element
                                            < Parent 
                                        < Route 
                                            @ path "child"
                                            @ loader
                                                => 
                                                    _ redirect("../other")
                                        < Route 
                                            @ path "other"
                                            @ element
                                                h2 
                                                    + Other
                            { 
                                @ basename "/my/base/path"
                                [ initialEntries
                                    @ "/my/base/path"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    function Root
                        return 
                            < React.Fragment
                                < MemoryNavigate 
                                    @ to "/parent/child"
                                    + Link to child
                                < Outlet 
                    function Parent
                        return 
                            < React.Fragment
                                h1 
                                    + Parent
                                < Outlet 
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <a&lf;
                            + &nbsp;         href="/my/base/path/parent/child"&lf;
                            + &nbsp;       >&lf;
                            + &nbsp;         Link to child&lf;
                            + &nbsp;       </a>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ fireEvent.click(screen.getByText("Link to child"))
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Parent")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <a&lf;
                            + &nbsp;         href="/my/base/path/parent/child"&lf;
                            + &nbsp;       >&lf;
                            + &nbsp;         Link to child&lf;
                            + &nbsp;       </a>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Parent&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;       <h2>&lf;
                            + &nbsp;         Other&lf;
                            + &nbsp;       </h2>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "renders with hydration data"
                async=> 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Comp 
                                    < Route 
                                        @ path "child"
                                        @ element
                                            < Comp 
                            { 
                                [ initialEntries
                                    @ "/child"
                                { hydrationData
                                    { loaderData
                                        @ "0" "parent data"
                                        @ "0-0" "child data"
                                    { actionData
                                        @ "0-0" "child action"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    function Comp
                        let data
                            _ useLoaderData()
                                :as 
                                    :{ 
                                        :p message
                                            :string 
                        let actionData = useActionData()
                        let navigation = useNavigation()
                        return 
                            div 
                                < React.Fragment
                                    + {data}
                                < React.Fragment
                                    + {actionData}
                                < React.Fragment
                                    + {navigation.state}
                                < Outlet 
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <div>&lf;
                            + &nbsp;         parent data&lf;
                            + &nbsp;         idle&lf;
                            + &nbsp;         <div>&lf;
                            + &nbsp;           child data&lf;
                            + &nbsp;           child action&lf;
                            + &nbsp;           idle&lf;
                            + &nbsp;         </div>&lf;
                            + &nbsp;       </div>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "renders fallbackElement while first data fetch happens"
                async=> 
                    let fooDefer = createDeferred()
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Outlet 
                                    < Route 
                                        @ path "foo"
                                        @ loader
                                            => 
                                                +
                                                    @expr fooDefer.promise
                                        @ element
                                            < Foo 
                                    < Route 
                                        @ path "bar"
                                        @ element
                                            < Bar 
                            { 
                                [ initialEntries
                                    @ "/foo"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                                    @ fallbackElement
                                        < FallbackElement 
                    function FallbackElement
                        return 
                            p 
                                + Loading...
                    function Foo
                        let data
                            _ useLoaderData()
                                :as 
                                    :{ 
                                        :p message
                                            :string 
                        return 
                            h1 
                                + Foo:
                                + {data?.message}
                    function Bar
                        return 
                            h1 
                                + Bar Heading
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <p>&lf;
                            + &nbsp;         Loading...&lf;
                            + &nbsp;       </p>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ fooDefer.resolve
                        { 
                            @ message "From Foo Loader"
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Foo:From Foo Loader")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Foo:&lf;
                            + &nbsp;         From Foo Loader&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "renders a null fallbackElement if none is provided"
                async=> 
                    let fooDefer = createDeferred()
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Outlet 
                                    < Route 
                                        @ path "foo"
                                        @ loader
                                            => 
                                                +
                                                    @expr fooDefer.promise
                                        @ element
                                            < Foo 
                                    < Route 
                                        @ path "bar"
                                        @ element
                                            < Bar 
                            { 
                                [ initialEntries
                                    @ "/foo"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    function Foo
                        let data
                            _ useLoaderData()
                                :as 
                                    :{ 
                                        :p message
                                            :string 
                        return 
                            h1 
                                + Foo:
                                + {data?.message}
                    function Bar
                        return 
                            h1 
                                + Bar Heading
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + "<div />"
                    _ fooDefer.resolve
                        { 
                            @ message "From Foo Loader"
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Foo:From Foo Loader")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Foo:&lf;
                            + &nbsp;         From Foo Loader&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "does not render fallbackElement if no data fetch is required"
                async=> 
                    let fooDefer = createDeferred()
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Outlet 
                                    < Route 
                                        @ path "foo"
                                        @ loader
                                            => 
                                                +
                                                    @expr fooDefer.promise
                                        @ element
                                            < Foo 
                                    < Route 
                                        @ path "bar"
                                        @ element
                                            < Bar 
                            { 
                                [ initialEntries
                                    @ "/bar"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                                    @ fallbackElement
                                        < FallbackElement 
                    function FallbackElement
                        return 
                            p 
                                + Loading...
                    function Foo
                        let data
                            _ useLoaderData()
                                :as 
                                    :{ 
                                        :p message
                                            :string 
                        return 
                            h1 
                                + Foo:
                                + {data?.message}
                    function Bar
                        return 
                            h1 
                                + Bar Heading
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Bar Heading&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "renders fallbackElement within router contexts"
                async=> 
                    let fooDefer = createDeferred()
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Outlet 
                                    < Route 
                                        @ path "foo"
                                        @ loader
                                            => 
                                                +
                                                    @expr fooDefer.promise
                                        @ element
                                            < Foo 
                            { 
                                [ initialEntries
                                    @ "/foo"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                                    @ fallbackElement
                                        < FallbackElement 
                    function FallbackElement
                        let location = useLocation()
                        return 
                            < React.Fragment
                                p 
                                    + Loading
                                    + {location.pathname}
                    function Foo
                        let data
                            _ useLoaderData()
                                :as 
                                    :{ 
                                        :p message
                                            :string 
                        return 
                            h1 
                                + Foo:
                                + {data?.message}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <p>&lf;
                            + &nbsp;         Loading&lf;
                            + &nbsp;         /foo&lf;
                            + &nbsp;       </p>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ fooDefer.resolve
                        { 
                            @ message "From Foo Loader"
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Foo:From Foo Loader")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Foo:&lf;
                            + &nbsp;         From Foo Loader&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "handles link navigations"
                async=> 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Layout 
                                    < Route 
                                        @ path "foo"
                                        @ element
                                            < Foo 
                                    < Route 
                                        @ path "bar"
                                        @ element
                                            < Bar 
                            { 
                                [ initialEntries
                                    @ "/foo"
                    _ render
                        < RouterProvider 
                            @ router {router}
                    function Layout
                        return 
                            div 
                                < MemoryNavigate 
                                    @ to "/foo"
                                    + Link to Foo
                                < MemoryNavigate 
                                    @ to "/bar"
                                    + Link to Bar
                                < Outlet 
                    function Foo
                        return 
                            h1 
                                + Foo Heading
                    function Bar
                        return 
                            h1 
                                + Bar Heading
                    _ expect(screen.getByText("Foo Heading")).toBeDefined()
                    _ fireEvent.click(screen.getByText("Link to Bar"))
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Bar Heading")
                    _ fireEvent.click(screen.getByText("Link to Foo"))
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Foo Heading")
            _ it
                @ "executes route loaders on navigation"
                async=> 
                    let barDefer = createDeferred()
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Layout 
                                    < Route 
                                        @ path "foo"
                                        @ element
                                            < Foo 
                                    < Route 
                                        @ path "bar"
                                        @ loader
                                            => 
                                                +
                                                    @expr barDefer.promise
                                        @ element
                                            < Bar 
                            { 
                                [ initialEntries
                                    @ "/foo"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    function Layout
                        let navigation = useNavigation()
                        return 
                            div 
                                < MemoryNavigate 
                                    @ to "/bar"
                                    + Link to Bar
                                p 
                                    + {navigation.state}
                                < Outlet 
                    function Foo
                        return 
                            h1 
                                + Foo
                    function Bar
                        let data
                            _ useLoaderData()
                                :as 
                                    :{ 
                                        :p message
                                            :string 
                        return 
                            h1 
                                + {data?.message}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <div>&lf;
                            + &nbsp;         <a&lf;
                            + &nbsp;           href="/bar"&lf;
                            + &nbsp;         >&lf;
                            + &nbsp;           Link to Bar&lf;
                            + &nbsp;         </a>&lf;
                            + &nbsp;         <p>&lf;
                            + &nbsp;           idle&lf;
                            + &nbsp;         </p>&lf;
                            + &nbsp;         <h1>&lf;
                            + &nbsp;           Foo&lf;
                            + &nbsp;         </h1>&lf;
                            + &nbsp;       </div>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ fireEvent.click(screen.getByText("Link to Bar"))
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <div>&lf;
                            + &nbsp;         <a&lf;
                            + &nbsp;           href="/bar"&lf;
                            + &nbsp;         >&lf;
                            + &nbsp;           Link to Bar&lf;
                            + &nbsp;         </a>&lf;
                            + &nbsp;         <p>&lf;
                            + &nbsp;           loading&lf;
                            + &nbsp;         </p>&lf;
                            + &nbsp;         <h1>&lf;
                            + &nbsp;           Foo&lf;
                            + &nbsp;         </h1>&lf;
                            + &nbsp;       </div>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ barDefer.resolve
                        { 
                            @ message "Bar Loader"
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("idle")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <div>&lf;
                            + &nbsp;         <a&lf;
                            + &nbsp;           href="/bar"&lf;
                            + &nbsp;         >&lf;
                            + &nbsp;           Link to Bar&lf;
                            + &nbsp;         </a>&lf;
                            + &nbsp;         <p>&lf;
                            + &nbsp;           idle&lf;
                            + &nbsp;         </p>&lf;
                            + &nbsp;         <h1>&lf;
                            + &nbsp;           Bar Loader&lf;
                            + &nbsp;         </h1>&lf;
                            + &nbsp;       </div>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "executes route actions/loaders on submission navigations"
                async=> 
                    let barDefer = createDeferred()
                    let barActionDefer = createDeferred()
                    let formData = new FormData()
                    _ formData.append("test", "value")
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Layout 
                                    < Route 
                                        @ path "foo"
                                        @ element
                                            < Foo 
                                    < Route 
                                        @ path "bar"
                                        @ action
                                            => 
                                                +
                                                    @expr barActionDefer.promise
                                        @ loader
                                            => 
                                                +
                                                    @expr barDefer.promise
                                        @ element
                                            < Bar 
                            { 
                                [ initialEntries
                                    @ "/foo"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    function Layout
                        let navigation = useNavigation()
                        return 
                            div 
                                < MemoryNavigate 
                                    @ to "/bar"
                                    @ formMethod "post"
                                    @ formData {formData}
                                    + Post to Bar
                                p 
                                    + {navigation.state}
                                < Outlet 
                    function Foo
                        return 
                            h1 
                                + Foo
                    function Bar
                        let data
                            _ useLoaderData()
                                :as 
                                    :{ 
                                        :p message
                                            :string 
                        let actionData = useActionData()
                        return 
                            h1 
                                < React.Fragment
                                    + {data}
                                < React.Fragment
                                    + {actionData}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <div>&lf;
                            + &nbsp;         <form>&lf;
                            + &nbsp;           Post to Bar&lf;
                            + &nbsp;         </form>&lf;
                            + &nbsp;         <p>&lf;
                            + &nbsp;           idle&lf;
                            + &nbsp;         </p>&lf;
                            + &nbsp;         <h1>&lf;
                            + &nbsp;           Foo&lf;
                            + &nbsp;         </h1>&lf;
                            + &nbsp;       </div>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ fireEvent.click(screen.getByText("Post to Bar"))
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <div>&lf;
                            + &nbsp;         <form>&lf;
                            + &nbsp;           Post to Bar&lf;
                            + &nbsp;         </form>&lf;
                            + &nbsp;         <p>&lf;
                            + &nbsp;           submitting&lf;
                            + &nbsp;         </p>&lf;
                            + &nbsp;         <h1>&lf;
                            + &nbsp;           Foo&lf;
                            + &nbsp;         </h1>&lf;
                            + &nbsp;       </div>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ barActionDefer.resolve("Bar Action")
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("loading")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <div>&lf;
                            + &nbsp;         <form>&lf;
                            + &nbsp;           Post to Bar&lf;
                            + &nbsp;         </form>&lf;
                            + &nbsp;         <p>&lf;
                            + &nbsp;           loading&lf;
                            + &nbsp;         </p>&lf;
                            + &nbsp;         <h1>&lf;
                            + &nbsp;           Foo&lf;
                            + &nbsp;         </h1>&lf;
                            + &nbsp;       </div>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ barDefer.resolve("Bar Loader")
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("idle")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <div>&lf;
                            + &nbsp;         <form>&lf;
                            + &nbsp;           Post to Bar&lf;
                            + &nbsp;         </form>&lf;
                            + &nbsp;         <p>&lf;
                            + &nbsp;           idle&lf;
                            + &nbsp;         </p>&lf;
                            + &nbsp;         <h1>&lf;
                            + &nbsp;           Bar Loader&lf;
                            + &nbsp;           Bar Action&lf;
                            + &nbsp;         </h1>&lf;
                            + &nbsp;       </div>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "provides useMatches"
                async=> 
                    let spy = jest.fn()
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/"
                                    @ element
                                        < Layout 
                                    < Route 
                                        @ path "foo"
                                        @ loader
                                            async=> 
                                                + "FOO LOADER"
                                        @ element
                                            < Foo 
                                    < Route 
                                        @ path "bar"
                                        @ loader
                                            async=> 
                                                + "BAR LOADER"
                                        @ element
                                            < Bar 
                                        @ handle
                                            { 
                                                @ key "value"
                    _ render
                        < RouterProvider 
                            @ router {router}
                    function Layout
                        _ spy("Layout", useMatches())
                        return 
                            < React.Fragment
                                < MemoryNavigate 
                                    @ to "/bar"
                                    + Link to Bar
                                < Outlet 
                    function Foo
                        _ spy("Foo", useMatches())
                        return 
                            h1 
                                + Foo
                    function Bar
                        _ spy("Bar", useMatches())
                        return 
                            h1 
                                + Bar
                    _ expect(spy).toHaveBeenCalledWith
                        @ "Layout"
                        [ 
                            { 
                                @ data undefined
                                @ handle undefined
                                @ id "0"
                                { params
                                @ pathname "/"
                    _ spy.mockClear()
                    _ fireEvent.click(screen.getByText("Link to Bar"))
                    _ expect(spy).toHaveBeenCalledWith
                        @ "Layout"
                        [ 
                            { 
                                @ data undefined
                                @ handle undefined
                                @ id "0"
                                { params
                                @ pathname "/"
                    _ spy.mockClear()
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Bar")
                    _ expect(spy).toHaveBeenCalledWith
                        @ "Layout"
                        [ 
                            { 
                                @ data undefined
                                @ handle undefined
                                @ id "0"
                                { params
                                @ pathname "/"
                            { 
                                @ data "BAR LOADER"
                                { handle
                                    @ key "value"
                                @ id "0-1"
                                { params
                                @ pathname "/bar"
            _ it
                @ "provides useRouteLoaderData"
                async=> 
                    let spy = jest.fn()
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ id "layout"
                                    @ path "/"
                                    @ element
                                        < Layout 
                                    < Route 
                                        @ id "foo"
                                        @ path "foo"
                                        @ loader
                                            async=> 
                                                + "FOO2"
                                        @ element
                                            h2 
                                                + Foo
                                    < Route 
                                        @ id "bar"
                                        @ path "bar"
                                        @ element
                                            < Outlet 
                                        < Route 
                                            @ id "child"
                                            @ path "child"
                                            @ loader
                                                async=> 
                                                    + "CHILD"
                                            @ element
                                                h2 
                                                    + Child
                            { 
                                [ initialEntries
                                    @ "/foo"
                                { hydrationData
                                    { loaderData
                                        @ foo "FOO"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    function Layout
                        _ spy
                            { 
                                @ layout useRouteLoaderData("layout")
                                @ foo useRouteLoaderData("foo")
                                @ bar useRouteLoaderData("bar")
                                @ child useRouteLoaderData("child")
                        return 
                            < React.Fragment
                                < MemoryNavigate 
                                    @ to "/bar/child"
                                    + Link to Child
                                < Outlet 
                    _ expect(spy).toHaveBeenCalledWith
                        { 
                            @ layout undefined
                            @ foo "FOO"
                            @ bar undefined
                            @ child undefined
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <a&lf;
                            + &nbsp;         href="/bar/child"&lf;
                            + &nbsp;       >&lf;
                            + &nbsp;         Link to Child&lf;
                            + &nbsp;       </a>&lf;
                            + &nbsp;       <h2>&lf;
                            + &nbsp;         Foo&lf;
                            + &nbsp;       </h2>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ spy.mockClear()
                    _ fireEvent.click(screen.getByText("Link to Child"))
                    await 
                        _ waitFor
                            => 
                                _ screen.getByText("Child")
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <a&lf;
                            + &nbsp;         href="/bar/child"&lf;
                            + &nbsp;       >&lf;
                            + &nbsp;         Link to Child&lf;
                            + &nbsp;       </a>&lf;
                            + &nbsp;       <h2>&lf;
                            + &nbsp;         Child&lf;
                            + &nbsp;       </h2>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
                    _ expect(spy).toHaveBeenCalledWith
                        { 
                            @ layout undefined
                            @ foo undefined
                            @ bar undefined
                            @ child "CHILD"
            _ it
                @ "renders descendent routes inside a data router"
                => 
                    let router
                        _ createMemoryRouter
                            _ createRoutesFromElements
                                < Route 
                                    @ path "/deep"
                                    < Route 
                                        @ path "path/*"
                                        @ element
                                            < Child 
                            { 
                                [ initialEntries
                                    @ "/deep/path/to/descendant/routes"
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    function GrandChild
                        return 
                            < Routes 
                                < Route 
                                    @ path "descendant"
                                    < Route 
                                        @ path "routes"
                                        @ element
                                            h1 
                                                + 👋 Hello from the other side!
                    function Child
                        return 
                            < Routes 
                                < Route 
                                    @ path "to/*"
                                    @ element
                                        < GrandChild 
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         👋 Hello from the other side!&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ it
                @ "renders <Routes> alongside a data router ErrorBoundary"
                => 
                    let router
                        _ createMemoryRouter
                            [ 
                                { 
                                    @ path "*"
                                    m Component
                                        return 
                                            < React.Fragment
                                                < Outlet 
                                                < Routes 
                                                    < Route 
                                                        @ index
                                                        @ element
                                                            h1 
                                                                + Descendant
                                    [ children
                                        { 
                                            @ id "index"
                                            @ index true
                                            @ Component
                                                => 
                                                    h1 
                                                        + Child
                                            m ErrorBoundary
                                                return 
                                                    p 
                                                        { 
                                                            @expr 
                                                                ( 
                                                                    _ useRouteError()
                                                                        :as 
                                                                            :ref Error
                                                                . message
                            { 
                                [ initialEntries
                                    @ "/"
                                { hydrationData
                                    { errors
                                        @ index new Error("Broken!")
                    let 
                        { 
                            @ container
                        =
                            _ render
                                < RouterProvider 
                                    @ router {router}
                    _ expect(getHtml(container)).toMatchInlineSnapshot
                        `lit 
                            + &lf;
                            + &nbsp;     "<div>&lf;
                            + &nbsp;       <p>&lf;
                            + &nbsp;         Broken!&lf;
                            + &nbsp;       </p>&lf;
                            + &nbsp;       <h1>&lf;
                            + &nbsp;         Descendant&lf;
                            + &nbsp;       </h1>&lf;
                            + &nbsp;     </div>"&lf;
                            + &nbsp;  &nbsp;
            _ describe
                @ "errors"
                => 
                    _ it
                        @ "renders hydration errors on leaf elements using errorElement"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Comp 
                                            < Route 
                                                @ path "child"
                                                @ element
                                                    < Comp 
                                                @ errorElement
                                                    < ErrorBoundary 
                                    { 
                                        [ initialEntries
                                            @ "/child"
                                        { hydrationData
                                            { loaderData
                                                @ "0" "parent data"
                                            { actionData
                                                @ "0" "parent action"
                                            { errors
                                                @ "0-0" new Error("Kaboom 💥")
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Comp
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                let actionData = useActionData()
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < React.Fragment
                                            + {data}
                                        < React.Fragment
                                            + {actionData}
                                        < React.Fragment
                                            + {navigation.state}
                                        < Outlet 
                            function ErrorBoundary
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           parent data&lf;
                                    + &nbsp;           parent action&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Kaboom 💥&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "renders hydration errors on leaf elements using ErrorBoundary"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Comp 
                                            < Route 
                                                @ path "child"
                                                @ element
                                                    < Comp 
                                                @ ErrorBoundary
                                                    => 
                                                        p 
                                                            @expr 
                                                                ( 
                                                                    _ useRouteError()
                                                                        :as 
                                                                            :ref Error
                                                                . message
                                    { 
                                        [ initialEntries
                                            @ "/child"
                                        { hydrationData
                                            { loaderData
                                                @ "0" "parent data"
                                            { actionData
                                                @ "0" "parent action"
                                            { errors
                                                @ "0-0" new Error("Kaboom 💥")
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Comp
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                let actionData = useActionData()
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < React.Fragment
                                            + {data}
                                        < React.Fragment
                                            + {actionData}
                                        < React.Fragment
                                            + {navigation.state}
                                        < Outlet 
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           parent data&lf;
                                    + &nbsp;           parent action&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Kaboom 💥&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "renders hydration errors on parent elements"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Comp 
                                            @ errorElement
                                                < ErrorBoundary 
                                            < Route 
                                                @ path "child"
                                                @ element
                                                    < Comp 
                                    { 
                                        [ initialEntries
                                            @ "/child"
                                        { hydrationData
                                            { loaderData
                                            @ actionData null
                                            { errors
                                                @ "0" new Error("Kaboom 💥")
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Comp
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                let actionData = useActionData()
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < React.Fragment
                                            + {data}
                                        < React.Fragment
                                            + {actionData}
                                        < React.Fragment
                                            + {navigation.state}
                                        < Outlet 
                            function ErrorBoundary
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Kaboom 💥&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "renders navigation errors on leaf elements using errorElement"
                        async=> 
                            let fooDefer = createDeferred()
                            let barDefer = createDeferred()
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Layout 
                                            < Route 
                                                @ path "foo"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr fooDefer.promise
                                                @ element
                                                    < Foo 
                                                @ errorElement
                                                    < FooError 
                                            < Route 
                                                @ path "bar"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr barDefer.promise
                                                @ element
                                                    < Bar 
                                                @ errorElement
                                                    < BarError 
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                                        { hydrationData
                                            { loaderData
                                                { "0-0"
                                                    @ message "hydrated from foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Layout
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < MemoryNavigate 
                                            @ to "/foo"
                                            + Link to Foo
                                        < MemoryNavigate 
                                            @ to "/bar"
                                            + Link to Bar
                                        p 
                                            + {navigation.state}
                                        < Outlet 
                            function Foo
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Foo:
                                        + {data?.message}
                            function FooError
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + Foo Error:
                                        + {error.message}
                            function Bar
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Bar:
                                        + {data?.message}
                            function BarError
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + Bar Error:
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Foo:&lf;
                                    + &nbsp;             hydrated from foo&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ barDefer.reject(Error("Kaboom!"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Bar Error:&lf;
                                    + &nbsp;             Kaboom!&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Foo"))
                            _ fooDefer.reject(Error("Kaboom!"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Foo Error:&lf;
                                    + &nbsp;             Kaboom!&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "renders navigation errors on leaf elements using ErrorBoundary"
                        async=> 
                            let fooDefer = createDeferred()
                            let barDefer = createDeferred()
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Layout 
                                            < Route 
                                                @ path "foo"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr fooDefer.promise
                                                @ element
                                                    < Foo 
                                                @ ErrorBoundary {FooError}
                                            < Route 
                                                @ path "bar"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr barDefer.promise
                                                @ element
                                                    < Bar 
                                                @ ErrorBoundary {BarError}
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                                        { hydrationData
                                            { loaderData
                                                { "0-0"
                                                    @ message "hydrated from foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Layout
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < MemoryNavigate 
                                            @ to "/foo"
                                            + Link to Foo
                                        < MemoryNavigate 
                                            @ to "/bar"
                                            + Link to Bar
                                        p 
                                            + {navigation.state}
                                        < Outlet 
                            function Foo
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Foo:
                                        + {data?.message}
                            function FooError
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + Foo Error:
                                        + {error.message}
                            function Bar
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Bar:
                                        + {data?.message}
                            function BarError
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + Bar Error:
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Foo:&lf;
                                    + &nbsp;             hydrated from foo&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ barDefer.reject(Error("Kaboom!"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Bar Error:&lf;
                                    + &nbsp;             Kaboom!&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Foo"))
                            _ fooDefer.reject(Error("Kaboom!"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Foo Error:&lf;
                                    + &nbsp;             Kaboom!&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "renders navigation errors on parent elements"
                        async=> 
                            let fooDefer = createDeferred()
                            let barDefer = createDeferred()
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Layout 
                                            @ errorElement
                                                < LayoutError 
                                            < Route 
                                                @ path "foo"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr fooDefer.promise
                                                @ element
                                                    < Foo 
                                                @ errorElement
                                                    < FooError 
                                            < Route 
                                                @ path "bar"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr barDefer.promise
                                                @ element
                                                    < Bar 
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                                        { hydrationData
                                            { loaderData
                                                { "0-0"
                                                    @ message "hydrated from foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Layout
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < MemoryNavigate 
                                            @ to "/foo"
                                            + Link to Foo
                                        < MemoryNavigate 
                                            @ to "/bar"
                                            + Link to Bar
                                        p 
                                            + {navigation.state}
                                        < Outlet 
                            function LayoutError
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + Layout Error:
                                        + {error.message}
                            function Foo
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Foo:
                                        + {data?.message}
                            function FooError
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + Foo Error:
                                        + {error.message}
                            function Bar
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Bar:
                                        + {data?.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Foo:&lf;
                                    + &nbsp;             hydrated from foo&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ barDefer.reject(Error("Kaboom!"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Layout Error:Kaboom!")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Layout Error:&lf;
                                    + &nbsp;           Kaboom!&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "renders 404 errors using path='/' error boundary"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < React.Fragment
                                            < Route 
                                                @ path "/thing"
                                                @ element
                                                    h1 
                                                        + Thing 1
                                                @ errorElement
                                                    p 
                                                        + Not I!
                                            < Route 
                                                @ path "/"
                                                @ element
                                                    div 
                                                        h1 
                                                            + Hello
                                                        < Outlet 
                                                @ errorElement
                                                    < Boundary 
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                                        { hydrationData
                                            { loaderData
                                                { "0"
                                                    @ message "hydrated from foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Boundary
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref ErrorResponse
                                return 
                                    p 
                                        + Error:
                                        < React.Fragment
                                            + {error.status}
                                        < React.Fragment
                                            + {error.statusText}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Error:&lf;
                                    + &nbsp;           404&lf;
                                    + &nbsp;           Not Found&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "renders 404 errors using index error boundary"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < React.Fragment
                                            < Route 
                                                @ path "/thing"
                                                @ element
                                                    h1 
                                                        + Thing 1
                                                @ errorElement
                                                    p 
                                                        + Not I!
                                            < Route 
                                                @ index
                                                @ element
                                                    div 
                                                        h1 
                                                            + Hello
                                                        < Outlet 
                                                @ errorElement
                                                    < Boundary 
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                                        { hydrationData
                                            { loaderData
                                                { "0"
                                                    @ message "hydrated from foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Boundary
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref ErrorResponse
                                return 
                                    p 
                                        + Error:
                                        < React.Fragment
                                            + {error.status}
                                        < React.Fragment
                                            + {error.statusText}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Error:&lf;
                                    + &nbsp;           404&lf;
                                    + &nbsp;           Not Found&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "renders 404 errors using fallback boundary if no root layout route exists"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < React.Fragment
                                            < Route 
                                                @ path "/thing1"
                                                @ element
                                                    h1 
                                                        + Thing 1
                                                @ errorElement
                                                    p 
                                                        + Not I!
                                            < Route 
                                                @ path "/thing2"
                                                @ element
                                                    h1 
                                                        + Thing 2
                                                @ errorElement
                                                    p 
                                                        + Not I!
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                                        { hydrationData
                                            { loaderData
                                                { "0"
                                                    @ message "hydrated from foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            let html = getHtml(container)
                            _ expect(html).toMatch("Unexpected Application Error!")
                            _ expect(html).toMatch("404 Not Found")
                            _ expect(html).toMatch("💿 Hey developer 👋")
                            _ expect(html).not.toMatch(/stack/i)
                    _ it
                        @ "renders navigation errors with a default if no errorElements are provided"
                        async=> 
                            let fooDefer = createDeferred()
                            let barDefer = createDeferred()
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Layout 
                                            < Route 
                                                @ path "foo"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr fooDefer.promise
                                                @ element
                                                    < Foo 
                                            < Route 
                                                @ path "bar"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr barDefer.promise
                                                @ element
                                                    < Bar 
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                                        { hydrationData
                                            { loaderData
                                                { "0-0"
                                                    @ message "hydrated from foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Layout
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < MemoryNavigate 
                                            @ to "/foo"
                                            + Link to Foo
                                        < MemoryNavigate 
                                            @ to "/bar"
                                            + Link to Bar
                                        p 
                                            + {navigation.state}
                                        < Outlet 
                            function Foo
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Foo:
                                        + {data?.message}
                            function Bar
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Bar:
                                        + {data?.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Foo:&lf;
                                    + &nbsp;             hydrated from foo&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            let error = new Error("Kaboom!")
                            set error.stack = "FAKE STACK TRACE"
                            _ barDefer.reject(error)
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Kaboom!")
                            let html = getHtml(container)
                            _ expect(html).toMatch("Unexpected Application Error!")
                            _ expect(html).toMatch("Kaboom!")
                            _ expect(html).toMatch("FAKE STACK TRACE")
                            _ expect(html).toMatch("💿 Hey developer 👋")
                        # This test ensures that when manual routes are used, we add hasErrorBoundary
                    _ it
                        @ "renders navigation errors on leaf elements (when using manual route objects)"
                        async=> 
                            let barDefer = createDeferred()
                            let routes
                                [ 
                                    { 
                                        @ path "/"
                                        @ element
                                            < Layout 
                                        [ children
                                            { 
                                                @ path "foo"
                                                @ element
                                                    h1 
                                                        + Foo
                                            { 
                                                @ path "bar"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr barDefer.promise
                                                @ element
                                                    < Bar 
                                                @ errorElement
                                                    < BarError 
                            let router
                                _ createMemoryRouter
                                    @ routes
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Layout
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < MemoryNavigate 
                                            @ to "/bar"
                                            + Link to Bar
                                        p 
                                            + {navigation.state}
                                        < Outlet 
                            function Bar
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    h1 
                                        + Bar:
                                        + {data?.message}
                            function BarError
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + Bar Error:
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Foo&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ barDefer.reject(Error("Kaboom!"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Bar Error:Kaboom!")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/bar"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Bar&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Bar Error:&lf;
                                    + &nbsp;             Kaboom!&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                        # This test ensures that when manual routes are used, we add hasErrorBoundary
                    _ it
                        @ "handles render errors in parent errorElement"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                div 
                                                    h1 
                                                        + This should not show
                                                    < Outlet 
                                            @ errorElement
                                                < ErrorBoundary 
                                            < Route 
                                                @ path "child"
                                                @ element
                                                    < ChildComp 
                                    { 
                                        [ initialEntries
                                            @ "/child"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function ChildComp
                                :return
                                    :ref React.ReactElement
                                throw new Error("Kaboom!")
                            function ErrorBoundary
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Kaboom!&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "handles render errors in child errorElement"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                div 
                                                    h1 
                                                        + Parent
                                                    < Outlet 
                                            @ errorElement
                                                p 
                                                    + Don't show this
                                            < Route 
                                                @ path "child"
                                                @ element
                                                    < ChildComp 
                                                @ errorElement
                                                    < ErrorBoundary 
                                    { 
                                        [ initialEntries
                                            @ "/child"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function ChildComp
                                :return
                                    :ref React.ReactElement
                                throw new Error("Kaboom!")
                            function ErrorBoundary
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Parent&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Kaboom!&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "handles render errors in default errorElement"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                div 
                                                    h1 
                                                        + Parent
                                                    < Outlet 
                                            < Route 
                                                @ path "child"
                                                @ element
                                                    < ChildComp 
                                    { 
                                        [ initialEntries
                                            @ "/child"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function ChildComp
                                :return
                                    :ref React.ReactElement
                                let error = new Error("Kaboom!")
                                set error.stack = "FAKE STACK TRACE"
                                throw error
                            let html = getHtml(container)
                            _ expect(html).toMatch("Unexpected Application Error!")
                            _ expect(html).toMatch("Kaboom!")
                            _ expect(html).toMatch("FAKE STACK TRACE")
                            _ expect(html).toMatch("💿 Hey developer 👋")
                    _ it
                        @ "does not handle render errors for non-data routers"
                        async=> 
                            _ expect
                                => 
                                    _ render
                                        < MemoryRouter 
                                            @ initialEntries
                                                [ 
                                                    @ "/child"
                                            < Routes 
                                                < Route 
                                                    @ path "/"
                                                    @ element
                                                        div 
                                                            h1 
                                                                + Parent
                                                            < Outlet 
                                                    < Route 
                                                        @ path "child"
                                                        @ element
                                                            < ChildComp 
                                ._ toThrowErrorMatchingInlineSnapshot
                                    `lit 
                                        + "Kaboom!"
                            function ChildComp
                                :return
                                    :ref React.ReactElement
                                throw new Error("Kaboom!")
                    _ it
                        @ "handles a `null` render-error"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    [ 
                                        { 
                                            @ path "/"
                                            m Component
                                                throw null
                                            m ErrorBoundary
                                                return 
                                                    pre 
                                                        { 
                                                            iif useRouteError() === null
                                                                then "Yes"
                                                                else "No"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Yes")
                            _ expect(getHtml(container)).toMatch("Yes")
                    _ it
                        @ "handles a `null` render-error from a defer() call"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    [ 
                                        { 
                                            @ path "/"
                                            m loader
                                                return 
                                                    _ defer
                                                        { 
                                                            @ lazy Promise.reject(null)
                                            m Component
                                                let data
                                                    _ useLoaderData()
                                                        :as 
                                                            :{ 
                                                                :p lazy
                                                                    :ref Promise
                                                                        :param unknown
                                                return 
                                                    < React.Suspense 
                                                        < Await 
                                                            @ resolve {data.lazy}
                                                            + No
                                            m ErrorBoundary
                                                return 
                                                    pre 
                                                        { 
                                                            iif useRouteError() === null
                                                                then "Yes"
                                                                else "No"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Yes")
                            _ expect(getHtml(container)).toMatch("Yes")
                    _ it
                        @ "handles back button routing away from a child error boundary"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Parent 
                                            @ errorElement
                                                p 
                                                    + Don't show this
                                            < Route 
                                                @ path "child"
                                                @ element
                                                    < Child 
                                                @ errorElement
                                                    < ErrorBoundary 
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        div 
                                            < RouterProvider 
                                                @ router {router}
                            function Parent
                                return 
                                    < React.Fragment
                                        h1 
                                            + Parent
                                        < Outlet 
                            function Child
                                :return
                                    :ref React.ReactElement
                                throw new Error("Kaboom!")
                            function ErrorBoundary
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Parent&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ router.navigate("/child")
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Kaboom!")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Parent&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Kaboom!&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ router.navigate(-1)
                            await 
                                _ waitFor
                                    => 
                                        _ expect(queryByText(container, "Kaboom!")).not.toBeInTheDocument()
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Parent&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "handles back button routing away from a default error boundary"
                        async=> 
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Parent 
                                            < Route 
                                                @ path "child"
                                                @ element
                                                    < Child 
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        div 
                                            < RouterProvider 
                                                @ router {router}
                            function Parent
                                return 
                                    < React.Fragment
                                        h1 
                                            + Parent
                                        < Outlet 
                            function Child
                                :return
                                    :ref React.ReactElement
                                let error = new Error("Kaboom!")
                                set error.stack = "FAKE STACK TRACE"
                                throw error
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Parent&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ router.navigate("/child")
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Kaboom!")
                            let html = getHtml(container)
                            _ expect(html).toMatch("Unexpected Application Error!")
                            _ expect(html).toMatch("Kaboom!")
                            _ expect(html).toMatch("FAKE STACK TRACE")
                            _ expect(html).toMatch("💿 Hey developer 👋")
                            _ router.navigate(-1)
                            await 
                                _ waitFor
                                    => 
                                        _ expect(queryByText(container, "Kaboom!")).not.toBeInTheDocument()
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <h1>&lf;
                                    + &nbsp;             Parent&lf;
                                    + &nbsp;           </h1>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "does not allow loaderData usage in self-caught error boundaries"
                        async=> 
                            let errorSpy = jest.spyOn(console, "error")
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Layout 
                                            < Route 
                                                @ path "foo"
                                                @ loader
                                                    => 
                                                        _ Promise.reject(Error("Kaboom!"))
                                                @ element
                                                    h1 
                                                        + Foo
                                                @ errorElement
                                                    < FooError 
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Layout
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < MemoryNavigate 
                                            @ to "/foo"
                                            + Link to Foo
                                        p 
                                            + {navigation.state}
                                        < Outlet 
                            function FooError
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                return 
                                    < React.Fragment
                                        p 
                                            + Foo Data:
                                            { 
                                                iif data === undefined
                                                    then "undefined"
                                                    else JSON.stringify(data)
                                        p 
                                            + Foo Error:
                                            + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Foo"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Foo Error:Kaboom!")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Foo Data:&lf;
                                    + &nbsp;             undefined&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             Foo Error:&lf;
                                    + &nbsp;             Kaboom!&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ expect(errorSpy).toHaveBeenCalledWith("You cannot `useLoaderData` in an errorElement (routeId: 0-0)")
                            _ errorSpy.mockRestore()
                    _ it
                        @ "does not allow useLoaderData usage in bubbled error boundaries"
                        async=> 
                            let errorSpy = jest.spyOn(console, "error")
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < Route 
                                            @ path "/"
                                            @ element
                                                < Layout 
                                            @ loader
                                                => 
                                                    + "ROOT"
                                            @ errorElement
                                                < LayoutError 
                                            < Route 
                                                @ path "foo"
                                                @ loader
                                                    => 
                                                        _ Promise.reject(Error("Kaboom!"))
                                                @ element
                                                    h1 
                                                        + Foo
                                    { 
                                        { hydrationData
                                            { loaderData
                                                @ "0" "ROOT"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            function Layout
                                let navigation = useNavigation()
                                return 
                                    div 
                                        < MemoryNavigate 
                                            @ to "/foo"
                                            + Link to Foo
                                        p 
                                            + {navigation.state}
                                        < Outlet 
                            function LayoutError
                                let data
                                    _ useLoaderData()
                                        :as 
                                            :{ 
                                                :p message
                                                    :string 
                                let error
                                    _ useRouteError()
                                        :as 
                                            :ref Error
                                return 
                                    < React.Fragment
                                        p 
                                            + Layout Data:
                                            { 
                                                iif data === undefined
                                                    then "undefined"
                                                    else JSON.stringify(data)
                                        p 
                                            + Layout Error:
                                            + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div>&lf;
                                    + &nbsp;           <a&lf;
                                    + &nbsp;             href="/foo"&lf;
                                    + &nbsp;           >&lf;
                                    + &nbsp;             Link to Foo&lf;
                                    + &nbsp;           </a>&lf;
                                    + &nbsp;           <p>&lf;
                                    + &nbsp;             idle&lf;
                                    + &nbsp;           </p>&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ fireEvent.click(screen.getByText("Link to Foo"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Layout Error:Kaboom!")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Layout Data:&lf;
                                    + &nbsp;           undefined&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Layout Error:&lf;
                                    + &nbsp;           Kaboom!&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ expect(errorSpy).toHaveBeenCalledWith("You cannot `useLoaderData` in an errorElement (routeId: 0)")
                            _ errorSpy.mockRestore()
            _ describe
                @ "defer"
                => 
                    function setupDeferredTest
                        param 
                            @ useRenderProp
                                = false
                            @ hasRouteErrorElement
                                = false
                            @ hasAwaitErrorElement
                                = false
                            @ triggerRenderError
                                = false
                            @ triggerFallbackError
                                = false
                            = 
                        let awaitRenderCount = 0
                        let barDefer = createDeferred()
                        let bazDefer = createDeferred()
                        let router
                            _ createMemoryRouter
                                _ createRoutesFromElements
                                    < Route 
                                        @ path "/"
                                        @ element
                                            < Layout 
                                        < Route 
                                            @ path "foo"
                                            @ element
                                                h1 
                                                    + Foo
                                        < Route 
                                            @ path "bar"
                                            @ loader
                                                => 
                                                    +
                                                        @expr barDefer.promise
                                            @ element
                                                < Bar 
                                            @ errorElement
                                                iif hasRouteErrorElement
                                                    then
                                                        < RouteError 
                                                    else null
                                        < Route 
                                            @ path "baz"
                                            @ loader
                                                => 
                                                    +
                                                        @expr bazDefer.promise
                                            @ element
                                                h1 
                                                    + Baz
                                { 
                                    [ initialEntries
                                        @ "/foo"
                        let 
                            { 
                                @ container
                            =
                                _ render
                                    < RouterProvider 
                                        @ router {router}
                        function Layout
                            let navigation = useNavigation()
                            return 
                                < React.Fragment
                                    < MemoryNavigate 
                                        @ to "/bar"
                                        + Link to Bar
                                    < MemoryNavigate 
                                        @ to "/baz"
                                        + Link to Baz
                                    div 
                                        @ id "content"
                                        p 
                                            + {navigation.state}
                                        < Outlet 
                        function Bar
                            let data
                                _ useLoaderData()
                                    :as 
                                        :{ 
                                            :p critical
                                                :string 
                            return 
                                < React.Fragment
                                    p 
                                        + {data.critical}
                                    < React.Suspense 
                                        @ fallback
                                            < LazyFallback 
                                        < AwaitCounter 
                                            @ data {data}
                        function AwaitCounter
                            { 
                                @ data
                            set awaitRenderCount++
                            return 
                                < React.Fragment
                                    < Await 
                                        @ resolve {data.lazy}
                                        @ errorElement
                                            iif hasAwaitErrorElement
                                                then
                                                    < LazyError 
                                                else null
                                        { 
                                            iif useRenderProp
                                                then
                                                    => 
                                                        param value
                                                        p 
                                                            + {value}
                                                else
                                                    < LazyData 
                        function RouteError
                            let error
                                _ useRouteError()
                                    :as 
                                        :ref Error
                            return 
                                p 
                                    + Route Error:
                                    + {error.message}
                        function LazyFallback
                            return 
                                iif triggerFallbackError
                                    then
                                        p 
                                            + {oops.i.did.it}
                                            # @ts-expect-error
                                    else
                                        p 
                                            + Loading...
                        function LazyData
                            let data
                                _ useAsyncValue()
                                    :as 
                                        :string 
                            return 
                                iif triggerRenderError
                                    then
                                        p 
                                            + {oops.i.did.it.again}
                                            # @ts-expect-error
                                    else
                                        p 
                                            + {data}
                        function LazyError
                            let data
                                _ useAsyncError()
                                    :as 
                                        :ref Error
                            return 
                                p 
                                    + Await Error:
                                    + {data.message}
                        return 
                            { 
                                @ container
                                    _ container.querySelector("#content")
                                        :as 
                                            :ref HTMLElement
                                @ barDefer
                                @ bazDefer
                                m getAwaitRenderCount
                                    return awaitRenderCount
                    _ it
                        @ "allows loaders to returned deferred data (child component)"
                        async=> 
                            let 
                                { 
                                    @ barDefer
                                    @ container
                                = setupDeferredTest()
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Foo&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            let barValueDfd = createDeferred()
                            _ barDefer.resolve
                                _ defer
                                    { 
                                        @ critical "CRITICAL"
                                        @ lazy barValueDfd.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ barValueDfd.resolve("LAZY")
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("LAZY")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           LAZY&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "allows loaders to returned deferred data (render prop)"
                        async=> 
                            let 
                                { 
                                    @ barDefer
                                    @ container
                                =
                                    _ setupDeferredTest
                                        { 
                                            @ useRenderProp true
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Foo&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            let barValueDfd = createDeferred()
                            _ barDefer.resolve
                                _ defer
                                    { 
                                        @ critical "CRITICAL"
                                        @ lazy barValueDfd.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ barValueDfd.resolve("LAZY")
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("LAZY")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           LAZY&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "sends data errors to the provided errorElement"
                        async=> 
                            let 
                                { 
                                    @ barDefer
                                    @ container
                                =
                                    _ setupDeferredTest
                                        { 
                                            @ hasRouteErrorElement true
                                            @ hasAwaitErrorElement true
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Foo&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            let barValueDfd = createDeferred()
                            _ barDefer.resolve
                                _ defer
                                    { 
                                        @ critical "CRITICAL"
                                        @ lazy barValueDfd.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ barValueDfd.reject(Error("Kaboom!"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText(/Kaboom!/)
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Await Error:&lf;
                                    + &nbsp;           Kaboom!&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "sends unhandled data errors to the nearest route error boundary"
                        async=> 
                            let 
                                { 
                                    @ barDefer
                                    @ container
                                =
                                    _ setupDeferredTest
                                        { 
                                            @ hasRouteErrorElement true
                                            @ hasAwaitErrorElement false
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Foo&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            let barValueDfd = createDeferred()
                            _ barDefer.resolve
                                _ defer
                                    { 
                                        @ critical "CRITICAL"
                                        @ lazy barValueDfd.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ barValueDfd.reject(Error("Kaboom!"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText(/Kaboom!/)
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Route Error:&lf;
                                    + &nbsp;           Kaboom!&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "sends render errors to the provided errorElement"
                        async=> 
                            let 
                                { 
                                    @ barDefer
                                    @ container
                                =
                                    _ setupDeferredTest
                                        { 
                                            @ hasRouteErrorElement true
                                            @ hasAwaitErrorElement true
                                            @ triggerRenderError true
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Foo&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            let barValueDfd = createDeferred()
                            _ barDefer.resolve
                                _ defer
                                    { 
                                        @ critical "CRITICAL"
                                        @ lazy barValueDfd.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ barValueDfd.resolve("LAZY")
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText(/oops is not defined/)
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Await Error:&lf;
                                    + &nbsp;           oops is not defined&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "sends unhandled render errors to the nearest route error boundary"
                        async=> 
                            let 
                                { 
                                    @ barDefer
                                    @ container
                                =
                                    _ setupDeferredTest
                                        { 
                                            @ hasRouteErrorElement true
                                            @ hasAwaitErrorElement false
                                            @ triggerRenderError true
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Foo&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            let barValueDfd = createDeferred()
                            _ barDefer.resolve
                                _ defer
                                    { 
                                        @ critical "CRITICAL"
                                        @ lazy barValueDfd.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ barValueDfd.resolve("LAZY")
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText(/oops is not defined/)
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Route Error:&lf;
                                    + &nbsp;           oops is not defined&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "does not handle fallback render errors in the Deferred errorElement"
                        async=> 
                            let 
                                { 
                                    @ barDefer
                                    @ container
                                =
                                    _ setupDeferredTest
                                        { 
                                            @ hasRouteErrorElement true
                                            @ hasAwaitErrorElement true
                                            @ triggerRenderError true
                                            @ triggerFallbackError true
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Foo&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            let barValueDfd = createDeferred()
                            _ barDefer.resolve
                                _ defer
                                    { 
                                        @ critical "CRITICAL"
                                        @ lazy barValueDfd.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Route Error:&lf;
                                    + &nbsp;           oops is not defined&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                                # Resolving doesn't do anything
                            _ barValueDfd.resolve("LAZY")
                                # Resolving doesn't do anything
                            await 
                                new Promise
                                    => 
                                        param r
                                        _ setTimeout(r, 1)
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Route Error:&lf;
                                    + &nbsp;           oops is not defined&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "freezes the UI for aborted deferreds"
                        async=> 
                            let 
                                { 
                                    @ barDefer
                                    @ bazDefer
                                    @ container
                                    @ getAwaitRenderCount
                                = setupDeferredTest()
                            _ fireEvent.click(screen.getByText("Link to Bar"))
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Foo&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ expect(getAwaitRenderCount()).toBe(0)
                            let barValueDfd = createDeferred()
                            _ barDefer.resolve
                                _ defer
                                    { 
                                        @ critical "CRITICAL"
                                        @ lazy barValueDfd.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("idle")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ expect(getAwaitRenderCount()).toBe(1)
                                # Abort the deferred by navigating to /baz
                            _ fireEvent.click(screen.getByText("Link to Baz"))
                                # Abort the deferred by navigating to /baz
                            await 
                                new Promise
                                    => 
                                        param r
                                        _ setTimeout(r, 50)
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           loading&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           CRITICAL&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                                # 2 more renders by now - once for the navigation and once for the
                                # promise abort rejection
                            _ expect(getAwaitRenderCount()).toBe(3)
                                # 2 more renders by now - once for the navigation and once for the
                                # promise abort rejection
                                # complete /baz navigation
                            _ bazDefer.resolve(null)
                                # complete /baz navigation
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Baz")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Baz&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                                # Does nothing now
                            _ barValueDfd.resolve("LAZY")
                                # Does nothing now
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div&lf;
                                    + &nbsp;         id="content"&lf;
                                    + &nbsp;       >&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           idle&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;         <h1>&lf;
                                    + &nbsp;           Baz&lf;
                                    + &nbsp;         </h1>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ expect(getAwaitRenderCount()).toBe(3)
                    _ it
                        @ "should permit direct access to resolved values"
                        async=> 
                            let barDefer = createDeferred()
                            let router
                                _ createMemoryRouter
                                    _ createRoutesFromElements
                                        < React.Fragment
                                            < Route 
                                                @ path "foo"
                                                @ element
                                                    < React.Fragment
                                                        h1 
                                                            + Foo
                                                        < MemoryNavigate 
                                                            @ to "/bar"
                                                            + Link to bar
                                            < Route 
                                                @ path "bar"
                                                @ loader
                                                    => 
                                                        +
                                                            @expr barDefer.promise
                                                @ element
                                                    < Bar 
                                    { 
                                        [ initialEntries
                                            @ "/foo"
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < RouterProvider 
                                            @ router {router}
                            let count = 0
                            function Bar
                                let 
                                    { 
                                        @ bar
                                    =
                                        _ useLoaderData()
                                            :as 
                                                :{ 
                                                    :p bar
                                                        :ref Promise
                                                            :param string
                                _ React.useEffect
                                    => 
                                        _ bar.then
                                            => 
                                                param data
                                                set =
                                                    :! 
                                                        _ container.querySelector("#content")
                                                        . innerHTML
                                                    set data + " " + ++count
                                    [ 
                                        @ bar
                                return 
                                    div 
                                        @ id "content"
                                        + Waiting for data...
                            _ fireEvent.click(screen.getByText("Link to bar"))
                            let barValueDefer = createDeferred()
                            await 
                                _ barDefer.resolve
                                    { 
                                        @ bar barValueDefer.promise
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Waiting for data...")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div&lf;
                                    + &nbsp;           id="content"&lf;
                                    + &nbsp;         >&lf;
                                    + &nbsp;           Waiting for data...&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            await 
                                _ barValueDefer.resolve("BAR")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <div&lf;
                                    + &nbsp;           id="content"&lf;
                                    + &nbsp;         >&lf;
                                    + &nbsp;           BAR 1&lf;
                                    + &nbsp;         </div>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "can render raw resolved promises with <Await>"
                        async=> 
                            let dfd = createDeferred()
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < React.Suspense 
                                            @ fallback
                                                p 
                                                    + Loading...
                                            < Await 
                                                @ resolve {dfd.promise}
                                                { 
                                                    => 
                                                        param data
                                                        p 
                                                            + {data}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            _ dfd.resolve("RESOLVED")
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("RESOLVED")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           RESOLVED&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "can render raw rejected promises with <Await>"
                        async=> 
                            let dfd = createDeferred()
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < React.Suspense 
                                            @ fallback
                                                p 
                                                    + Loading...
                                            < Await 
                                                @ resolve {dfd.promise}
                                                @ errorElement
                                                    < ErrorElement 
                                                { 
                                                    => 
                                                        param data
                                                        p 
                                                            + {data}
                            function ErrorElement
                                let error
                                    _ useAsyncError()
                                        :as 
                                            :ref Error
                                return 
                                    p 
                                        + Error:
                                        + {error.message}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Loading...&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                            await 
                                _ dfd.reject(Error("REJECTED"))
                            await 
                                _ waitFor
                                    => 
                                        _ screen.getByText("Error:REJECTED")
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           Error:&lf;
                                    + &nbsp;           REJECTED&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
                    _ it
                        @ "can render raw values with <Await>"
                        async=> 
                            let 
                                { 
                                    @ container
                                =
                                    _ render
                                        < Await 
                                            @ resolve {"VALUE"}
                                            { 
                                                => 
                                                    param data
                                                    p 
                                                        + {data}
                            _ expect(getHtml(container)).toMatchInlineSnapshot
                                `lit 
                                    + &lf;
                                    + &nbsp;       "<div>&lf;
                                    + &nbsp;         <p>&lf;
                                    + &nbsp;           VALUE&lf;
                                    + &nbsp;         </p>&lf;
                                    + &nbsp;       </div>"&lf;
                                    + &nbsp;    &nbsp;
