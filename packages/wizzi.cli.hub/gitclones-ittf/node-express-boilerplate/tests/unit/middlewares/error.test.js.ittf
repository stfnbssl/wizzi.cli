module
    kind react
    const mongoose = require('mongoose')
    const httpStatus = require('http-status')
    const httpMocks = require('node-mocks-http')
    const 
        { 
            @ errorConverter
            @ errorHandler
        = require('../../../src/middlewares/error')
    const ApiError = require('../../../src/utils/ApiError')
    const config = require('../../../src/config/config')
    const logger = require('../../../src/config/logger')
    _ describe
        @ 'Error middlewares'
        => 
            _ describe
                @ 'Error converter'
                => 
                    _ test
                        @ 'should return the same ApiError object it was called with'
                        => 
                            const error = new ApiError(httpStatus.BAD_REQUEST, 'Any error')
                            const next = jest.fn()
                            _ errorConverter(error, httpMocks.createRequest(), httpMocks.createResponse(), next)
                            _ expect(next).toHaveBeenCalledWith(error)
                    _ test
                        @ 'should convert an Error to ApiError and preserve its status and message'
                        => 
                            const error = new Error('Any error')
                            set error.statusCode = httpStatus.BAD_REQUEST
                            const next = jest.fn()
                            _ errorConverter(error, httpMocks.createRequest(), httpMocks.createResponse(), next)
                            _ expect(next).toHaveBeenCalledWith(expect.any(ApiError))
                            _ expect(next).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ statusCode error.statusCode
                                        @ message error.message
                                        @ isOperational false
                    _ test
                        @ 'should convert an Error without status to ApiError with status 500'
                        => 
                            const error = new Error('Any error')
                            const next = jest.fn()
                            _ errorConverter(error, httpMocks.createRequest(), httpMocks.createResponse(), next)
                            _ expect(next).toHaveBeenCalledWith(expect.any(ApiError))
                            _ expect(next).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ statusCode httpStatus.INTERNAL_SERVER_ERROR
                                        @ message error.message
                                        @ isOperational false
                    _ test
                        @ 'should convert an Error without message to ApiError with default message of that http status'
                        => 
                            const error = new Error()
                            set error.statusCode = httpStatus.BAD_REQUEST
                            const next = jest.fn()
                            _ errorConverter(error, httpMocks.createRequest(), httpMocks.createResponse(), next)
                            _ expect(next).toHaveBeenCalledWith(expect.any(ApiError))
                            _ expect(next).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ statusCode error.statusCode
                                        @ message httpStatus[error.statusCode]
                                        @ isOperational false
                    _ test
                        @ 'should convert a Mongoose error to ApiError with status 400 and preserve its message'
                        => 
                            const error = new mongoose.Error('Any mongoose error')
                            const next = jest.fn()
                            _ errorConverter(error, httpMocks.createRequest(), httpMocks.createResponse(), next)
                            _ expect(next).toHaveBeenCalledWith(expect.any(ApiError))
                            _ expect(next).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ statusCode httpStatus.BAD_REQUEST
                                        @ message error.message
                                        @ isOperational false
                    _ test
                        @ 'should convert any other object to ApiError with status 500 and its message'
                        => 
                            const error
                                { 
                            const next = jest.fn()
                            _ errorConverter(error, httpMocks.createRequest(), httpMocks.createResponse(), next)
                            _ expect(next).toHaveBeenCalledWith(expect.any(ApiError))
                            _ expect(next).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ statusCode httpStatus.INTERNAL_SERVER_ERROR
                                        @ message httpStatus[httpStatus.INTERNAL_SERVER_ERROR]
                                        @ isOperational false
            _ describe
                @ 'Error handler'
                => 
                    _ beforeEach
                        => 
                            _ jest.spyOn(logger, 'error').mockImplementation
                                => 
                    _ test
                        @ 'should send proper error response and put the error message in res.locals'
                        => 
                            const error = new ApiError(httpStatus.BAD_REQUEST, 'Any error')
                            const res = httpMocks.createResponse()
                            const sendSpy = jest.spyOn(res, 'send')
                            _ errorHandler(error, httpMocks.createRequest(), res)
                            _ expect(sendSpy).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ code error.statusCode
                                        @ message error.message
                            _ expect(res.locals.errorMessage).toBe(error.message)
                    _ test
                        @ 'should put the error stack in the response if in development mode'
                        => 
                            set config.env = 'development'
                            const error = new ApiError(httpStatus.BAD_REQUEST, 'Any error')
                            const res = httpMocks.createResponse()
                            const sendSpy = jest.spyOn(res, 'send')
                            _ errorHandler(error, httpMocks.createRequest(), res)
                            _ expect(sendSpy).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ code error.statusCode
                                        @ message error.message
                                        @ stack error.stack
                            set config.env = process.env.NODE_ENV
                    _ test
                        @ 'should send internal server error status and message if in production mode and error is not operational'
                        => 
                            set config.env = 'production'
                            const error = new ApiError(httpStatus.BAD_REQUEST, 'Any error', false)
                            const res = httpMocks.createResponse()
                            const sendSpy = jest.spyOn(res, 'send')
                            _ errorHandler(error, httpMocks.createRequest(), res)
                            _ expect(sendSpy).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ code httpStatus.INTERNAL_SERVER_ERROR
                                        @ message httpStatus[httpStatus.INTERNAL_SERVER_ERROR]
                            _ expect(res.locals.errorMessage).toBe(error.message)
                            set config.env = process.env.NODE_ENV
                    _ test
                        @ 'should preserve original error status and message if in production mode and error is operational'
                        => 
                            set config.env = 'production'
                            const error = new ApiError(httpStatus.BAD_REQUEST, 'Any error')
                            const res = httpMocks.createResponse()
                            const sendSpy = jest.spyOn(res, 'send')
                            _ errorHandler(error, httpMocks.createRequest(), res)
                            _ expect(sendSpy).toHaveBeenCalledWith
                                _ expect.objectContaining
                                    { 
                                        @ code error.statusCode
                                        @ message error.message
                            set config.env = process.env.NODE_ENV
