module
    kind react
    const mongoose = require('mongoose')
    const validator = require('validator')
    const bcrypt = require('bcryptjs')
    const 
        { 
            @ toJSON
            @ paginate
        = require('./plugins')
    const 
        { 
            @ roles
        = require('../config/roles')
    const userSchema
        _ mongoose.Schema
            { 
                { name
                    @ type String
                    @ required true
                    @ trim true
                { email
                    @ type String
                    @ required true
                    @ unique true
                    @ trim true
                    @ lowercase true
                    m validate
                        param value
                        if !validator.isEmail(value)
                            throw new Error('Invalid email')
                { password
                    @ type String
                    @ required true
                    @ trim true
                    @ minlength 8
                    m validate
                        param value
                        if !value.match(/\d/) || !value.match(/[a-zA-Z]/)
                            throw new Error('Password must contain at least one letter and one number')
                    @ private true
                        # used by the toJSON plugin
                { role
                    @ type String
                    @ enum roles
                    @ default 'user'
                { isEmailVerified
                    @ type Boolean
                    @ default false
            { 
                @ timestamps true
        # add plugin that converts mongoose to json
    _ userSchema.plugin(toJSON)
        # add plugin that converts mongoose to json
    _ userSchema.plugin(paginate)
        #
            # *
            # * Check if email is taken
            # * @param {string} email - The user's email
            # * @param {ObjectId} [excludeUserId] - The id of the user to be excluded
            # * @returns {Promise<boolean>}
            # 
    set userSchema.statics.isEmailTaken =
        async-function 
            param email
            param excludeUserId
            const user
                await 
                    _ this.findOne
                        { 
                            @ email
                            { _id
                                @ $ne excludeUserId
            return !!user
        #
            # *
            # * Check if email is taken
            # * @param {string} email - The user's email
            # * @param {ObjectId} [excludeUserId] - The id of the user to be excluded
            # * @returns {Promise<boolean>}
            # 
        #
            # *
            # * Check if password matches the user's password
            # * @param {string} password
            # * @returns {Promise<boolean>}
            # 
    set userSchema.methods.isPasswordMatch =
        async-function 
            param password
            const user = this
            return bcrypt.compare(password, user.password)
        #
            # *
            # * Check if password matches the user's password
            # * @param {string} password
            # * @returns {Promise<boolean>}
            # 
    _ userSchema.pre
        @ 'save'
        async-function 
            param next
            const user = this
            if user.isModified('password')
                set user.password =
                    await 
                        _ bcrypt.hash(user.password, 8)
            _ next()
        #
            # *
            # * @typedef User
            # 
    const User = mongoose.model('User', userSchema)
        #
            # *
            # * @typedef User
            # 
    set module.exports = User
