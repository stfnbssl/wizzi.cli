module
    kind react
    const express = require('express')
    const helmet = require('helmet')
    const xss = require('xss-clean')
    const mongoSanitize = require('express-mongo-sanitize')
    const compression = require('compression')
    const cors = require('cors')
    const passport = require('passport')
    const httpStatus = require('http-status')
    const config = require('./config/config')
    const morgan = require('./config/morgan')
    const 
        { 
            @ jwtStrategy
        = require('./config/passport')
    const 
        { 
            @ authLimiter
        = require('./middlewares/rateLimiter')
    const routes = require('./routes/v1')
    const 
        { 
            @ errorConverter
            @ errorHandler
        = require('./middlewares/error')
    const ApiError = require('./utils/ApiError')
    const app = express()
    if config.env !== 'test'
        _ app.use(morgan.successHandler)
        _ app.use(morgan.errorHandler)
    _ app.use(helmet())
        # set security HTTP headers
        # parse json request body
    _ app.use(express.json())
        # parse json request body
        # parse urlencoded request body
    _ app.use
        _ express.urlencoded
            { 
                @ extended true
        # parse urlencoded request body
        # sanitize request data
    _ app.use(xss())
        # sanitize request data
    _ app.use(mongoSanitize())
        # gzip compression
    _ app.use(compression())
        # gzip compression
        # enable cors
    _ app.use(cors())
        # enable cors
    _ app.options('*', cors())
        # jwt authentication
    _ app.use(passport.initialize())
        # jwt authentication
    _ passport.use('jwt', jwtStrategy)
        # limit repeated failed requests to auth endpoints
    if config.env === 'production'
        _ app.use('/v1/auth', authLimiter)
    _ app.use('/v1', routes)
        # v1 api routes
        # send back a 404 error for any unknown api request
    _ app.use
        => 
            param req
            param res
            param next
            _ next(ApiError(httpStatus.NOT_FOUND, 'Not found'))
        # send back a 404 error for any unknown api request
        # convert error to ApiError, if needed
    _ app.use(errorConverter)
        # convert error to ApiError, if needed
        # handle error
    _ app.use(errorHandler)
        # handle error
    set module.exports = app
