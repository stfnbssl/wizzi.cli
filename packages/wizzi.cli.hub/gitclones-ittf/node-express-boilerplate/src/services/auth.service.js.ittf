module
    kind react
    const httpStatus = require('http-status')
    const tokenService = require('./token.service')
    const userService = require('./user.service')
    const Token = require('../models/token.model')
    const ApiError = require('../utils/ApiError')
    const 
        { 
            @ tokenTypes
        = require('../config/tokens')
        #
            # *
            # * Login with username and password
            # * @param {string} email
            # * @param {string} password
            # * @returns {Promise<User>}
            # 
    const loginUserWithEmailAndPassword
        async=> 
            param email
            param password
            const user
                await 
                    _ userService.getUserByEmail(email)
            if 
                test
                    || 
                        + !user
                        op! 
                            await 
                                _ user.isPasswordMatch(password)
                throw new ApiError(httpStatus.UNAUTHORIZED, 'Incorrect email or password')
            return user
        #
            # *
            # * Login with username and password
            # * @param {string} email
            # * @param {string} password
            # * @returns {Promise<User>}
            # 
        #
            # *
            # * Logout
            # * @param {string} refreshToken
            # * @returns {Promise}
            # 
    const logout
        async=> 
            param refreshToken
            const refreshTokenDoc
                await 
                    _ Token.findOne
                        { 
                            @ token refreshToken
                            @ type tokenTypes.REFRESH
                            @ blacklisted false
            if !refreshTokenDoc
                throw new ApiError(httpStatus.NOT_FOUND, 'Not found')
            await 
                _ refreshTokenDoc.remove()
        #
            # *
            # * Logout
            # * @param {string} refreshToken
            # * @returns {Promise}
            # 
        #
            # *
            # * Refresh auth tokens
            # * @param {string} refreshToken
            # * @returns {Promise<Object>}
            # 
    const refreshAuth
        async=> 
            param refreshToken
            try 
                const refreshTokenDoc
                    await 
                        _ tokenService.verifyToken(refreshToken, tokenTypes.REFRESH)
                const user
                    await 
                        _ userService.getUserById(refreshTokenDoc.user)
                if !user
                    throw new Error()
                await 
                    _ refreshTokenDoc.remove()
                return tokenService.generateAuthTokens(user)
            catch error
                throw new ApiError(httpStatus.UNAUTHORIZED, 'Please authenticate')
        #
            # *
            # * Refresh auth tokens
            # * @param {string} refreshToken
            # * @returns {Promise<Object>}
            # 
        #
            # *
            # * Reset password
            # * @param {string} resetPasswordToken
            # * @param {string} newPassword
            # * @returns {Promise}
            # 
    const resetPassword
        async=> 
            param resetPasswordToken
            param newPassword
            try 
                const resetPasswordTokenDoc
                    await 
                        _ tokenService.verifyToken(resetPasswordToken, tokenTypes.RESET_PASSWORD)
                const user
                    await 
                        _ userService.getUserById(resetPasswordTokenDoc.user)
                if !user
                    throw new Error()
                await 
                    _ userService.updateUserById
                        @expr user.id
                        { 
                            @ password newPassword
                await 
                    _ Token.deleteMany
                        { 
                            @ user user.id
                            @ type tokenTypes.RESET_PASSWORD
            catch error
                throw new ApiError(httpStatus.UNAUTHORIZED, 'Password reset failed')
        #
            # *
            # * Reset password
            # * @param {string} resetPasswordToken
            # * @param {string} newPassword
            # * @returns {Promise}
            # 
        #
            # *
            # * Verify email
            # * @param {string} verifyEmailToken
            # * @returns {Promise}
            # 
    const verifyEmail
        async=> 
            param verifyEmailToken
            try 
                const verifyEmailTokenDoc
                    await 
                        _ tokenService.verifyToken(verifyEmailToken, tokenTypes.VERIFY_EMAIL)
                const user
                    await 
                        _ userService.getUserById(verifyEmailTokenDoc.user)
                if !user
                    throw new Error()
                await 
                    _ Token.deleteMany
                        { 
                            @ user user.id
                            @ type tokenTypes.VERIFY_EMAIL
                await 
                    _ userService.updateUserById
                        @expr user.id
                        { 
                            @ isEmailVerified true
            catch error
                throw new ApiError(httpStatus.UNAUTHORIZED, 'Email verification failed')
        #
            # *
            # * Verify email
            # * @param {string} verifyEmailToken
            # * @returns {Promise}
            # 
    set module.exports =
        { 
            @ loginUserWithEmailAndPassword
            @ logout
            @ refreshAuth
            @ resetPassword
            @ verifyEmail
