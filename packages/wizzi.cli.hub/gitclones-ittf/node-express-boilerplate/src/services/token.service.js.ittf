module
    kind react
    const jwt = require('jsonwebtoken')
    const moment = require('moment')
    const httpStatus = require('http-status')
    const config = require('../config/config')
    const userService = require('./user.service')
    const 
        { 
            @ Token
        = require('../models')
    const ApiError = require('../utils/ApiError')
    const 
        { 
            @ tokenTypes
        = require('../config/tokens')
        #
            # *
            # * Generate token
            # * @param {ObjectId} userId
            # * @param {Moment} expires
            # * @param {string} type
            # * @param {string} [secret]
            # * @returns {string}
            # 
    const generateToken
        => 
            param userId
            param expires
            param type
            param secret = config.jwt.secret
            const payload
                { 
                    @ sub userId
                    @ iat moment().unix()
                    @ exp expires.unix()
                    @ type
            return jwt.sign(payload, secret)
        #
            # *
            # * Generate token
            # * @param {ObjectId} userId
            # * @param {Moment} expires
            # * @param {string} type
            # * @param {string} [secret]
            # * @returns {string}
            # 
        #
            # *
            # * Save a token
            # * @param {string} token
            # * @param {ObjectId} userId
            # * @param {Moment} expires
            # * @param {string} type
            # * @param {boolean} [blacklisted]
            # * @returns {Promise<Token>}
            # 
    const saveToken
        async=> 
            param token
            param userId
            param expires
            param type
            param blacklisted = false
            const tokenDoc
                await 
                    _ Token.create
                        { 
                            @ token
                            @ user userId
                            @ expires expires.toDate()
                            @ type
                            @ blacklisted
            return tokenDoc
        #
            # *
            # * Save a token
            # * @param {string} token
            # * @param {ObjectId} userId
            # * @param {Moment} expires
            # * @param {string} type
            # * @param {boolean} [blacklisted]
            # * @returns {Promise<Token>}
            # 
        #
            # *
            # * Verify token and return token doc (or throw an error if it is not valid)
            # * @param {string} token
            # * @param {string} type
            # * @returns {Promise<Token>}
            # 
    const verifyToken
        async=> 
            param token
            param type
            const payload = jwt.verify(token, config.jwt.secret)
            const tokenDoc
                await 
                    _ Token.findOne
                        { 
                            @ token
                            @ type
                            @ user payload.sub
                            @ blacklisted false
            if !tokenDoc
                throw new Error('Token not found')
            return tokenDoc
        #
            # *
            # * Verify token and return token doc (or throw an error if it is not valid)
            # * @param {string} token
            # * @param {string} type
            # * @returns {Promise<Token>}
            # 
        #
            # *
            # * Generate auth tokens
            # * @param {User} user
            # * @returns {Promise<Object>}
            # 
    const generateAuthTokens
        async=> 
            param user
            const accessTokenExpires = moment().add(config.jwt.accessExpirationMinutes, 'minutes')
            const accessToken = generateToken(user.id, accessTokenExpires, tokenTypes.ACCESS)
            const refreshTokenExpires = moment().add(config.jwt.refreshExpirationDays, 'days')
            const refreshToken = generateToken(user.id, refreshTokenExpires, tokenTypes.REFRESH)
            await 
                _ saveToken(refreshToken, user.id, refreshTokenExpires, tokenTypes.REFRESH)
            return 
                { 
                    { access
                        @ token accessToken
                        @ expires accessTokenExpires.toDate()
                    { refresh
                        @ token refreshToken
                        @ expires refreshTokenExpires.toDate()
        #
            # *
            # * Generate auth tokens
            # * @param {User} user
            # * @returns {Promise<Object>}
            # 
        #
            # *
            # * Generate reset password token
            # * @param {string} email
            # * @returns {Promise<string>}
            # 
    const generateResetPasswordToken
        async=> 
            param email
            const user
                await 
                    _ userService.getUserByEmail(email)
            if !user
                throw new ApiError(httpStatus.NOT_FOUND, 'No users found with this email')
            const expires = moment().add(config.jwt.resetPasswordExpirationMinutes, 'minutes')
            const resetPasswordToken = generateToken(user.id, expires, tokenTypes.RESET_PASSWORD)
            await 
                _ saveToken(resetPasswordToken, user.id, expires, tokenTypes.RESET_PASSWORD)
            return resetPasswordToken
        #
            # *
            # * Generate reset password token
            # * @param {string} email
            # * @returns {Promise<string>}
            # 
        #
            # *
            # * Generate verify email token
            # * @param {User} user
            # * @returns {Promise<string>}
            # 
    const generateVerifyEmailToken
        async=> 
            param user
            const expires = moment().add(config.jwt.verifyEmailExpirationMinutes, 'minutes')
            const verifyEmailToken = generateToken(user.id, expires, tokenTypes.VERIFY_EMAIL)
            await 
                _ saveToken(verifyEmailToken, user.id, expires, tokenTypes.VERIFY_EMAIL)
            return verifyEmailToken
        #
            # *
            # * Generate verify email token
            # * @param {User} user
            # * @returns {Promise<string>}
            # 
    set module.exports =
        { 
            @ generateToken
            @ saveToken
            @ verifyToken
            @ generateAuthTokens
            @ generateResetPasswordToken
            @ generateVerifyEmailToken
