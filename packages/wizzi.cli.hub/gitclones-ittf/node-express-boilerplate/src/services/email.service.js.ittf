module
    kind react
    const nodemailer = require('nodemailer')
    const config = require('../config/config')
    const logger = require('../config/logger')
    const transport = nodemailer.createTransport(config.email.smtp)
        #
            # istanbul ignore next
    if config.env !== 'test'
        _ transport.verify().then
            => 
                _ logger.info('Connected to email server')
            ._ catch
                => 
                    _ logger.warn('Unable to connect to email server. Make sure you have configured the SMTP options in .env')
    const sendEmail
        async=> 
            param to
            param subject
            param text
            const msg
                { 
                    @ from config.email.from
                    @ to
                    @ subject
                    @ text
            await 
                _ transport.sendMail(msg)
        #
            # *
            # * Send an email
            # * @param {string} to
            # * @param {string} subject
            # * @param {string} text
            # * @returns {Promise}
            # 
        #
            # *
            # * Send reset password email
            # * @param {string} to
            # * @param {string} token
            # * @returns {Promise}
            # 
    const sendResetPasswordEmail
        async=> 
            param to
            param token
            const subject = 'Reset password'
                # replace this url with the link to the reset password page of your front-end app
            const resetPasswordUrl
                `lit 
                    + http://link-to-app/reset-password?token=
                    @ token
                    + 
                # replace this url with the link to the reset password page of your front-end app
            const text
                `lit 
                    + Dear user,&lf;
                    + To reset your password, click on this link:&nbsp;
                    @ resetPasswordUrl
                    + &lf;
                    + If you did not request any password resets, then ignore this email.
            await 
                _ sendEmail(to, subject, text)
        #
            # *
            # * Send reset password email
            # * @param {string} to
            # * @param {string} token
            # * @returns {Promise}
            # 
        #
            # *
            # * Send verification email
            # * @param {string} to
            # * @param {string} token
            # * @returns {Promise}
            # 
    const sendVerificationEmail
        async=> 
            param to
            param token
            const subject = 'Email Verification'
                # replace this url with the link to the email verification page of your front-end app
            const verificationEmailUrl
                `lit 
                    + http://link-to-app/verify-email?token=
                    @ token
                    + 
                # replace this url with the link to the email verification page of your front-end app
            const text
                `lit 
                    + Dear user,&lf;
                    + To verify your email, click on this link:&nbsp;
                    @ verificationEmailUrl
                    + &lf;
                    + If you did not create an account, then ignore this email.
            await 
                _ sendEmail(to, subject, text)
        #
            # *
            # * Send verification email
            # * @param {string} to
            # * @param {string} token
            # * @returns {Promise}
            # 
    set module.exports =
        { 
            @ transport
            @ sendEmail
            @ sendResetPasswordEmail
            @ sendVerificationEmail
