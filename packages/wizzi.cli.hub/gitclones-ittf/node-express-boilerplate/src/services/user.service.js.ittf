module
    kind react
    const httpStatus = require('http-status')
    const 
        { 
            @ User
        = require('../models')
    const ApiError = require('../utils/ApiError')
        #
            # *
            # * Create a user
            # * @param {Object} userBody
            # * @returns {Promise<User>}
            # 
    const createUser
        async=> 
            param userBody
            if 
                test
                    await 
                        _ User.isEmailTaken(userBody.email)
                throw new ApiError(httpStatus.BAD_REQUEST, 'Email already taken')
            return User.create(userBody)
        #
            # *
            # * Create a user
            # * @param {Object} userBody
            # * @returns {Promise<User>}
            # 
        #
            # *
            # * Query for users
            # * @param {Object} filter - Mongo filter
            # * @param {Object} options - Query options
            # * @param {string} [options.sortBy] - Sort option in the format: sortField:(desc|asc)
            # * @param {number} [options.limit] - Maximum number of results per page (default = 10)
            # * @param {number} [options.page] - Current page (default = 1)
            # * @returns {Promise<QueryResult>}
            # 
    const queryUsers
        async=> 
            param filter
            param options
            const users
                await 
                    _ User.paginate(filter, options)
            return users
        #
            # *
            # * Query for users
            # * @param {Object} filter - Mongo filter
            # * @param {Object} options - Query options
            # * @param {string} [options.sortBy] - Sort option in the format: sortField:(desc|asc)
            # * @param {number} [options.limit] - Maximum number of results per page (default = 10)
            # * @param {number} [options.page] - Current page (default = 1)
            # * @returns {Promise<QueryResult>}
            # 
        #
            # *
            # * Get user by id
            # * @param {ObjectId} id
            # * @returns {Promise<User>}
            # 
    const getUserById
        async=> 
            param id
            return User.findById(id)
        #
            # *
            # * Get user by id
            # * @param {ObjectId} id
            # * @returns {Promise<User>}
            # 
        #
            # *
            # * Get user by email
            # * @param {string} email
            # * @returns {Promise<User>}
            # 
    const getUserByEmail
        async=> 
            param email
            return 
                _ User.findOne
                    { 
                        @ email
        #
            # *
            # * Get user by email
            # * @param {string} email
            # * @returns {Promise<User>}
            # 
        #
            # *
            # * Update user by id
            # * @param {ObjectId} userId
            # * @param {Object} updateBody
            # * @returns {Promise<User>}
            # 
    const updateUserById
        async=> 
            param userId
            param updateBody
            const user
                await 
                    _ getUserById(userId)
            if !user
                throw new ApiError(httpStatus.NOT_FOUND, 'User not found')
            if 
                test
                    && 
                        + updateBody.email
                        await 
                            _ User.isEmailTaken(updateBody.email, userId)
                throw new ApiError(httpStatus.BAD_REQUEST, 'Email already taken')
            _ Object.assign(user, updateBody)
            await 
                _ user.save()
            return user
        #
            # *
            # * Update user by id
            # * @param {ObjectId} userId
            # * @param {Object} updateBody
            # * @returns {Promise<User>}
            # 
        #
            # *
            # * Delete user by id
            # * @param {ObjectId} userId
            # * @returns {Promise<User>}
            # 
    const deleteUserById
        async=> 
            param userId
            const user
                await 
                    _ getUserById(userId)
            if !user
                throw new ApiError(httpStatus.NOT_FOUND, 'User not found')
            await 
                _ user.remove()
            return user
        #
            # *
            # * Delete user by id
            # * @param {ObjectId} userId
            # * @returns {Promise<User>}
            # 
    set module.exports =
        { 
            @ createUser
            @ queryUsers
            @ getUserById
            @ getUserByEmail
            @ updateUserById
            @ deleteUserById
