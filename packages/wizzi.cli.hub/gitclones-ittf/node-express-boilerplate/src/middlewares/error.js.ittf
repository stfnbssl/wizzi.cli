module
    kind react
    const mongoose = require('mongoose')
    const httpStatus = require('http-status')
    const config = require('../config/config')
    const logger = require('../config/logger')
    const ApiError = require('../utils/ApiError')
    const errorConverter
        => 
            param err
            param req
            param res
            param next
            let error = err
            if !(error instanceof ApiError)
                const statusCode
                    iif error.statusCode || error instanceof mongoose.Error
                        then httpStatus.BAD_REQUEST
                        else httpStatus.INTERNAL_SERVER_ERROR
                const message = error.message || httpStatus[statusCode]
                set error = new ApiError(statusCode, message, false, err.stack)
            _ next(error)
        # eslint-disable-next-line no-unused-vars
    const errorHandler
        => 
            param err
            param req
            param res
            param next
            let 
                { 
                    @ statusCode
                    @ message
                = err
            if config.env === 'production' && !err.isOperational
                set statusCode = httpStatus.INTERNAL_SERVER_ERROR
                set message = httpStatus[httpStatus.INTERNAL_SERVER_ERROR]
            set res.locals.errorMessage = err.message
            const response
                { 
                    @ code statusCode
                    @ message
                    ... 
                        (
                            && 
                                + config.env === 'development'
                                { 
                                    @ stack err.stack
            if config.env === 'development'
                _ logger.error(err)
            _ res.status(statusCode).send(response)
        # eslint-disable-next-line no-unused-vars
    set module.exports =
        { 
            @ errorConverter
            @ errorHandler
