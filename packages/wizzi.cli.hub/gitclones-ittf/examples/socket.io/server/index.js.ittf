module
    kind react
    const fs = require("fs")
    const 
        { 
            @ createServer
        = require("http")
    const path = require("path")
    const 
        { 
            @ createRequestHandler
        = require("@remix-run/express")
    const compression = require("compression")
    const express = require("express")
    const morgan = require("morgan")
    const 
        { 
            @ Server
        = require("socket.io")
    const MODE = process.env.NODE_ENV
    const BUILD_DIR = path.join(process.cwd(), "server/build")
    if !fs.existsSync(BUILD_DIR)
        _ console.warn("Build directory doesn't exist, please run `npm run dev` or `npm run build` before starting the server.")
    const app = express()
        # You need to create the HTTP server from the Express app
    const httpServer = createServer(app)
        # You need to create the HTTP server from the Express app
        # And then attach the socket.io server to the HTTP server
    const io = new Server(httpServer)
        # And then attach the socket.io server to the HTTP server
        # Then you can use `io` to listen the `connection` event and get a socket
        # from a client
    _ io.on
        @ "connection"
        => 
            param socket
            _ console.log(socket.id, "connected")
                # from this point you are on the WS connection with a specific client
            _ socket.emit("confirmation", "connected!")
            _ socket.on
                @ "event"
                => 
                    param data
                    _ console.log(socket.id, data)
                    _ socket.emit("event", "pong")
        # Then you can use `io` to listen the `connection` event and get a socket
        # from a client
    _ app.use(compression())
        # You may want to be more aggressive with this caching
    _ app.use
        _ express.static
            @ "public"
            { 
                @ maxAge "1h"
        # You may want to be more aggressive with this caching
        # Remix fingerprints its assets so we can cache forever
    _ app.use
        _ express.static
            @ "public/build"
            { 
                @ immutable true
                @ maxAge "1y"
        # Remix fingerprints its assets so we can cache forever
    _ app.use(morgan("tiny"))
    _ app.all
        @ "*"
        iif MODE === "production"
            then
                _ createRequestHandler
                    { 
                        @ build require("./build")
            else
                => 
                    param req
                    param res
                    param next
                    _ purgeRequireCache()
                    const build = require("./build")
                    return 
                        _ createRequestHandler
                            { 
                                @ build
                                @ mode MODE
                            (
                                @ req
                                @ res
                                @ next
    const port = process.env.PORT || 3000
        # instead of running listen on the Express app, do it on the HTTP server
    _ httpServer.listen
        @ port
        => 
            _ console.log
                `lit 
                    + Express server listening on port&nbsp;
                    @ port
                    + 
        # instead of running listen on the Express app, do it on the HTTP server
        # //////////////////////////////////////////////////////////////////////////////
    function purgeRequireCache
        for 
            left
                const key
            in require.cache
            if key.startsWith(BUILD_DIR)
                delete require.cache[key]
            # purge require cache on requests for "server side HMR" this won't let
            # you have in-memory objects between requests in development,
            # alternatively you can set up nodemon/pm2-dev to restart the server on
            # file changes, we prefer the DX of this though, so we've included it
            # for you by default
        # //////////////////////////////////////////////////////////////////////////////
