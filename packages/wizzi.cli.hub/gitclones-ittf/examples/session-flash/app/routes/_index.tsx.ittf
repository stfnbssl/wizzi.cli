module
    :import-type 
        @ ActionArgs
        @ LoaderArgs
        from "@remix-run/node"
    import 
        @ json
        @ redirect
        from "@remix-run/node"
    import 
        @ useLoaderData
        @ Form
        @ useActionData
        from "@remix-run/react"
    import 
        @ useEffect
        @ useRef
        from "react"
    :import-type 
        @ FlashMessage
            as FlashMessageType
        from "~/utils/session.server"
    import 
        @ getSession
        @ getSessionFlash
        @ storage
        from "~/utils/session.server"
    export 
        const loader
            async=> 
                { 
                    @ request
                    :ref LoaderArgs
                const flash
                    await 
                        _ getSessionFlash(request)
                if flash && flash.message
                    return 
                        _ json
                            { 
                                @ message flash.message
                            { 
                                @ headers flash.headers
                return 
                    _ json
                        { 
                            @ message null
    export 
        const action
            async=> 
                { 
                    @ request
                    :ref ActionArgs
                const form
                    await 
                        _ request.formData()
                const text = form.get("messageText")
                const color = form.get("messageColor")
                if !text || !color
                    return 
                        _ json
                            { 
                                @ formError
                                    `lit 
                                        + Invalid form submission
                            { 
                                @ status 400
                const session
                    await 
                        _ getSession(request)
                _ session.flash("messageText", text)
                _ session.flash("messageColor", color)
                return 
                    _ redirect
                        @ "."
                        { 
                            { headers
                                @ "Set-Cookie"
                                    await 
                                        _ storage.commitSession(session)
                            @ status 200
    export-default 
        function Index
            const loaderData
                _ useLoaderData
                    :param 
                        :typeof loader
            const actionData
                _ useActionData
                    :param 
                        :typeof action
            return 
                < React.Fragment
                    { 
                        iif loaderData?.message
                            then
                                < FlashMessage 
                                    @ message {loaderData.message}
                            else null
                    < Form 
                        @ method "post"
                        label 
                            @ htmlFor "messageText"
                            + Enter your message:
                        input 
                            @ id "messageText"
                            @ name "messageText"
                            @ type "text"
                            @ defaultValue "This is a flash message âš¡"
                            @ required
                        br 
                        fieldset 
                            @ style
                                { 
                                    @ width "fit-content"
                            legend 
                                + Pick a color
                            input 
                                @ id "info"
                                @ name "messageColor"
                                @ type "radio"
                                @ value "#11bddf"
                                @ defaultChecked
                            label 
                                @ htmlFor "info"
                                + info
                            input 
                                @ id "success"
                                @ name "messageColor"
                                @ type "radio"
                                @ value "#1bcd18"
                            label 
                                @ htmlFor "success"
                                + success
                            input 
                                @ id "error"
                                @ name "messageColor"
                                @ type "radio"
                                @ value "#e81717"
                            label 
                                @ htmlFor "error"
                                + error
                        br 
                        button 
                            @ type "submit"
                            + Set Flash Message
                        { 
                            iif actionData?.formError
                                then
                                    pre 
                                        @ style
                                            { 
                                                @ color "red"
                                        + {actionData.formError}
                                else null
    function FlashMessage
        { 
            @ message
            :{ 
                :p message
                    :ref FlashMessageType
        const dialogRef
            _ useRef
                :param 
                    :ref HTMLDialogElement
                @ null
        _ useEffect
            => 
                if message && !dialogRef.current?.open
                    _ dialogRef.current?.show?.()
            [ 
                @ message
        return 
            iif message
                then
                    dialog 
                        @ ref {dialogRef}
                        @ id "dialog"
                        @ style
                            { 
                                @ borderColor message.color
                        p 
                            + {message.text}
                        { 
                            # 
                                # https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method
                        form 
                            @ method "dialog"
                            button 
                                + Close
                else null
        #
            # 
            # Source: TypeScript-DOM-lib-generator
            # https://github.com/microsoft/TypeScript-DOM-lib-generator/blob/31e9b893980c91991f45a565dfbd6280798e2b4f/baselines/dom.generated.d.ts#L6234
            # 
    :interface HTMLDialogElement
        :extends HTMLElement
        :p open
            :boolean 
        :p returnValue
            :string 
            #
                # *
                # * Closes the dialog element.
                # *
                # * The argument, if provided, provides a return value.
                # 
        :m close
            :void 
            param returnValue
                :string 
                :optional 
            #
                # *
                # * Closes the dialog element.
                # *
                # * The argument, if provided, provides a return value.
                # 
            #
                # * Displays the dialog element.
        :m show
            :void 
            #
                # * Displays the dialog element.
        :m showModal
            :void 
        :m addEventListener
            :< K
                :keyof 
                    :ref HTMLElementEventMap
            :void 
            param type
                :ref K
            param listener
                :=> 
                    :any 
                    param this
                        :ref HTMLDialogElement
                    param ev
                        :[] 
                            :ref HTMLElementEventMap
                            :ref K
            param options
                :union 
                    :boolean 
                    :ref AddEventListenerOptions
                :optional 
        :m addEventListener
            :void 
            param type
                :string 
            param listener
                :ref EventListenerOrEventListenerObject
            param options
                :union 
                    :boolean 
                    :ref AddEventListenerOptions
                :optional 
        :m removeEventListener
            :< K
                :keyof 
                    :ref HTMLElementEventMap
            :void 
            param type
                :ref K
            param listener
                :=> 
                    :any 
                    param this
                        :ref HTMLDialogElement
                    param ev
                        :[] 
                            :ref HTMLElementEventMap
                            :ref K
            param options
                :union 
                    :boolean 
                    :ref EventListenerOptions
                :optional 
        :m removeEventListener
            :void 
            param type
                :string 
            param listener
                :ref EventListenerOrEventListenerObject
            param options
                :union 
                    :boolean 
                    :ref EventListenerOptions
                :optional 
        #
            # 
            # Source: TypeScript-DOM-lib-generator
            # https://github.com/microsoft/TypeScript-DOM-lib-generator/blob/31e9b893980c91991f45a565dfbd6280798e2b4f/baselines/dom.generated.d.ts#L6234
            # 
