module
    :import-type 
        @ ActionArgs
        @ LoaderArgs
        from "@remix-run/node"
    import 
        @ json
        @ redirect
        from "@remix-run/node"
    import 
        @ Form
        @ isRouteErrorResponse
        @ Link
        @ useActionData
        @ useNavigation
        @ useRouteError
        from "@remix-run/react"
    import 
        @ JokeDisplay
        from "~/components/joke"
    import 
        @ db
        from "~/utils/db.server"
    import 
        @ badRequest
        from "~/utils/request.server"
    import 
        @ getUserId
        @ requireUserId
        from "~/utils/session.server"
    export 
        const loader
            async=> 
                { 
                    @ request
                    :ref LoaderArgs
                const userId
                    await 
                        _ getUserId(request)
                if !userId
                    throw 
                        new Response
                            @ "Unauthorized"
                            { 
                                @ status 401
                return 
                    _ json
                        { 
    function validateJokeContent
        param content
            :string 
        if content.length < 10
            return "That joke is too short"
    function validateJokeName
        param name
            :string 
        if name.length < 3
            return "That joke's name is too short"
    export 
        const action
            async=> 
                { 
                    @ request
                    :ref ActionArgs
                const userId
                    await 
                        _ requireUserId(request)
                const form
                    await 
                        _ request.formData()
                const content = form.get("content")
                const name = form.get("name")
                if typeof content !== "string" || typeof name !== "string"
                    return 
                        _ badRequest
                            { 
                                @ fieldErrors null
                                @ fields null
                                @ formError "Form not submitted correctly."
                const fieldErrors
                    { 
                        @ content validateJokeContent(content)
                        @ name validateJokeName(name)
                const fields
                    { 
                        @ content
                        @ name
                if Object.values(fieldErrors).some(Boolean)
                    return 
                        _ badRequest
                            { 
                                @ fieldErrors
                                @ fields
                                @ formError null
                const joke
                    await 
                        _ db.joke.create
                            { 
                                { data
                                    @ ...fields
                                    @ jokesterId userId
                return 
                    _ redirect
                        `lit 
                            + /jokes/
                            @ joke.id
                            + 
    export-default 
        function NewJokeRoute
            const actionData
                _ useActionData
                    :param 
                        :typeof action
            const navigation = useNavigation()
            if navigation.formData
                const content = navigation.formData.get("content")
                const name = navigation.formData.get("name")
                if typeof content === "string" && typeof name === "string" && !validateJokeContent(content) && !validateJokeName(name)
                    return 
                        < JokeDisplay 
                            @ canDelete {false}
                            @ isOwner {true}
                            @ joke
                                { 
                                    @ name
                                    @ content
            return 
                div 
                    p 
                        + Add your own hilarious joke
                    < Form 
                        @ method "post"
                        div 
                            label 
                                + Name:
                                + {" "}
                                input 
                                    @ defaultValue {actionData?.fields?.name}
                                    @ name "name"
                                    @ type "text"
                                    @ aria-invalid {Boolean(actionData?.fieldErrors?.name)}
                                    @ aria-errormessage
                                        iif actionData?.fieldErrors?.name
                                            then "name-error"
                                            else undefined
                            { 
                                iif actionData?.fieldErrors?.name
                                    then
                                        p 
                                            @ className "form-validation-error"
                                            @ id "name-error"
                                            @ role "alert"
                                            + {actionData.fieldErrors.name}
                                    else null
                        div 
                            label 
                                + Content:
                                + {" "}
                                textarea 
                                    @ defaultValue {actionData?.fields?.content}
                                    @ name "content"
                                    @ aria-invalid {Boolean(actionData?.fieldErrors?.content)}
                                    @ aria-errormessage
                                        iif actionData?.fieldErrors?.content
                                            then "content-error"
                                            else undefined
                            { 
                                iif actionData?.fieldErrors?.content
                                    then
                                        p 
                                            @ className "form-validation-error"
                                            @ id "content-error"
                                            @ role "alert"
                                            + {actionData.fieldErrors.content}
                                    else null
                        div 
                            { 
                                iif actionData?.formError
                                    then
                                        p 
                                            @ className "form-validation-error"
                                            @ role "alert"
                                            + {actionData.formError}
                                    else null
                            button 
                                @ type "submit"
                                @ className "button"
                                + Add
    export 
        function ErrorBoundary
            const error = useRouteError()
            _ console.error(error)
            if isRouteErrorResponse(error) && error.status === 401
                return 
                    div 
                        @ className "error-container"
                        p 
                            + You must be logged in to create a joke.
                        < Link 
                            @ to "/login"
                            + Login
            return 
                div 
                    @ className "error-container"
                    + Something unexpected went wrong. Sorry about that.
