module
    :import-type 
        @ ActionArgs
        @ LinksFunction
        @ V2_MetaFunction
        from "@remix-run/node"
    import 
        @ Form
        @ Link
        @ useActionData
        @ useSearchParams
        from "@remix-run/react"
    import stylesUrl from "~/styles/login.css"
    import 
        @ db
        from "~/utils/db.server"
    import 
        @ badRequest
        from "~/utils/request.server"
    import 
        @ createUserSession
        @ login
        @ register
        from "~/utils/session.server"
    export 
        const links
            :ref LinksFunction
            =
                => 
                    [ 
                        { 
                            @ rel "stylesheet"
                            @ href stylesUrl
    export 
        const meta
            :ref V2_MetaFunction
            =
                => 
                    const description = "Login to submit your own jokes to Remix Jokes!"
                    return 
                        [ 
                            { 
                                @ name "description"
                                @ content description
                            { 
                                @ name "twitter:description"
                                @ content description
                            { 
                                @ title "Remix Jokes | Login"
    function validateUsername
        param username
            :string 
        if username.length < 3
            return "Usernames must be at least 3 characters long"
    function validatePassword
        param password
            :string 
        if password.length < 6
            return "Passwords must be at least 6 characters long"
    function validateUrl
        param url
            :string 
        const urls
            [ 
                @ "/jokes"
                @ "/"
                @ "https://remix.run"
        if urls.includes(url)
            return url
        return "/jokes"
    export 
        const action
            async=> 
                { 
                    @ request
                    :ref ActionArgs
                const form
                    await 
                        _ request.formData()
                const loginType = form.get("loginType")
                const password = form.get("password")
                const username = form.get("username")
                const redirectTo
                    _ validateUrl
                        || 
                            ( 
                                _ form.get("redirectTo")
                                    :as 
                                        :string 
                            + "/jokes"
                if typeof loginType !== "string" || typeof password !== "string" || typeof username !== "string"
                    return 
                        _ badRequest
                            { 
                                @ fieldErrors null
                                @ fields null
                                @ formError "Form not submitted correctly."
                const fields
                    { 
                        @ loginType
                        @ password
                        @ username
                const fieldErrors
                    { 
                        @ password validatePassword(password)
                        @ username validateUsername(username)
                if Object.values(fieldErrors).some(Boolean)
                    return 
                        _ badRequest
                            { 
                                @ fieldErrors
                                @ fields
                                @ formError null
                switch loginType
                    case "login"
                        const user
                            await 
                                _ login
                                    { 
                                        @ username
                                        @ password
                        _ console.log
                            { 
                                @ user
                        if !user
                            return 
                                _ badRequest
                                    { 
                                        @ fieldErrors null
                                        @ fields
                                        @ formError "Username/Password combination is incorrect"
                        return createUserSession(user.id, redirectTo)
                    case "register"
                        const userExists
                            await 
                                _ db.user.findFirst
                                    { 
                                        { where
                                            @ username
                        if userExists
                            return 
                                _ badRequest
                                    { 
                                        @ fieldErrors null
                                        @ fields
                                        @ formError
                                            `lit 
                                                + User with username&nbsp;
                                                @ username
                                                + &nbsp;already exists
                        const user
                            await 
                                _ register
                                    { 
                                        @ username
                                        @ password
                        if !user
                            return 
                                _ badRequest
                                    { 
                                        @ fieldErrors null
                                        @ fields
                                        @ formError "Something went wrong trying to create a new user."
                        return createUserSession(user.id, redirectTo)
                    default 
                        return 
                            _ badRequest
                                { 
                                    @ fieldErrors null
                                    @ fields
                                    @ formError "Login type invalid"
    export-default 
        function Login
            const actionData
                _ useActionData
                    :param 
                        :typeof action
            const [searchParams] = useSearchParams()
            return 
                div 
                    @ className "container"
                    div 
                        @ className "content"
                        @ data-light ""
                        h1 
                            + Login
                        < Form 
                            @ method "post"
                            input 
                                @ type "hidden"
                                @ name "redirectTo"
                                @ value {searchParams.get("redirectTo") ?? undefined}
                            fieldset 
                                legend 
                                    @ className "sr-only"
                                    + Login or Register?
                                label 
                                    input 
                                        @ type "radio"
                                        @ name "loginType"
                                        @ value "login"
                                        @ defaultChecked {!actionData?.fields?.loginType || actionData?.fields?.loginType === "login"}
                                    + {" "}
                                    + Login
                                label 
                                    input 
                                        @ type "radio"
                                        @ name "loginType"
                                        @ value "register"
                                        @ defaultChecked {actionData?.fields?.loginType === "register"}
                                    + {" "}
                                    + Register
                            div 
                                label 
                                    @ htmlFor "username-input"
                                    + Username
                                input 
                                    @ type "text"
                                    @ id "username-input"
                                    @ name "username"
                                    @ defaultValue {actionData?.fields?.username}
                                    @ aria-invalid {Boolean(actionData?.fieldErrors?.username)}
                                    @ aria-errormessage
                                        iif actionData?.fieldErrors?.username
                                            then "username-error"
                                            else undefined
                                { 
                                    iif actionData?.fieldErrors?.username
                                        then
                                            p 
                                                @ className "form-validation-error"
                                                @ role "alert"
                                                @ id "username-error"
                                                + {actionData.fieldErrors.username}
                                        else null
                            div 
                                label 
                                    @ htmlFor "password-input"
                                    + Password
                                input 
                                    @ id "password-input"
                                    @ name "password"
                                    @ type "password"
                                    @ defaultValue {actionData?.fields?.password}
                                    @ aria-invalid {Boolean(actionData?.fieldErrors?.password)}
                                    @ aria-errormessage
                                        iif actionData?.fieldErrors?.password
                                            then "password-error"
                                            else undefined
                                { 
                                    iif actionData?.fieldErrors?.password
                                        then
                                            p 
                                                @ className "form-validation-error"
                                                @ role "alert"
                                                @ id "password-error"
                                                + {actionData.fieldErrors.password}
                                        else null
                            div 
                                @ id "form-error-message"
                                { 
                                    iif actionData?.formError
                                        then
                                            p 
                                                @ className "form-validation-error"
                                                @ role "alert"
                                                + {actionData.formError}
                                        else null
                            button 
                                @ type "submit"
                                @ className "button"
                                + Submit
                    div 
                        @ className "links"
                        ul 
                            li 
                                < Link 
                                    @ to "/"
                                    + Home
                            li 
                                < Link 
                                    @ to "/jokes"
                                    + Jokes
