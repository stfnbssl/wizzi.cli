module
    import 
        @ defineProperties
        @ createSprinkles
        from "@vanilla-extract/sprinkles"
        #
            # *
            # * This file is configuration for Sprinkles, a library built on
            # * top of vanilla-extract for generating type-safe utility classes.
            # * The generated `sprinkles` function can be used at build time in
            # * `.css.ts` files, but importantly, it can also be used at runtime
            # * since it doesn't generate CSS on demand. Instead, it returns a
            # * string of class names that reference styles that have already
            # * been generated.
            # *
            # * More detail: https://vanilla-extract.style/documentation/packages/sprinkles
            # 
        # This space scale is a basic example for demo purposes.
        # We're free to use whatever naming convention we like,
        # or even none at all! e.g. `"4px": "4px"`, etc.
    const space
        { 
            @ none 0
            @ small "4px"
            @ medium "8px"
            @ large "16px"
                # etc.
        # This space scale is a basic example for demo purposes.
        # We're free to use whatever naming convention we like,
        # or even none at all! e.g. `"4px": "4px"`, etc.
        # Same as above, this color palette is just a basic example.
        # Values like these can also be hooked up to themes using CSS variables.
        # More detail: https://vanilla-extract.style/documentation/theming
    const colors
        { 
            @ lightBlue "#bfdbfe"
            @ darkGray "#1f2937"
                # etc.
        # Same as above, this color palette is just a basic example.
        # Values like these can also be hooked up to themes using CSS variables.
        # More detail: https://vanilla-extract.style/documentation/theming
    const responsiveProperties
        _ defineProperties
            { 
                { conditions
                    { mobile
                        # This is a basic example of responsive conditions, but these conditions
                        # can be named and customized however we like. We can even scope our
                        # conditions to selectors and feature/container queries!
                        # More detail: https://vanilla-extract.style/documentation/packages/sprinkles/#conditions
                    { tablet
                        @ "@media" "screen and (min-width: 768px)"
                    { desktop
                        @ "@media" "screen and (min-width: 1024px)"
                @ defaultCondition "mobile"
                    # The default condition is applied when non-conditional values are used,
                    # e.g. `sprinkles({ padding: 'small' })` is equivalent to writing
                    # `sprinkles({ padding: { mobile: 'small' }}) since it's mobile-first.
                { properties
                    [ display
                        @ "none"
                        @ "flex"
                        @ "block"
                        @ "inline"
                        # By defining these values in an array format, we're
                        # configuring them to simply map through to the usual
                        # CSS values rather than using a custom naming convention,
                        # e.g. `sprinkles({ display: 'flex' })`
                    [ flexDirection
                        @ "row"
                        @ "column"
                    [ justifyContent
                        @ "stretch"
                        @ "flex-start"
                        @ "center"
                        @ "flex-end"
                        @ "space-around"
                        @ "space-between"
                    [ alignItems
                        @ "stretch"
                        @ "flex-start"
                        @ "center"
                        @ "flex-end"
                    @ gap space
                        # Here we're applying our space scale to `gap` and `padding`
                        # properties via our `space` object. This allows us to
                        # provide our own semantic naming convention,
                        # e.g. `sprinkles({ paddingTop: 'small' })`
                    @ paddingTop space
                    @ paddingBottom space
                    @ paddingLeft space
                    @ paddingRight space
                        # etc.
                    # Sprinkles generates a separate class for each property
                    # value at each condition, allowing us to dynamically
                    # select them in a type-safe way at runtime.
                { shorthands
                    [ padding
                        @ "paddingTop"
                        @ "paddingBottom"
                        @ "paddingLeft"
                        @ "paddingRight"
                        # Shorthands allow us to use a single property to apply multiple
                        # utility classes at once, e.g. `sprinkles({ padding: 'small' })` maps
                        # to `sprinkles({ paddingTop: 'small', paddingBottom: 'small', ...etc })`
                    [ paddingX
                        @ "paddingLeft"
                        @ "paddingRight"
                    [ paddingY
                        @ "paddingTop"
                        @ "paddingBottom"
                    [ placeItems
                        @ "justifyContent"
                        @ "alignItems"
        # These properties are defined separately from `responsiveProperties`
        # because they're being configured with different conditions.
    const colorProperties
        _ defineProperties
            { 
                { conditions
                    { lightMode
                    { darkMode
                        @ "@media" "(prefers-color-scheme: dark)"
                @ defaultCondition "lightMode"
                { properties
                    @ color colors
                    @ background colors
        # These properties are defined separately from `responsiveProperties`
        # because they're being configured with different conditions.
        # Here we combine all of our properties into a single `sprinkles` function
    export 
        const sprinkles = createSprinkles(responsiveProperties, colorProperties)
        # Here we combine all of our properties into a single `sprinkles` function
        # It's a good idea to export the Sprinkles type too
    export 
        :type Sprinkles
            :[] 
                :ref Parameters
                    :param 
                        :typeof sprinkles
                :literal 0
        # It's a good idea to export the Sprinkles type too
