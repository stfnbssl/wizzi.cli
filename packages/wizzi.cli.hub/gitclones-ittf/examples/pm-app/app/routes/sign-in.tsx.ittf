module
    :import-type 
        @ ActionArgs
        @ LinksFunction
        @ LoaderArgs
        @ MetaFunction
        from "@remix-run/node"
    import 
        @ json
        from "@remix-run/node"
    import 
        @ Form
        @ useActionData
        @ useSearchParams
        from "@remix-run/react"
    import 
        as React
        from "react"
    :import-type 
        @ User
        from "~/models"
    import 
        @ createUserSession
        @ login
        @ redirectUser
        from "~/session.server"
    import routeStyles from "~/styles/routes/sign-in.css"
    import 
        @ Button
        from "~/ui/button"
    import 
        @ Field
        @ FieldError
        @ FieldProvider
        @ Label
        from "~/ui/form"
    import 
        @ Link
        from "~/ui/link"
    import 
        @ Heading
        from "~/ui/section-heading"
    import 
        @ ShadowBox
        from "~/ui/shadow-box"
    import 
        @ useFocusOnFormError
        from "~/utils/react"
    import 
        @ validateEmail
        @ validatePassword
        from "~/utils/validation"
    export 
        const meta
            :ref MetaFunction
            =
                => 
                    (
                        { 
                            @ title "Sign In | PM Camp"
    export 
        const links
            :ref LinksFunction
            =
                => 
                    [ 
                        { 
                            @ href routeStyles
                            @ rel "stylesheet"
    export 
        const action
            async=> 
                { 
                    @ request
                    :ref ActionArgs
                const formData
                    await 
                        _ request.formData()
                    # 1. Get/setup form data from the request
                const email = formData.get("email")
                const password = formData.get("password")
                const redirectTo = formData.get("redirectTo")
                const fieldErrors
                    :ref FieldErrors
                    =
                        { 
                            @ email null
                            @ password null
                    # 2. Validate the form data
                if typeof email !== "string" || typeof password !== "string" || (redirectTo && typeof redirectTo !== "string")
                    return 
                        _ json
                            { 
                                @ formError
                                    `lit 
                                        + Something went wrong. Please try again later.
                                @ fieldErrors
                            @ 400
                const fields
                    { 
                        @ email
                        @ password
                if !email
                    set fieldErrors.email = "Email is required"
                else
                    try 
                        _ validateEmail(email)
                    catch error
                        if error instanceof Error
                            set fieldErrors.email = error.message
                        else
                            if typeof error === "string"
                                set fieldErrors.email = error
                            else
                                set fieldErrors.email = "There was an error with this field"
                if !password
                    set fieldErrors.password = "Password is required"
                else
                    try 
                        _ validatePassword(password)
                    catch error
                        if error instanceof Error
                            set fieldErrors.password = error.message
                        else
                            if typeof error === "string"
                                set fieldErrors.password = error
                            else
                                set fieldErrors.password = "There was an error with this field"
                if Object.values(fieldErrors).some(Boolean)
                    return 
                        _ json
                            { 
                                @ fieldErrors
                                @ fields
                            @ 400
                let user
                    :union 
                        :ref User
                        :null 
                    # 3. Attempt login
                try 
                    set user =
                        await 
                            _ login(email, password)
                catch error
                    let formError
                        :string 
                    if error instanceof Error
                        set formError = error.message
                    else
                        if typeof error === "string"
                            set formError = error
                        else
                            set formError = "There was an error logging in. Please try again later."
                    return 
                        _ json
                            { 
                                @ fields
                                @ formError
                            @ 401
                return 
                    await 
                        _ createUserSession
                            @expr user.id
                            { 
                                @ redirect redirectTo || "/dashboard"
                                    # 5. Redirect to the user's dashboard (or whatever URL is set by the
                                    # `redirectTo` field)
                    # 4. Create a user session with the user's ID
    export 
        const loader
            async=> 
                { 
                    @ request
                    :ref LoaderArgs
                await 
                    _ redirectUser
                        @ request
                        { 
                            @ redirect "/dashboard"
                return 
                    _ json
                        { 
    export-default 
        function SignIn
            const 
                { 
                    @ fieldErrors
                    @ fields
                    @ formError
                =
                    _ useActionData
                        :param 
                            :typeof action
            const [searchParams] = useSearchParams()
            const formRef
                _ React.useRef
                    :param 
                        :ref HTMLFormElement
                    @ null
            _ useFocusOnFormError
                { 
                    @ formError
                    @ fieldErrors
                    @ formRef
            return 
                div 
                    @ className "signin__container"
                    < ShadowBox 
                        @ className "signin__box"
                        { 
                            iif formError
                                then
                                    div 
                                        @ className "signin__form-error"
                                        span 
                                            @ className "signin__form-error-text"
                                            @ id "form-error-text"
                                            @ role "alert"
                                            + {formError}
                                else null
                        < Heading 
                            @ level {3}
                            @ className "signin__heading"
                            + Sign In
                        < Form 
                            @ method "post"
                            @ id "signin-form"
                            @ aria-describedby
                                iif formError
                                    then "form-error-text"
                                    else undefined
                            @ ref {formRef}
                            input 
                                @ type "hidden"
                                @ name "redirectTo"
                                @ value {searchParams.get("redirectTo") ?? undefined}
                            div 
                                @ className "signin__email-form"
                                < FieldProvider 
                                    @ name "email"
                                    @ id "signin-email"
                                    @ required
                                    @ error {fieldErrors?.email}
                                    < Label 
                                        + Email
                                    < Field 
                                        @ type "email"
                                        @ placeholder "hello@remix.run"
                                        @ defaultValue {fields?.email}
                                    < FieldError 
                                < FieldProvider 
                                    @ name "password"
                                    @ id "signin-password"
                                    @ required
                                    @ error {fieldErrors?.password}
                                    < Label 
                                        + Password
                                    < Field 
                                        @ type "password"
                                        @ defaultValue {fields?.password}
                                    < FieldError 
                                < Button 
                                    @ className "signin__email-form-submit"
                                    + Sign In
                    p 
                        @ className "signin__outer-text"
                        + New user?
                        < Link 
                            @ to "/register"
                            + Register here.
    :type FieldErrors
        :ref Record
            :param 
                :ref TextFields
            :param 
                :union 
                    :string 
                    :null 
    :type TextFields
        :union 
            :literal "email"
            :literal "password"
