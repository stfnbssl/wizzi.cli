module
    import cx from "clsx"
    import 
        as React
        from "react"
    :import-type 
        @ Spread
        from "~/utils/types"
    const FieldContext
        _ React.createContext
            :param 
                :union 
                    :ref FieldContextValue
                    :null 
            @ null
    export 
        function useFieldContext
            return React.useContext(FieldContext)
    const FieldProvider
        _ React.forwardRef
            :param 
                :ref HTMLDivElement
            :param 
                :ref React.PropsWithChildren
                    :param 
                        :intersect 
                            :ref FieldContextValue
                            :{ 
                                :p className
                                    :optional 
                                    :string 
            => 
                { 
                    @ children
                    @ className
                    ... ctx
                param ref
                return 
                    div 
                        @ ref {ref}
                        @ className {cx(className, "ui--form-field-wrapper")}
                        < FieldContext.Provider 
                            @ value {ctx}
                            + {children}
    set FieldProvider.displayName = "FieldProvider"
    :type ResolvedFieldProps
        :union 
            :ref FieldProps
            :ref SelectProps
            :ref TextareaProps
    export 
        function getResolvedFieldProps
            :< T
                :ref ResolvedFieldProps
            param context
                :union 
                    :ref FieldContextValue
                    :null 
            param props
                :ref T
            :return
                :union 
                    :ref T
                    :ref Spread
                        :param 
                            :tuple 
                                :ref Omit
                                    :param 
                                        :ref FieldContextValue
                                    :param 
                                        :union 
                                            :literal "error"
                                            :literal "invalid"
                                :ref T
            if !context
                return props
            const 
                { 
                    @ error
                    ... rest
                = context
            const ariaProps
                :ref Record
                    :param literal
                    :param any
                =
                    { 
            if context && context.error && context.id
                const invalid = props["aria-invalid"] ?? context.invalid
                set ariaProps["aria-describedby"] =
                    iif props["aria-describedby"] != null
                        then
                            `lit 
                                + 
                                @ props["aria-describedby"]
                                + &nbsp;
                                @ context.id
                                + -error
                        else
                            `lit 
                                + 
                                @ context.id
                                + -error
                set ariaProps["aria-invalid"] =
                    iif invalid === "false"
                        then false
                        else invalid ?? true
            return 
                { 
                    @ ...rest
                    @ ...props
                    @ ...ariaProps
    export 
        const Field
            _ React.forwardRef
                :param 
                    :ref HTMLInputElement
                :param 
                    :ref FieldProps
                => 
                    param props
                    param ref
                    const context = useFieldContext()
                    const resolvedProps = getResolvedFieldProps(context, props)
                    return 
                        input 
                            @ type "text"
                            @ ref {ref}
                            @ {...resolvedProps}
                            @ className {cx(props.className, "ui--form-field")}
    set Field.displayName = "Field"
    export 
        const Select
            _ React.forwardRef
                :param 
                    :ref HTMLSelectElement
                :param 
                    :ref SelectProps
                => 
                    param props
                    param ref
                    const context = useFieldContext()
                    const resolvedProps = getResolvedFieldProps(context, props)
                    return 
                        select 
                            @ ref {ref}
                            @ {...resolvedProps}
                            @ className {cx(props.className, "ui--form-field", "ui--form-field--select")}
    set Select.displayName = "Select"
    export 
        const Textarea
            _ React.forwardRef
                :param 
                    :ref HTMLTextAreaElement
                :param 
                    :ref TextareaProps
                => 
                    param props
                    param ref
                    const context = useFieldContext()
                    const 
                        { 
                            @ resize
                                = "y"
                            ... resolvedProps
                        = getResolvedFieldProps(context, props)
                    return 
                        textarea 
                            @ ref {ref}
                            @ {...resolvedProps}
                            @ className
                                _ cx
                                    @expr props.className
                                    @ "ui--form-field"
                                    @ "ui--form-field--textarea"
                                    { 
                                        @ "resize-xy" resize === true
                                        @ "resize-x" resize === "x"
                                        @ "resize-y" resize === "y"
    set Textarea.displayName = "Textarea"
    export 
        const Label
            _ React.forwardRef
                :param 
                    :ref HTMLLabelElement
                :param 
                    :ref LabelProps
                => 
                    param props
                    param ref
                    const ctx = useFieldContext()
                    const 
                        { 
                            @ className
                            @ children
                            ... domProps
                        = props
                    return 
                        label 
                            @ htmlFor {ctx?.id || props.htmlFor}
                            @ ref {ref}
                            @ {...domProps}
                            @ className {cx(className, "ui--form-label")}
                            + {children}
                            { 
                                iif ctx?.required
                                    then
                                        span 
                                            @ className "sr-only"
                                            + (Required)
                                    else null
    set Label.displayName = "Label"
    export 
        const FieldError
            _ React.forwardRef
                :param 
                    :ref HTMLDivElement
                :param 
                    :ref FieldErrorProps
                => 
                    param props
                    param ref
                    const context = useFieldContext()
                    const 
                        { 
                            @ className
                            @ id
                            @ children
                            ... domProps
                        = props
                    const error
                        :ref React.ReactNode
                        = children || context?.error
                    const idToUse
                        iif context && context.id
                            then
                                `lit 
                                    + 
                                    @ context.id
                                    + -error
                            else id
                    if !error
                        return null
                    return 
                        div 
                            @ ref {ref}
                            @ className {cx(className, "ui--form-field-error")}
                            @ role "alert"
                            @ id {idToUse}
                            @ {...domProps}
                            + {error}
    set FieldError.displayName = "FieldError"
        # Not intended to be exhaustive!
    :type InputType
        :union 
            :literal "email"
            :literal "text"
            :literal "hidden"
            :literal "password"
            :literal "search"
            :literal "tel"
            :literal "url"
        # Not intended to be exhaustive!
    export 
        :interface FieldProps
            :extends Omit
                :param 
                    :ref React.ComponentPropsWithRef
                        :param 
                            :literal "input"
                :param 
                    :literal "type"
            :p type
                :optional 
                :ref InputType
    export 
        :interface FieldErrorProps
            :extends React.ComponentPropsWithRef
                :param 
                    :literal "div"
            :p alert
                :optional 
                :boolean 
    export 
        :interface SelectProps
            :extends React.ComponentPropsWithRef
                :param 
                    :literal "select"
    export 
        :interface TextareaProps
            :extends React.ComponentPropsWithRef
                :param 
                    :literal "textarea"
            :p resize
                :optional 
                :union 
                    :literal "x"
                    :literal "y"
                    :boolean 
    export 
        :interface LabelProps
            :extends React.ComponentPropsWithRef
                :param 
                    :literal "label"
    :interface FieldContextValue
        :p name
            :optional 
            :string 
        :p id
            :optional 
            :string 
        :p invalid
            :optional 
            :[] 
                :ref React.ComponentPropsWithoutRef
                    :param 
                        :literal "input"
                :literal "aria-invalid"
        :p disabled
            :optional 
            :boolean 
        :p required
            :optional 
            :boolean 
        :p error
            :optional 
            :union 
                :string 
                :null 
