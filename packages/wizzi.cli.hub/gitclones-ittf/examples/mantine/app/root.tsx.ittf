module
    :import-type 
        @ ColorScheme
        from "@mantine/core"
    import 
        @ Box
        @ ColorSchemeProvider
        @ createEmotionCache
        @ MantineProvider
        @ Title
        @ useEmotionCache
        from "@mantine/core"
    import 
        @ useIsomorphicEffect
        from "@mantine/hooks"
    import 
        @ StylesPlaceholder
        from "@mantine/remix"
    :import-type 
        @ MetaFunction
        from "@remix-run/node"
    import 
        @ Links
        @ LiveReload
        @ Meta
        @ Outlet
        @ Scripts
        @ ScrollRestoration
        @ useCatch
        from "@remix-run/react"
    import 
        @ useContext
        @ useRef
        @ useState
        from "react"
    import 
        @ ClientStyleContext
        from "./clientStyleContext"
    export 
        const meta
            :ref MetaFunction
            =
                => 
                    (
                        { 
                            @ charset "utf-8"
                            @ title "New Remix App"
                            @ viewport "width=device-width,initial-scale=1"
    _ createEmotionCache
        { 
            @ key "mantine"
    export 
        function CatchBoundary
            const caught = useCatch()
            return 
                < Document 
                    @ title
                        `lit 
                            + 
                            @ caught.status
                            + &nbsp;
                            @ caught.statusText
                            + 
                    < Box 
                        @ p "lg"
                        < Title 
                            @ color "red"
                            + [CatchBoundary]:
                            + {caught.status}
                            + {caught.statusText}
    export 
        function ErrorBoundary
            { 
                @ error
                :{ 
                    :p error
                        :ref Error
            return 
                < Document 
                    @ title "Error!"
                    < Box 
                        @ p "lg"
                        < Title 
                            @ color "red"
                            + [ErrorBoundary]: There was an error:
                            + {error.message}
    export-default 
        function App
            return 
                < Document 
                    < Outlet 
    function Document
        { 
            @ title
            @ children
            :{ 
                :p title
                    :optional 
                    :string 
                :p children
                    :ref React.ReactNode
        const clientStyleData = useContext(ClientStyleContext)
        const cache = useEmotionCache()
        const reinjectStylesRef = useRef(true)
            # Only executed on client
            # When a top level ErrorBoundary or CatchBoundary are rendered,
            # the document head gets removed, so we have to create the style tags
        _ useIsomorphicEffect
            => 
                if !reinjectStylesRef.current
                    return 
                set cache.sheet.container = document.head
                    # re-link sheet container
                    # re-inject tags
                const tags = cache.sheet.tags
                    # re-inject tags
                _ cache.sheet.flush()
                _ tags.forEach
                    => 
                        param tag
                        _ 
                            ( 
                                @expr cache.sheet
                                    :as 
                                        :any 
                            ._ _insertTag
                                @ tag
                    # reset cache to re-apply global styles
                _ clientStyleData?.reset?.()
                    # reset cache to re-apply global styles
                    # ensure we only do this once per mount
                set reinjectStylesRef.current = false
                    # ensure we only do this once per mount
            [ 
            # Only executed on client
            # When a top level ErrorBoundary or CatchBoundary are rendered,
            # the document head gets removed, so we have to create the style tags
        return 
            html 
                @ lang "en"
                head 
                    < StylesPlaceholder 
                    { 
                        iif title
                            then
                                < title 
                                    + {title}
                            else null
                    < Meta 
                    < Links 
                body 
                    < MantineTheme 
                        + {children}
                    < ScrollRestoration 
                    < Scripts 
                    < LiveReload 
    function MantineTheme
        { 
            @ children
            :{ 
                :p children
                    :ref React.ReactNode
        const [colorScheme, setColorScheme]
            _ useState
                :param 
                    :ref ColorScheme
                @ "light"
        const toggleColorScheme
            => 
                param value
                    :ref ColorScheme
                    :optional 
                _ setColorScheme
                    || 
                        + value
                        ( 
                            iif colorScheme === "dark"
                                then "light"
                                else "dark"
        return 
            < ColorSchemeProvider 
                @ colorScheme {colorScheme}
                @ toggleColorScheme {toggleColorScheme}
                < MantineProvider 
                    @ theme
                        { 
                            @ colorScheme
                    @ withNormalizeCSS
                    @ withGlobalStyles
                    + {children}
