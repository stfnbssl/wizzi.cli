module
    import 
        @ createCookieSessionStorage
        from "@remix-run/node"
    import 
        @ Authenticator
        @ AuthorizationError
        from "remix-auth"
    import 
        @ SupabaseStrategy
        from "remix-auth-supabase"
    import 
        @ supabaseAdmin
        from "~/supabase.server"
    :import-type 
        @ Session
        from "~/supabase.server"
    export 
        const sessionStorage
            _ createCookieSessionStorage
                { 
                    { cookie
                        @ name "sb"
                        @ httpOnly true
                        @ path "/"
                        @ sameSite "lax"
                        [ secrets
                            @ "s3cr3t"
                        @ secure process.env.NODE_ENV === "production"
                            # This should be an env variable
    export 
        const supabaseStrategy
            new SupabaseStrategy
                { 
                    @ supabaseClient supabaseAdmin
                    @ sessionStorage
                    @ sessionKey "sb:session"
                    @ sessionErrorKey "sb:error"
                async=> 
                    { 
                        @ req
                        @ supabaseClient
                    const form
                        await 
                            _ req.formData()
                    const email = form?.get?.("email")
                    const password = form?.get?.("password")
                    if !email
                        throw new AuthorizationError("Email is required")
                    if typeof email !== "string"
                        throw new AuthorizationError("Email must be a string")
                    if !password
                        throw new AuthorizationError("Password is required")
                    if typeof password !== "string"
                        throw new AuthorizationError("Password must be a string")
                    return 
                        _ supabaseClient.auth.api.signInWithEmail(email, password).then
                            => 
                                { 
                                    @ data
                                    @ error
                                :return
                                    :ref Session
                                if error || !data
                                    throw new AuthorizationError(error?.message ?? "No user session found")
                                return data
    export 
        const oAuthStrategy
            new SupabaseStrategy
                { 
                    @ supabaseClient supabaseAdmin
                    @ sessionStorage
                    @ sessionKey "sb:session"
                    @ sessionErrorKey "sb:error"
                async=> 
                    { 
                        @ req
                    const form
                        await 
                            _ req.formData()
                    const session = form?.get?.("session")
                    if typeof session !== "string"
                        throw new AuthorizationError("session not found")
                    return JSON.parse(session)
    export 
        const authenticator
            new Authenticator
                :param 
                    :ref Session
                @ sessionStorage
                { 
                    @ sessionKey supabaseStrategy.sessionKey
                    @ sessionErrorKey supabaseStrategy.sessionErrorKey
    _ authenticator.use(supabaseStrategy)
    _ authenticator.use(oAuthStrategy, "sb-oauth")
