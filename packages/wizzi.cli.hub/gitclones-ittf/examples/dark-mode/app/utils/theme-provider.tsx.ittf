module
    import 
        @ useFetcher
        from "@remix-run/react"
    :import-type 
        @ Dispatch
        @ ReactNode
        @ SetStateAction
        from "react"
    import 
        @ createContext
        @ createElement
        @ useContext
        @ useEffect
        @ useRef
        @ useState
        from "react"
    :enum Theme
        @ DARK "dark"
        @ LIGHT "light"
    const themes
        :ref Array
            :param 
                :ref Theme
        = Object.values(Theme)
    :type ThemeContextType
        :tuple 
            :union 
                :ref Theme
                :null 
            :ref Dispatch
                :param 
                    :ref SetStateAction
                        :param 
                            :union 
                                :ref Theme
                                :null 
    const ThemeContext
        _ createContext
            :param 
                :union 
                    :ref ThemeContextType
                    :undefined 
            @ undefined
    const prefersDarkMQ = "(prefers-color-scheme: dark)"
    const getPreferredTheme
        => 
            iif window.matchMedia(prefersDarkMQ).matches
                then Theme.DARK
                else Theme.LIGHT
    function ThemeProvider
        { 
            @ children
            @ specifiedTheme
            :{ 
                :p children
                    :ref ReactNode
                :p specifiedTheme
                    :union 
                        :ref Theme
                        :null 
        const [theme, setTheme]
            _ useState
                :param 
                    :union 
                        :ref Theme
                        :null 
                => 
                    if specifiedTheme
                        if themes.includes(specifiedTheme)
                            return specifiedTheme
                        else
                            return null
                    if typeof document === "undefined"
                        return null
                    return getPreferredTheme()
        const persistTheme = useFetcher()
            # TODO: remove this when persistTheme is memoized properly
        const persistThemeRef = useRef(persistTheme)
            # TODO: remove this when persistTheme is memoized properly
        _ useEffect
            => 
                set persistThemeRef.current = persistTheme
            [ 
                @ persistTheme
        const mountRun = useRef(false)
        _ useEffect
            => 
                if !mountRun.current
                    set mountRun.current = true
                    return 
                if !theme
                    return 
                _ persistThemeRef.current.submit
                    { 
                        @ theme
                    { 
                        @ action "action/set-theme"
                        @ method "post"
            [ 
                @ theme
        _ useEffect
            => 
                const mediaQuery = window.matchMedia(prefersDarkMQ)
                const handleChange
                    => 
                        _ setTheme
                            iif mediaQuery.matches
                                then Theme.DARK
                                else Theme.LIGHT
                _ mediaQuery.addEventListener("change", handleChange)
                return 
                    => 
                        _ mediaQuery.removeEventListener("change", handleChange)
            [ 
        return 
            < ThemeContext.Provider 
                @ value
                    [ 
                        @ theme
                        @ setTheme
                + {children}
    const clientThemeCode
        `lit 
            + &lf;
            + // hi there dear reader ðŸ‘‹&lf;
            + // this is how I make certain we avoid a flash of the wrong theme. If you select&lf;
            + // a theme, then I'll know what you want in the future and you'll not see this&lf;
            + // script anymore.&lf;
            + ;(() => {&lf;
            + &nbsp; const theme = window.matchMedia(
            _ JSON.stringify(prefersDarkMQ)
            + ).matches&lf;
            + &nbsp;   ? 'dark'&lf;
            + &nbsp;   : 'light';&lf;
            + &nbsp; const cl = document.documentElement.classList;&lf;
            + &nbsp; const themeAlreadyApplied = cl.contains('light') || cl.contains('dark');&lf;
            + &nbsp; if (themeAlreadyApplied) {&lf;
            + &nbsp;   // this script shouldn't exist if the theme is already applied!&lf;
            + &nbsp;   console.warn(&lf;
            + &nbsp;     "Hi there, could you let me know you're seeing this message? Thanks!",&lf;
            + &nbsp;   );&lf;
            + &nbsp; } else {&lf;
            + &nbsp;   cl.add(theme);&lf;
            + &nbsp; }&lf;
            + &nbsp; const meta = document.querySelector('meta[name=color-scheme]');&lf;
            + &nbsp; if (meta) {&lf;
            + &nbsp;   if (theme === 'dark') {&lf;
            + &nbsp;     meta.content = 'dark light';&lf;
            + &nbsp;   } else if (theme === 'light') {&lf;
            + &nbsp;     meta.content = 'light dark';&lf;
            + &nbsp;   }&lf;
            + &nbsp; } else {&lf;
            + &nbsp;   console.warn(&lf;
            + &nbsp;     "Hey, could you let me know you're seeing this message? Thanks!",&lf;
            + &nbsp;   );&lf;
            + &nbsp; }&lf;
            + })();&lf;
            + 
    const themeStylesCode
        `lit 
            + &lf;
            + &nbsp; /* default light, but app-preference is "dark" */&lf;
            + &nbsp; html.dark {&lf;
            + &nbsp;   light-mode {&lf;
            + &nbsp;     display: none;&lf;
            + &nbsp;   }&lf;
            + &nbsp; }&lf;
            + &lf;
            + &nbsp; /* default light, and no app-preference */&lf;
            + &nbsp; html:not(.dark) {&lf;
            + &nbsp;   dark-mode {&lf;
            + &nbsp;     display: none;&lf;
            + &nbsp;   }&lf;
            + &nbsp; }&lf;
            + &lf;
            + &nbsp; @media (prefers-color-scheme: dark) {&lf;
            + &nbsp;   /* prefers dark, but app-preference is "light" */&lf;
            + &nbsp;   html.light {&lf;
            + &nbsp;     dark-mode {&lf;
            + &nbsp;       display: none;&lf;
            + &nbsp;     }&lf;
            + &nbsp;   }&lf;
            + &lf;
            + &nbsp;   /* prefers dark, and app-preference is "dark" */&lf;
            + &nbsp;   html.dark,&lf;
            + &nbsp;   /* prefers dark and no app-preference */&lf;
            + &nbsp;   html:not(.light) {&lf;
            + &nbsp;     light-mode {&lf;
            + &nbsp;       display: none;&lf;
            + &nbsp;     }&lf;
            + &nbsp;   }&lf;
            + &nbsp; }&lf;
            + 
    function ThemeHead
        { 
            @ ssrTheme
            :{ 
                :p ssrTheme
                    :boolean 
        const [theme] = useTheme()
        return 
            < React.Fragment
                { 
                    # 
                        # 
                        # On the server, "theme" might be `null`, so clientThemeCode ensures that
                        # this is correct before hydration.
                        # 
                meta 
                    @ name "color-scheme"
                    @ content
                        iif theme === "light"
                            then "light dark"
                            else "dark light"
                { 
                    # 
                        # 
                        # If we know what the theme is from the server then we don't need
                        # to do fancy tricks prior to hydration to make things match.
                        # 
                { 
                    iif ssrTheme
                        then null
                        else
                            < React.Fragment
                                script 
                                    @ dangerouslySetInnerHTML
                                        { 
                                            @ __html clientThemeCode
                                        # NOTE: we cannot use type="module" because that automatically makes
                                        # the script "defer". That doesn't work for us because we need
                                        # this script to run synchronously before the rest of the document
                                        # is finished loading.
                                < style 
                                    @ dangerouslySetInnerHTML
                                        { 
                                            @ __html themeStylesCode
    const clientDarkAndLightModeElsCode
        `lit 
            + ;(() => {&lf;
            + &nbsp; const theme = window.matchMedia(
            _ JSON.stringify(prefersDarkMQ)
            + ).matches&lf;
            + &nbsp;   ? 'dark'&lf;
            + &nbsp;   : 'light';&lf;
            + &nbsp; const darkEls = document.querySelectorAll("dark-mode");&lf;
            + &nbsp; const lightEls = document.querySelectorAll("light-mode");&lf;
            + &nbsp; for (const darkEl of darkEls) {&lf;
            + &nbsp;   if (theme === "dark") {&lf;
            + &nbsp;     for (const child of darkEl.childNodes) {&lf;
            + &nbsp;       darkEl.parentElement?.append(child);&lf;
            + &nbsp;     }&lf;
            + &nbsp;   }&lf;
            + &nbsp;   darkEl.remove();&lf;
            + &nbsp; }&lf;
            + &nbsp; for (const lightEl of lightEls) {&lf;
            + &nbsp;   if (theme === "light") {&lf;
            + &nbsp;     for (const child of lightEl.childNodes) {&lf;
            + &nbsp;       lightEl.parentElement?.append(child);&lf;
            + &nbsp;     }&lf;
            + &nbsp;   }&lf;
            + &nbsp;   lightEl.remove();&lf;
            + &nbsp; }&lf;
            + })();
    function ThemeBody
        { 
            @ ssrTheme
            :{ 
                :p ssrTheme
                    :boolean 
        return 
            iif ssrTheme
                then null
                else
                    script 
                        @ dangerouslySetInnerHTML
                            { 
                                @ __html clientDarkAndLightModeElsCode
    function useTheme
        const context = useContext(ThemeContext)
        if context === undefined
            throw new Error("useTheme must be used within a ThemeProvider")
        return context
        #
            # *
            # * This allows you to render something that depends on the theme without
            # * worrying about whether it'll SSR properly when we don't actually know
            # * the user's preferred theme.
            # 
    function Themed
        { 
            @ dark
            @ light
            @ initialOnly
                = false
            :{ 
                :p dark
                    :union 
                        :ref ReactNode
                        :string 
                :p light
                    :union 
                        :ref ReactNode
                        :string 
                :p initialOnly
                    :optional 
                    :boolean 
        const [theme] = useTheme()
        const [initialTheme] = useState(theme)
        const themeToReference
            iif initialOnly
                then initialTheme
                else theme
        const serverRenderWithUnknownTheme = !theme && typeof document === "undefined"
        if serverRenderWithUnknownTheme
            return 
                < React.Fragment
                    + {createElement("dark-mode", null, dark)}
                    + {createElement("light-mode", null, light)}
                # stick them both in and our little script will update the DOM to match
                # what we'll render in the client during hydration.
        return 
            < React.Fragment
                { 
                    iif themeToReference === "light"
                        then light
                        else dark
        #
            # *
            # * This allows you to render something that depends on the theme without
            # * worrying about whether it'll SSR properly when we don't actually know
            # * the user's preferred theme.
            # 
    function isTheme
        param value
            :unknown 
        :return
            :predicate value
                :ref Theme
        return 
            && 
                + typeof value === "string"
                _ themes.includes
                    + value
                        :as 
                            :ref Theme
    export 
        @ isTheme
        @ Theme
        @ Themed
        @ ThemeBody
        @ ThemeHead
        @ ThemeProvider
        @ useTheme
