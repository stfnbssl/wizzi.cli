$group

    set md.executePowershell
        async-function 
			param options
			r_promise()
				var ps
					new powershell
						{ 
							@ executionPolicy 'Bypass'
							@ verbose true
							@ version 3
				
				log myname, 'executePowershell', 'options', JSON.stringify(options, null, 2)
				
				if options.params
					_ ps.addCommand
						@ options.scriptPath
						@ options.params
				else
					_ ps.addCommand
						@ options.scriptPath

				_ ps.invoke().then
					=> 
						param output
						log myname, 'executePowershell', 'output', output
						_ resolve
							{
								@ error false
								@ stdout output
					._ catch
						=> 
							param err
							error myname, 'executePowershell', err
							_ ps.dispose
							_ resolve
								{
									@ error true
									@ stderr err

    set md.executePowershellToEventStream
        async-function 
			param options
			param res
			r_promise()
				_ md.executePowershell
					{
						@ scriptPath options.scriptPath
						@ params options.params
					a_then(result)
						_ res.writeHead
							@ 200
							{ 
								@ "Content-Type" "text/event-stream"
								@ "Cache-control" "no-cache"
						if result.error
							_ res.write('stderr: ' + result.stderr)
							_ res.end('data: ***___CLOSE___***\n\n')
						else
							var str
							var lines = result.stdout.split("\n")
							for var i in lines
								if i == lines.length - 1
									set str = lines[i]
								else
									# Note: The double-newline is *required*
									_ res.write('data: ' + lines[i] + "\n\n")
							_ res.end('data: ***___CLOSE___***\n\n')
						
						_ resolve
							@ result
					catch_reject( executePowershellToEventStream )
