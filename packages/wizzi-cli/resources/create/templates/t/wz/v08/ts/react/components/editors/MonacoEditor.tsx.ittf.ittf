$group
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import classnames from 'classnames'
    import debounce from 'lodash/debounce'
    import 
        as monaco
        from 'monaco-editor/esm/vs/editor/editor.main'
    import 
        @ SimpleEditorModelResolverService
        from 'monaco-editor/esm/vs/editor/standalone/browser/simpleServices'
    import 
        @ StaticServices
        from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices'
    import 
        as React
        from 'react'
    ${'$'}if false
        import
            @ getFileLanguage 
            @ getRelativePath
            @ getAbsolutePath
            from '../../features/file/index'
    ${'$'}if false
        import 
            @ prettierCode 
            from '../../features/prettier/index'
    import 
        @ withThemeName
        @ ThemeName
        from '../../features/preferences/index'
    import ResizeDetector from '../widgets/ResizeDetector'
    import 
        @ EditorProps
        from './EditorProps'
    import 
        @ light
        @ dark
        from './themes/monaco'
    import ittfLang 
        from './languages/ittf.language'
    import ittfDarkTheme
        from './themes/ittf.dark.theme'
    import ittfLightTheme
        from './themes/ittf.light.theme'
    import overrides from './themes/monaco-overrides'
    +
    ${'$'}if false
        set SimpleEditorModelResolverService.prototype.findModel =
            function 
                param _
                    :any 
                param resource
                    :any 
                return 
                    _ monaco.editor.getModels().find
                        => 
                            param model
                            set model.uri.toString() === resource.toString()
            #
                # 
                # Monkeypatch to make 'Find All References' work across multiple files
                # https://github.com/Microsoft/monaco-editor/issues/779#issuecomment-374258435
                # 
            # @ts-ignore
    +
    set global.MonacoEnvironment =
        { 
            m getWorkerUrl
                param moduleId
                    :string 
                param label
                    :string 
                
                switch label
                    case 'json'
                        return '/public/packi/json.worker.bundle.js';
                        $*
                        return
                            new Worker
                                @ 'monaco-editor/esm/vs/language/json/json.worker'
                                {
                                    @ type 'module'
                        *$
                    case 'html'
                        return '/public/packi/html.worker.bundle.js';
                        $*
                        return
                            new Worker
                                @ 'monaco-editor/esm/vs/language/html/html.worker'
                                {
                                    @ type 'module'
                        *$
                    case 'css'
                    case 'scss'
                    case 'less'
                        return '/public/packi/css.worker.bundle.js';
                        $*
                        return
                            new Worker
                                @ 'monaco-editor/esm/vs/language/css/css.worker'
                                {
                                    @ type 'module'
                        *$
                    case 'typescript'
                    case 'javascript'
                        return '/public/packi/ts.worker.bundle.js';
                        $*
                        return
                            new Worker
                                @ 'monaco-editor/esm/vs/language/typescript/ts.worker'
                                {
                                    @ type 'module'
                        *$
                    default 
                        return '/public/packi/editor.worker.bundle.js';
                        $*
                        return
                            new Worker
                                @ 'monaco-editor/esm/vs/language/editor/editor.worker'
                                {
                                    @ type 'module'
                        *$
        # @ts-ignore
    
    _ monaco.languages.register
        {
            @ id 'ittf'
    _ monaco.languages.setMonarchTokensProvider('ittf', ittfLang)
    _ monaco.editor.defineTheme('ittfLight', ittfLightTheme)
    _ monaco.editor.defineTheme('ittfDark', ittfDarkTheme)
    _ monaco.editor.defineTheme('light', light)
    _ monaco.editor.defineTheme('dark', dark)
    ${'$'}if false
        const documentFormattingProvider
            :ref monaco.languages.DocumentFormattingEditProvider
            =
                { 
                    m provideDocumentFormattingEdits
                        async
                        param model
                        const text
                            await 
                                _ prettierCode(model.uri.path, model.getValue())
                        return 
                            [ 
                                { 
                                    @ range model.getFullModelRange()
                                    @ text
            #
                # 
                # Use prettier to format code.
                # This will replace the default formatter.
                # 
        _ monaco.languages.registerDocumentFormattingEditProvider('javascript', documentFormattingProvider)
        _ monaco.languages.registerDocumentFormattingEditProvider('typescript', documentFormattingProvider)
        _ monaco.languages.registerDocumentFormattingEditProvider('markdown', documentFormattingProvider)
    export
        :type MonacoEditorProps
            :intersect 
                :ref EditorProps
                :{ 
                    :p theme
                        :ref ThemeName
    :type State
        :{ 
    const editorStates = new Map()
        # Store editor states such as cursor position, selection and scroll position for each model
    const requestedTypings = new Map()
        # Store details about typings we have requested and loaded
    const extraLibs = new Map()
    const codeEditorService = StaticServices.codeEditorService.get()
    const findModel
        => 
            param path
                :string 
            _ monaco.editor.getModels().find
                => 
                    param model
                    === 
                        + model.uri.path
                        `lit 
                            + /
                            @ path
                            + 
    class MonacoEditorComp
        super React.Component
            :param 
                :ref MonacoEditorProps
            :param 
                :ref State
        p defaultProps
            static
            :ref Partial
                :param 
                    :ref MonacoEditorProps
            { 
                @ lineNumbers 'on'
                @ wordWrap 'on'
                @ scrollBeyondLastLine false
                { minimap
                    @ enabled false
                @ fontFamily 'var(--font-monospace)'
                @ fontLigatures true
        p state
            :ref State
            { 
        m removePath
            static
            param path
                :string 
            _ editorStates.delete(path)
                # Remove editor states
            const model = findModel(path)
                # Remove associated models
            _ model?.dispose?.()
        m renamePath
            static
            param oldPath
                :string 
            param newPath
                :string 
            const selection = editorStates.get(oldPath)
            _ editorStates.delete(oldPath)
            _ editorStates.set(newPath, selection)
            _ this.removePath(oldPath)
        m getTheme
            param theme
                :string
            param filePath
                :string
            if filePath.endsWith('.ittf')
                return theme == 'ligth' ? 'ittfLight' : 'ittfDark'
            else
                return theme
        m componentDidMount
            const 
                { 
                    @ files
                    @ selectedFile
                    @ autoFocus
                    @ updateFiles
                    @ onSelectFile
                    @ readOnly
                    ... rest
                = this.props
            set codeEditorService.openCodeEditor =
                async=> 
                    { 
                        @ resource
                        @ options
                        :any 
                    param editor
                        :ref monaco.editor.IStandaloneCodeEditor
                    _ this.props.onSelectFile(resource.path.replace(/^\//, ''))
                        # Remove the leading slash added by the Uri
                    _ editor.setSelection(options.selection)
                    _ editor.revealLine(options.selection.startLineNumber)
                    return 
                        { 
                            @ getControl
                                => 
                                    + editor
                # The methods provided by the service are on it's prototype
                # So spreading this object doesn't work, we must mutate it
            const options
                {
                    @ ...rest
                    @ theme this.getTheme(rest.theme, selectedFile)
                    @ readOnly readOnly
            const editor
                _ monaco.editor.create
                    @expr this._node.current
                        :as 
                            :ref HTMLDivElement
                    @ options
                    @ codeEditorService
            set this._editor = editor
            set this._disposables =
                [ 
                    @ editor
            _ this._disposables.push(editor.onDidChangeModelContent(this._handleEditFile))
            _ this._openFile
                @ selectedFile
                @ files[selectedFile]?.contents
                    :as 
                        :string 
                @ autoFocus
            for const path in files
                const file = files[path]
                if file.type === 'CODE'
                    _ this._initializeFile(path, file.contents)
                # Load all the files so the editor can provide proper intellisense
        m componentDidUpdate
            param prevProps
                :ref MonacoEditorProps
            param prevState
                :ref State
            const 
                { 
                    @ selectedFile
                    @ files
                    @ autoFocus
                    @ theme
                    @ updateFiles
                    @ onSelectFile
                    ... rest
                = this.props
            const options
                {
                    @ ...rest
                    @ theme this.getTheme(theme, selectedFile)
            if this._editor
                _ this._editor.updateOptions(options)
                const model = this._editor.getModel()
                const value
                    :string 
                    =
                        @expr files[selectedFile]?.contents
                            :as 
                                :any 
                if selectedFile !== prevProps.selectedFile
                    _ editorStates.set(prevProps.selectedFile, this._editor.saveViewState())
                        # Save the editor state for the previous file so we can restore it when it's re-opened
                    _ this._openFile(selectedFile, value, autoFocus)
                else
                    if model && value !== model.getValue()
                        _ this._editor.executeEdits
                            @ null
                            [ 
                                { 
                                    @ range model.getFullModelRange()
                                    @ text value
                            # @ts-ignore
            if theme !== prevProps.theme || selectedFile !== prevProps.selectedFile
                _ monaco.editor.setTheme
                    _ this.getTheme
                        @ theme
                        @ selectedFile
            if prevProps.files !== this.props.files
                for const path in this.props.files
                    const file = this.props.files[path]
                    if file.type === 'CODE' && file.contents !== prevProps.files[path]?.contents && path !== selectedFile
                        _ this._initializeFile(path, file.contents)
        m componentWillUnmount
            _ this._disposables.forEach
                => 
                    param dis
                    _ dis.dispose()
        +
        => _initializeFile
            param path
                :string 
            param value
                :string 
            let model = findModel(path)
            if model && !model.isDisposed()
                _ model.pushEditOperations
                    [ 
                    [ 
                        { 
                            @ range model.getFullModelRange()
                            @ text value
                    # If a model exists, we need to update it's value
                    # This is needed because the content for the file might have been modified externally
                    # Use `pushEditOperations` instead of `setValue` or `applyEdits` to preserve undo stack
                    # @ts-ignore
            else
                if path.endsWith('.ittf')
                    set model =
                        _ monaco.editor.createModel
                            @ value
                            @ 'ittf'
                            _ monaco.Uri.from
                                { 
                                    @ scheme 'file'
                                    @ path
                else
                    set model =
                        _ monaco.editor.createModel
                            @ value
                            @ undefined
                            _ monaco.Uri.from
                                { 
                                    @ scheme 'file'
                                    @ path
                _ model.updateOptions
                    { 
                        @ tabSize 2
                        @ insertSpaces true
        +
        => _openFile
            param path
                :string 
            param value
                :string 
            param focus
                :boolean 
                :optional 
            log 'MonacoEditor', '_openFile', path, value
            _ this._initializeFile(path, value)
            const model = findModel(path)
            if this._editor && model
                _ this._editor.setModel(model)
                const editorState = editorStates.get(path)
                    # Restore the editor state for the file
                if editorState
                    _ this._editor.restoreViewState(editorState)
                if focus
                    _ this._editor.focus()
        +
        => _handleEditFile
            param _event
                :ref monaco.editor.IModelContentChangedEvent
            :return
                :void 
            const model = this._editor?.getModel?.()
            if model
                const value = model.getValue()
                log '---*** MonacoEditor._handleEditFile'
                if value !== this.props.files[this.props.selectedFile]?.contents
                    _ this.props.updateFiles
                        => 
                            (
                                { 
                                    { [this.props.selectedFile]
                                        @ type 'CODE'
                                        @ contents value
        p _handleResize
            _ debounce
                => 
                    _ this._editor?.layout?.()
                @ 50
                { 
                    @ leading true
                    @ trailing true
        p _disposables
            :[ 
                :ref monaco.IDisposable
            [ 
        p _editor
            :union 
                :ref monaco.editor.IStandaloneCodeEditor
                :null 
            = null
        p _node
            _ React.createRef
                :param 
                    :ref HTMLDivElement
        +
        p _statusbar
            _ React.createRef
                :param 
                    :ref HTMLDivElement
        +
        m render
            return 
                div 
                    @ className {css(styles.container)}
                    < style 
                        @ type "text/css"
                        @ dangerouslySetInnerHTML
                            { 
                                @ __html overrides
                    < ResizeDetector 
                        @ onResize {this._handleResize}
                        div 
                            @ ref {this._node}
                            @ className
                                _ classnames
                                    _ css(styles.editor)
                                    @ 'packi-monaco-editor'
                                    `lit 
                                        + theme-
                                        @ this.props.theme
    +
    export 
        const MonacoEditor = withThemeName(MonacoEditorComp)
    +
    export-default withThemeName(MonacoEditorComp)
    +
    const styles
        _ StyleSheet.create
            { 
                { container
                    @ display 'flex'
                    @ flex 1
                    @ flexDirection 'column'
                    @ height '100%'
                    @ width '100%'
                { editor
                    @ height '100%'
                    @ width '100%'
