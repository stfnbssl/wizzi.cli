module
    import 
        @ Application
        @ Request
        @ Response
        @ RequestHandler
        from 'express'
    import 
        as jwt
        from 'express-jwt'
        # TODO (missing @types/ declaration) import * as jwtAuthz from 'express-jwt-authz';
    import 
        as jwksRsa
        from 'jwks-rsa'
        # TODO (missing @types/ declaration) import * as jwtAuthz from 'express-jwt-authz';
    import 
        @ MiddlewareType
        from '../features/app/types'
    import 
        @ config
        from '../features/config'
    export 
        const checkJwt
            _ jwt
                { 
                    @ secret
                        _ jwksRsa.expressJwtSecret
                            { 
                                @ cache true
                                @ rateLimit true
                                @ jwksRequestsPerMinute 5
                                @ jwksUri
                                    `lit 
                                        + https://
                                        @ config.auth0Domain
                                        + /.well-known/jwks.json
                        # Dynamically provide a signing key based on the kid in the header and the singing keys
                        # provided by the JWKS endpoint.
                    @ audience config.auth0PackiApiId
                        # Validate the audience and the issuer.
                    @ issuer
                        `lit 
                            + https://
                            @ config.auth0Domain
                            + /
                    [ algorithms
                        @ 'RS256'
    export 
        const checkScopes
            => 
                param scopes
                    :[ 
                        :string 
                _ jwtAuthz(scopes)
    export 
        const Auth0Middleware
            :ref MiddlewareType
            =
                => 
                    param app
                        :ref Application
                    _ app.use(checkJwt)
        # included module express-jwt-authz missing @types/ declaration
    const jwtAuthz
        => 
            param expectedScopes
                :[ 
                    :string 
            param options
                :any 
                :optional 
            if !Array.isArray(expectedScopes)
                throw new Error('Parameter expectedScopes must be an array of strings representing the scopes for the endpoint(s)')
            return 
                => 
                    param req
                        :ref Request
                    param res
                        :ref Response
                    param next
                        :ref Function
                    const error
                        => 
                            param res
                                :ref Response
                            const err_message = 'Insufficient scope'
                            if options && options.failWithError
                                return 
                                    _ next
                                        { 
                                            @ statusCode 403
                                            @ error 'Forbidden'
                                            @ message err_message
                            _ res.append
                                @ 'WWW-Authenticate'
                                `lit 
                                    + Bearer scope="
                                    _ expectedScopes.join(' ')
                                    + ", error="
                                    @ err_message
                                    + "
                            _ res.status(403).send(err_message)
                    if expectedScopes.length === 0
                        return next()
                    if !req.user || typeof req.user.scope !== 'string'
                        return error(res)
                    const scopes = req.user.scope.split(' ')
                    const allowed
                        _ expectedScopes.some
                            => 
                                param scope
                                _ scopes.includes(scope)
                    return 
                        iif allowed
                            then next()
                            else error(res)
        # included module express-jwt-authz missing @types/ declaration
