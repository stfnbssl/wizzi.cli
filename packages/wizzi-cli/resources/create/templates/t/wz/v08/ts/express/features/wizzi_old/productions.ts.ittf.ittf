$group

    import path from 'path'
    import fs from 'fs'
    import wizzi from 'wizzi'
    ${'$'}if wzCtx.Build.usePacki
        import wizziTools from 'wizzi-tools'
    import 
        @ ittfScanner
        @ IttfMTreeState
        @ FolderBrowseResult
        from 'wizzi-utils'
    ${'$'}if wzCtx.Build.usePacki
        import 
            @ packiTypes
            from '../packi'
    import 
        @ config
        from '../config'
    import 
        ${'$'}if wzCtx.Build.usePacki
            @ createJsonFsAndFactory
            @ ensurePackiFilePrefix
        @ createFilesystemFactory
        from './factory'
    import 
        @ GeneratedArtifact
        @ TransformedModel
        from './types'
    import 
        @ JsonFs
        from 'wizzi-repo'
    $include productions/loadMTree.ts
    $include productions/generate.ts
    $include productions/transform.ts
    $include productions/executeJob.ts
    $include productions/wizzify.ts
    +
    export 
        async-function loadModelJson
            param wf
                :ref wizzi.WizziFactory
            param filePath
                :string 
            param context
                :any 
            :return
                :ref Promise
                    :param 
                        :ref wizzi.WizziModel
            return 
                new Promise
                    async=> 
                        param resolve
                        param reject
                        const schemaName = schemaFromFilePath(filePath)
                        if !schemaName
                            return reject('File is not a known ittf document: ' + filePath)
                        _ wf.loadModel
                            @ schemaName
                            @ filePath
                            { 
                                @ mTreeBuildupContext context
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
                                    # console.log('Generated artifact', result);
    
    +
    export 
        async-function loadModelFs
            param filePath
                :string 
            param context
                :any 
            :return
                :ref Promise
                    :param 
                        :ref wizzi.WizziModel
            return 
                new Promise
                    async=> 
                        param resolve
                        param reject
                        const schemaName = schemaFromFilePath(filePath)
                        if !schemaName
                            return reject('File is not a known ittf document: ' + filePath)
                        const wf
                            await 
                                _ createFilesystemFactory()
                        _ wf.loadModel
                            @ schemaName
                            @ filePath
                            { 
                                @ mTreeBuildupContext context
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
                                    # console.log('Generated artifact', result);
    
    
    +
    export 
        async-function scanIttfDocument
            param filePath
                :string 
            param rootFolder
                :string 
            :return
                :ref Promise
                    :param 
                        :ref IttfMTreeState
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ ittfScanner.scanIttfDocument
                            @ filePath
                            { 
                                @ rootFolder
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
    
    +
    export 
        async-function scanIttfFolder
            param filePath
                :string 
            param rootFolder
                :string 
            :return
                :ref Promise
                    :param 
                        :ref FolderBrowseResult
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ ittfScanner.browseFolder
                            @ filePath
                            { 
                                @ rootFolder
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
    
    ${'$'}if wzCtx.Build.usePacki
        +
        export 
            async-function inferAndLoadContextJson
                param wf
                    :ref wizzi.WizziFactory
                param files
                    :ref packiTypes.PackiFiles
                param filePath
                    :string 
                param exportName
                    :string 
                :return
                    :ref Promise
                        :param any
                return 
                    new Promise
                        => 
                            param resolve
                            param reject
                            const pf = parseFilePath(filePath)
                            if pf.isIttfDocument && pf.schema !== 'json'
                                var twinJsonBaseName = pf.seedname + '.json.ittf'
                                $$ loog 'features.wizzi.productions.inferAndLoadContextJson.twinJsonBaseName', twinJsonBaseName
                                const twinDocumentUri
                                    _ Object.keys(files).find
                                        => 
                                            param k
                                            _ k.endsWith('/' + twinJsonBaseName)
                                $$ loogg 'features.wizzi.productions.inferAndLoadContextJson.twinDocumentUri', twinDocumentUri, Object.keys(files)
                                if twinDocumentUri
                                    _ loadModelJson
                                        @ wf
                                        _ ensurePackiFilePrefix(twinDocumentUri)
                                        { 
                                        ._ then
                                            => 
                                                param model
                                                _ resolve
                                                    { 
                                                        @ [exportName] model
                                        ._ catch
                                            => 
                                                param err
                                                _ reject(err)
                                else
                                    _ resolve
                                        { 
                            else
                                _ resolve
                                    { 
    +
    export 
        async-function inferAndLoadContextFs
            param filePath
                :string 
            param exportName
                :string 
            :return
                :ref Promise
                    :param any
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        const pf = parseFilePath(filePath)
                        if pf.isIttfDocument && pf.schema !== 'json'
                            var twinJsonPath = path.join(path.dirname(filePath), pf.seedname + '.json.ittf')
                            if fs.existsSync(twinJsonPath)
                                _ loadModelFs
                                    @ twinJsonPath
                                    { 
                                    ._ then
                                        => 
                                            param model
                                            _ resolve
                                                { 
                                                    @ [exportName] model
                                    ._ catch
                                        => 
                                            param err
                                            _ reject(err)
                            else
                                _ resolve
                                    { 
                        else
                            _ resolve
                                { 
    +
    const schemaModuleMap
        :{ 
            :index 
                :string 
                param k
                    :string 
        =
            { 
                @ css 'css/document'
                @ graphql 'graphql/document'
                @ ittf 'ittf/tojson'
                @ js 'js/module'
                @ json 'json/document'
                @ html 'html/document'
                @ md 'md/document'
                @ scss 'scss/document'
                @ svg 'svg/document'
                @ text 'text/document'
                @ ts 'ts/module'
                @ vml 'vml/document'
                @ vue 'vue/document'
                @ xml 'xml/document'
    +
    function generatorFor
        param filePath
            :string 
        :return
            :union 
                :string 
                :undefined 
        const pf = parseFilePath(filePath)
        if pf.isIttfDocument
            return schemaModuleMap[pf.schema]
        return undefined
    +
    const schemaTransformerMap
        :{ 
            :index 
                :string 
                param k
                    :string 
        =
            { 
                @ meta 'ittf/cheatsheet'
    +
    function transformerFor
        param filePath
            :string 
        :return
            :union 
                :string 
                :undefined 
        const pf = parseFilePath(filePath)
        if pf.isIttfDocument
            return schemaTransformerMap[pf.schema]
        return undefined
    +
    function schemaFromFilePath
        param filePath
            :string 
        :return
            :union 
                :string 
                :undefined 
        const pf = parseFilePath(filePath)
        if pf.isIttfDocument
            return pf.schema
        return undefined
    +
    :type parsedFilePath
        :{ 
            :p seedname
                :string 
            :p schema
                :string 
            :p isIttfDocument
                :boolean 
    +
    export 
        function parseFilePath
            param filePath
                :string 
            :return
                :ref parsedFilePath
            const nameParts = path.basename(filePath).split('.')
            if nameParts[nameParts.length - 1] === 'ittf'
                return 
                    { 
                        @ isIttfDocument true
                        @ schema nameParts[nameParts.length - 2]
                        @ seedname nameParts.slice(0, -2).join('.')
            else
                return 
                    { 
                        @ isIttfDocument false
                        @ schema nameParts[nameParts.length - 1]
                        @ seedname nameParts.slice(0, -1).join('.')
