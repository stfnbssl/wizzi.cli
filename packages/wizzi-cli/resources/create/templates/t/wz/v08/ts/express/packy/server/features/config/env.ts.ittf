module
    import 
        as path
        from 'path'
    import 
        @ cleanEnv
        @ str
        @ bool
        @ port
        from 'envalid'
    import 
        @ ConfigType
        from './types'
    function validateEnv
        _ console.log('config/env.ts, PACKI_API_ENDPOINT before', process.env.PACKI_API_ENDPOINT)
        let checkedEnv
            _ cleanEnv
                @expr process.env
                { 
                    @ PORT port()
                    @ SESSION_SECRET str()
                    @ PACKI_TEMPLATES_FOLDER str()
                    @ MONGO_PASSWORD str()
                    @ MONGO_PATH str()
                    @ MONGO_USER str()
                    @ AUTH0_DOMAIN str()
                    @ AUTH0_PACKI_CLIENT_ID str()
                    @ AUTH0_PACKI_CLIENT_SECRET str()
                    @ AUTH0_PACKI_CALLBACK_URL str()
                    @ AUTH0_PACKI_API_ID str()
                    @ AUTH0_PACKI_BACKEND_APP_ID str()
                    @ AUTH0_PACKI_BACKEND_APP_SECRET str()
                    @ GITHUB_CLIENT_ID str()
                    @ GITHUB_CLIENT_SECRET str()
                    @ GITHUB_CALLBACK_URL str()
                    @ IS_WIZZI_DEV bool()
                    @ PACKI_API_ENDPOINT str()
        set process.env.PACKI_API_ENDPOINT = checkedEnv.PACKI_API_ENDPOINT
        _ console.log('config/env.ts, PACKI_API_ENDPOINT after', process.env.PACKI_API_ENDPOINT)
        return checkedEnv
    export 
        const packiFilePrefix = 'json:/'
    let config
        :ref ConfigType
    export-default 
        function create
            :return
                :ref ConfigType
            const __ittfPath = path.join(__dirname, '..', '..', '..', 'ittf')
            if config == null
                const checkedEnv = validateEnv()
                set config =
                    { 
                        @ port checkedEnv.PORT
                        @ packiTemplatesFolder checkedEnv.PACKI_TEMPLATES_FOLDER
                        @ sessionSecret checkedEnv.SESSION_SECRET
                        @ mongoPath checkedEnv.MONGO_PATH
                        @ mongoUser checkedEnv.MONGO_USER
                        @ mongoPassword checkedEnv.MONGO_PASSWORD
                        @ auth0Domain checkedEnv.AUTH0_DOMAIN
                        @ auth0PackiClientId checkedEnv.AUTH0_PACKI_CLIENT_ID
                        @ auth0PackiClientSecret checkedEnv.AUTH0_PACKI_CLIENT_SECRET
                        @ auth0PackiCallbackUrl checkedEnv.AUTH0_PACKI_CALLBACK_URL
                        @ auth0PackiApiId checkedEnv.AUTH0_PACKI_API_ID
                        @ auth0PackiBackendAppId checkedEnv.AUTH0_PACKI_BACKEND_APP_ID
                        @ auth0PackiBackendAppSecret checkedEnv.AUTH0_PACKI_BACKEND_APP_SECRET
                        @ GithubClientID checkedEnv.GITHUB_CLIENT_ID
                        @ githubClientSecret checkedEnv.GITHUB_CLIENT_SECRET
                        @ githubCallbackURL checkedEnv.GITHUB_CALLBACK_URL
                        @ packiApiEndpoint checkedEnv.PACKI_API_ENDPOINT
                        @ isWizziDev checkedEnv.IS_WIZZI_DEV
                        @ metaHtmlIttfPath path.join(__ittfPath, 'meta', 'html', 'index.html.ittf')
                        @ metaFolderIttfPath path.join(__ittfPath, 'meta', 'folder', 'index.html.ittf')
                        @ metaHtmlTextPath path.join(__ittfPath, 'meta', 'text', 'index.html.ittf')
                _ Object.keys(config).forEach
                    => 
                        param element
                        if element.indexOf("Pass") < 0 && element.indexOf("Secr") < 0
                            _ console.log
                                @ 'Created config'
                                @ element
                                @expr 
                                    ( 
                                        + config
                                            :as 
                                                :any 
                                    .[ element
            return config
