module
	kind es6

    $
        var quick = true;
        // var pkgName = "lambda";
        // var pkgName = "tau_express";
        // var pkgName = "sigma_express_auth";
        // var pkgName = "ics_react_ts";
        // var pkgName = "wizzi.site";
        // var pkgName = "frontend";
        // var pkgName = "wizzi.frontend";
        // var pkgName = "wizzi.plugin.ppt";
        // var template = "wizzi_plugin";
        // var template = "express";
        // var template = "react_ts";
        // var template = "express_ts";
        // var template = "webpack_react_ts";
        // var template = "ts/express_site";
        // var wizzi_plugin_type = 'syntax_structure';
        // var wizzi_plugin_schema = 'ppt';
        var template = "ts/account_site";
        var pkgName = "wizzi.account";

	const path = require('path')
	const fs = require('fs')
    const chalk = require('chalk')
	const wizzi = require('wizzi')
    var inquirer = require('inquirer')
	
    set module.exports
		=>
			param options
            if options
                var cliCtx
                    { 
                        @ name options.pkgName
                        @ description options.pkgName
                        @ version "0.0.1"
                        { author
                            @ name "Stefano Bassoli"
                            @ email "stfn.bssl@gmail.com"
                        { license
                            @ name "MIT"
                            @ copy "copy 2021"
                        { github
                var fileCtx = {}
                if options.template == "wizzi/plugin"
                    set cliCtx.wizzi_plugin_type = options.wizzi_plugin_type
                    set cliCtx.Schemas
                        [
                            {
                                @ name options.wizzi_plugin_schema
                    set fileCtx.schema = options.wizzi_plugin_schema
                return
                    _ wizzi.genFolder
                        _ path.join
                            @ __dirname
                            @ '..'
                            @ 'resources'
                            @ 'create'
                            @ 'templates'
                            @ options.template
                        {
                            @ cliCtx cliCtx
                            @ fileCtx fileCtx
                        {
                            @ destFolder
                                iif options.destPath
                                    then
                                        + options.destPath
                                    else
                                        _ path.join
                                            @ 'C:/My/wizzi/stfnbssl/wizzi.meta.demos/packages'
                                            @ options.pkgName
                            @ copyInclude ['*']
                            @ copyExclude []
                        f_cb_test(genFolderResult)
                            # loog 'genFolderResult', genFolderResult
                            return

            _ newpkg
                =>
                    param err
                    param answers
                    
                    # loog 'create.answers', answers
                    
                    _ wizzi.model
                        _ path.join
                            @ __dirname
                            @ '..'
                            @ 'resources'
                            @ 'create'
                            @ 'contexts'
                            @ answers.pkg_type + ".json.ittf"
                        {
                            @ answers answers
                        =>
                            param err
                            param jsonctx
                            # loog 'create.jsonctx', jsonctx

                            $* VIA
                            var pkg
                                {
                                    @ type answers.pkg_type
                                    @ name answers.pkg_name
                                    { author
                                        @ name answers.author
                                        @ email answers.author_email
                                    { license
                                        @ type answers.license_type
                                        @ url null
                            *$

                            _ wizzi.genFolder
                                _ path.join
                                    @ __dirname
                                    @ '..'
                                    @ 'resources'
                                    @ 'create'
                                    @ 'templates'
                                    @ answers.__template
                                {
                                    @ cliCtx jsonctx
                                {
                                    @ destFolder
                                        _ path.join
                                            _ process.cwd
                                            @ answers.pkg_name
                                    @ copyInclude ['*']
                                    @ copyExclude []
                                f_cb_test(genFolderResult)
                                    # loog 'genFolderResult', genFolderResult

    $include create/newpkg                                    