{
    $$ $include v08/env/vars
    
    name "wizzi.cli"
    version "0.8.4"
    description "Wizzi Command Line Interface"
    { author
        name "Stefano Bassoli"
        email "stfn.bssl@gmail.com"
    
    { App
        name "Wizzi CLI"
        kind "NodeCLI"
    
    { Build
        isCLI true
        [ features
        useWizziFactory true
        { wizziFactory
            [ plugins
                "css"
                "docx"
                "graphql"
                "html"
                "ittf"
                "js"
                "json"
                "md"
                "pandoc"
                "pdf"
                "ppt"
                "text"
                "ts"
                "svg"
                "wzjob"
                "wzschema"
                "xml"
                "yaml"
            pluginsBaseFolder "C:/My/wizzi/stfnbssl/wizzi.plugins/packages"

    [ Commands
        command("main", 
            \b wz [noarguments | configname] | [command <options>],
            \b Executes the wizzi job defined in a configuration file
            "noarguments ......... executes generation using wizzi.config.js"
            "configname .......... executes generation using wizzi.config.<configname>.js"
            "    |- The wizzi.config.<configname>.js file is searched in the current and up folders"
            ""
            "commands:"
            $*
            "  create .............. setup wizzi for the current project"
            *$
            "  job ................. executes a wizzi job"
            "  fy .................. wizzify a file or folder"
            "  meta ................ executes a meta generation"
            "  metify .............. executes the 'metafication' of a wizzi production"
            "  version ............. show package version"
            "  help ................ show help menu for a command"
            "    |- Try: wz help [command]"
        $*
        command("create", 
            \b wz create <options>,
            \b Creates a starter wizzi package
            ""
            "[--kind | -k] <kindname> ... the project kind <kindname>"
            ""
            "valid kindnames:"
            "  webpack"
            "  express"
            "  plugin"
					._ join('\n')
		*$
        command(job, 
            \b wz job <jobname> <options>,
            \b Executes the wizzi job defined in a configuration file
            "jobname .... the name of the job definition file: <jobname>.wfjob.ittf"
            "  |- Is simply the display name for the job, has no effect"
            "options:"
            "  [--config | -c] <configname> ...... the name of the job configuration file: <configname>.config.js"
            "    |- The <configname>.config.js file is searched in the current and up folders"

        command(fy, 
            \b wz fy <options>,
            \b Executes the 'wizzifycation' of a file or folder
            "options:"
            "  [--source | -s] <file | folder> .... the source file or folder"
            "  [--dest | -d] <file | folder> ...... the destination file or folder"
            "  [--config | -c] <file> ............. a config file for extra plugins"
            "      |- A wizzi plugin can optionaly contain a wizzifier for its language schema."
            "      |- Basic wizzifiers are included in the Wizzi CLI."
            "      |- You can add extra plugins with a config file of the same format as for the 'wz' command."

        command(meta, 
            \b wz meta <metaname>,
            \b Executes a wizzi meta production
            "options:"
            "  metaname .... the name of the meta definition file: wizzi.meta.config.<metaname>.js"
            "    |- The wizzi.meta.config.<metaname>.js file is searched in the current and up folders"            

        command(metify, 
            \b wz metify <options>,
            \b Executes the 'metification' of a wizzi folder, so that you can parametrize the whole package structure
            "options:"
            "[--source | -s] <folder> ............................ the source file or folder"
            "[--dest | -d] <folder> .............................. the destination file or folder"
            "[--compact | -c] <subfolder[,subfolder[,...]]> ...... folders 'metamanaged' by their parents"