{
    name "wizzi.plugin.ts"
    npnName "@wizzi/plugin.ts"
    description "Wizzi plugin for typescript documents"
    version "0.0.1"
    { author
        name "Stefano Bassoli"
        email "stfn.bssl@gmail.com"
    { license
        type "MIT"
        copy "copy 2023"
    { github
        userid "stfnbssl"
    
    useWizziV08 true
    { wizziV08
        [ plugins
            "css"
            "docx"
            "graphql"
            "html"
            "ittf"
            "js"
            "ts"
            "json"
            "md"
            "pandoc"            
            "pdf"
            "ppt"
            "text"
            "svg"
            "wzjob"
            "wzschema"
            "xml"
            "yaml"

    params/use( commonsGit
    params/use( commonsPackage
    params/use( commonsWizzi
    params/use( jsCommons
    params/use( wizziPlugin
    params/use( wizziFactory
        [ plugins

    [ globals
        {
            name "___"
            value "___"

    { App
        name "Typescript plugin"
        kind "WizziPlugin"

    { Package
        name "wizzi.plugin.ts"
        description "Typescript language plugin"
        kind "WizziPlugin"

    [ BuildVars
        {
            name "useBabelParser"
            value "true"
        {
            name "useBabelParserTypescript"
            value "true"

    usePackageVersion true

    [ Schemas
        {
            name "ts"
            rootElement "xmodule"
            rootTag "module"
            plugin_type "syntax_structure"
            hasNamespaces false
            hasTextContents false
            writeGenInfo true
            multiLineCommentBegin "/*"
            multiLineCommentEnd "*/"
            hasWizzifier true
            { wizzifier
                [ parserImportCode
                    "var ts_parser = require('@babel/parser')"
                [ parserImportCode
                    "var js_parser = require('@babel/parser')"
                [ parserInvokeCode
                    "var plugins"
                    "if options.ts_or_flow === 'typescript'"
                    "\tset plugins"
                    "\t\t["
                    "\t\t\t@ 'typescript'"
                    "\t\t._ concat"
                    "\t\t\t@ commonPlugins"
                    "else"
                    "\tset plugins"
                    "\t\t["
                    "\t\t@ 'flow'"
                    "\t\t._ concat"
                    "\t\t\t@ commonPlugins"
                    "return"
                    "\t_ parser.parse"
                    "\t\t@ tobeWizzified"
                    "\t\t{"
                    "\t\t@ sourceType 'module'"
                    "\t\t@ plugins plugins"
                useFormatAstMethods true
            [ includes
            [ transformers
            [ artifacts
                {
                    name "module"
                    outmime "ts"
                    contentType "text/typescript"
                    isDefault true
            [ fileExtensions
                "ts"
                "tsx"