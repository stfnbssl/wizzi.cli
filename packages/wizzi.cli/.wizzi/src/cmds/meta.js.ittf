module
	kind es6
    +
	const path = require('path')
	const util = require('util')
	const async = require('async')
    const chalk = require('chalk')
	const wizzi = require('@wizzi/factory')
	const wizziUtils = require('wizzi-utils')
	const file = wizziUtils.file
    const verify = wizziUtils.verify
    const config = require('../utils/config')
    const help = require('./help')
    const factory = require('../factory')
    +
	set module.exports
		=>
			param args

            const name = args._[1]

			let configPath = config.getPath(name, true)
			if !configPath
				_ console.error(`meta config file "wizzi.meta.config.${(name ? name + '.' : '')}js" not found`)
				return

			const configInstance = require(configPath)
			log 'wizzi.cli.meta.metaConfigInstance', configInstance
            const x_pluginsBaseFolder = configInstance.pluginsBaseFolder || __dirname
            if !configInstance.pluginsBaseFolder
                _ console.log
                    _ chalk.red
                        @ 'wizzi.cli.meta - pluginsBaseFolder not set'
                _ console.log
                    _ chalk.red
                        @ 'meta generation failed'

            var x_pluginsItems = []
            if configInstance.plugins && configInstance.plugins.length > 0
                set x_pluginsItems = configInstance.plugins
            else
                _ chalk.red
                    @ 'wizzi.cli.meta - plugins not found in wizzi.meta.config'
                _ chalk.red
                    @ 'meta generation failed'
                return

            const x_metaPluginsBaseFolder = configInstance.metaPluginsBaseFolder || __dirname
            if !configInstance.metaPluginsBaseFolder
                _ console.log
                    _ chalk.red
                        @ 'wizzi.cli.meta - metaPluginsBaseFolder not set'
                _ console.log
                    _ chalk.red
                        @ 'meta generation failed'

            var x_metaPluginsItems = []
            if configInstance.plugins && configInstance.metaPlugins.length > 0
                set x_metaPluginsItems = configInstance.metaPlugins
            else
                _ chalk.red
                    @ 'wizzi.cli.meta - meta plugins not found in wizzi.meta.config'
                _ chalk.red
                    @ 'meta generation failed'
                return

            if !file.exists(configInstance.metaCtxPath)
                error 'Invalid options for `meta` command.'
                error 'Meta context path not found', configInstance.metaCtxPath
                _ help({_:['help', 'meta']})
                return     

            _ generateMeta
                @ configInstance.metaCtxPath
                @ configInstance.destPath
                {
                    @ items x_pluginsItems
                    @ pluginsBaseFolder x_pluginsBaseFolder
                {
                    @ items x_metaPluginsItems
                    @ metaPluginsBaseFolder x_metaPluginsBaseFolder
                @ configInstance.globalContext
                =>
                    param err
                    param result
                    if err
                        throw err
                        error err

    
    function generateMeta
        param metaCtxPath
        param destPath
        param pluginsInfo
        param metaPluginsInfo
        param globalContext
        param callback
        _ loadMetaContext
            @ metaCtxPath
            @ pluginsInfo
            a_cb(metaCtx)
                _ factory.createJsonWizziFactoryAndJsonFs
                    {
                    @ pluginsInfo
                    @ metaPluginsInfo
                    a_cb(wf_and_jsonFs)
                        set metaCtx.__wz_fsc = new wizzi.FactoryServiceContext()
                        _ wf_and_jsonFs.wf.executeMetaProduction
                            {
                                @ metaCtx metaCtx
                                { paths
                                    @ metaProductionTempFolder '___template'
                                    @ metaProductionWizziFolder '.wizzi'
                                @ globalContext globalContext
                            =>
                                param err
                                param wizziPackiFiles
                                if err
                                    throw err
                                    error err
                                    return
                                log 'wizzi.cli.meta.result.wizziPackiFiles.keys', Object.keys(wizziPackiFiles)
                                _ metaCtx.__wz_fsc.dumpDebugObjects
                                    {
                                        @ kind 'packi'
                                        @ destFolder
                                            _ path.join
                                                @ __dirname
                                                @ 'dumps'
                                                @ 'packi'
                                _ writePackifiles
                                    @ destPath
                                    @ wizziPackiFiles

    function loadMetaContext
        param metaCtxPath
        param pluginsInfo
        param callback
        _ factory.createWizziFactory
            {
            @ pluginsInfo
            a_cb(wf)
                _ wf.loadModel
                    @ 'json'
                    @ metaCtxPath
                    {
                        { mTreeBuildupContext
                            { metaCtx
                    a_cb(wizziModel)
                        r_cb( wizziModel )

    function writePackifiles
        param folderPath
        param packiFiles
        for var k in packiFiles
            _ file.write
                _ path.join
                    @ folderPath
                    @ k
                @ packiFiles[k].contents


