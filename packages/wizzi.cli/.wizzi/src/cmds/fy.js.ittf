module
	kind es6

	const path = require('path')
	const fs = require('fs')
	const wizziUtils = require('@wizzi/utils')
    const verify = wizziUtils.verify
	const file = wizziUtils.file
    const vfile = wizziUtils.vfile
    const help = require('./help')
    const factory = require('../factory')
    const github = require('../features/github')
    var _wf = null

	set module.exports
		=>
			param args
            param accessToken

            log 'fy.accessToken', accessToken, args.git

			if args.git
                _ wizzifyGitRepo
                    @ args
                    @ accessToken
                    a_cb_throw( result )
                        log 'Done. Wizzify github repo.'
                return

            let currentDir = process.cwd()

			let source = args.source || args.s
			let dest = args.dest || args.d

			log 'fy.source.dest', source, dest

			var sourcePath, destPath, sourceIsFolder
            if source && source.length > 0
                if verify.isAbsolutePath(source)
                    set sourcePath = source
                else
                    set sourcePath = path.join(currentDir, source)
                if !file.exists(sourcePath)
                    error 'Invalid options for `fy` command.'
                    error 'Source path not found', source
                    _ help({_:['help', 'fy']})
                    return       
                set sourceIsFolder = file.isDirectory(sourcePath)
				if dest && dest.length > 0
                    if verify.isAbsolutePath(dest)
                        set destPath = dest
                    else
					    set destPath = path.join(currentDir, dest)
                if !file.exists(path.dirname(destPath))
                    error 'Invalid options for `fy` command.'
                    error 'Destination path dirname not found', dest
                    _ help({_:['help', 'fy']})
                    return       
                if file.isFile(destPath) && sourceIsFolder
                    error 'Invalid options for `fy` command.'
                    error 'Source path is a folder, destination path cannot be a filename', dest
                    _ help({_:['help', 'fy']})
                    return       
                if file.isDirectory(destPath) && !sourceIsFolder
                    set destPath
                        _ path.join
                            @ destPath
                            @ path.basename(sourcePath) + '.ittf'
                if sourceIsFolder
                    log 'ok. source && dest are folders', args
                    _ wizzifyFolder
                        @ sourcePath
                        @ destPath
                        @ args.f || args.from || null
                        @ args.t || args.to || null
                        a_cb_throw( result )
                            log 'Done. Wizzify folder.'
                else
					log 'ok. source && dest are files'
                    var extension = path.extname(sourcePath)
                    var schema
                    set extension = extension.substr(1)
                    if extension.toLowerCase() === 'vue'
                        set source = '<vue>' + source + '</vue>'
                        set schema = 'html'
                        set isVue = true
                    elif extension.toLowerCase() === 'tsx'
                        set schema = 'ts'
                    elif extension.toLowerCase() === 'jsx'
                        set schema = 'js'
                        set extension = 'js'
                    else
                        set schema = extension
                    _ wizzifyFile
                        @ sourcePath
                        @ destPath
                        a_cb_throw()
                            log 'Done. Wizzify file.'
			else
				error 'Invalid options for `fy` command.'
				_ help({_:['help', 'fy']})

    function wizzifyGitRepo
        param args
        param accessToken
        param callback

        const owner = args.o || args.owner
        const name = args.n || args.name
        const branch = args.b || args.branch || "master"
        const kind = args.k || args.kind || "all"
        const destFolder
            _ path.join
                @ process.cwd()
                @ args.d || args.dest || 'git_output'
                @ owner
                @ name
        
        log 'wizzifyGitRepo', 'owner', owner, 'name', name, 'branch', branch, 'kind', kind, 'destFolder', destFolder
        
        _ github.api.repo.cloneBranch
            {
                @ owner
                @ name
                @ token accessToken
            @ branch
            @ kind
            a_then( result )
                log 'wizzifyGitRepo.result', Object.keys(result.files)
                if result.files
                    for var k in result.files
                        _ file.write
                            _ path.join
                                @ destFolder
                                @ k
                            @ result.files[k].contents
                        log 'Written', k
                const destIttfFolder
                    _ path.join
                        @ destFolder
                        @ ".wizzi"
                _ wizzifyFolder
                    @ destFolder
                    @ destIttfFolder
                    @ null
                    @ null
                    a_cb()
                        r_cb()

    function wizzifyFolder
        param sourceFolder
        param destFolder
        param from
        param to
        param callback
        log 'wizzifyFolder.sourceFolder', sourceFolder
        log 'wizzifyFolder.destFolder', destFolder
        _ getWizziFactory
            a_cb( wf )
                _ vfile().getFiles
                    @ sourceFolder
                    { 
                        @ deep true
                        @ documentContent false
                    a_cb( files )
                        log 'wizzifyFolder.sourceFiles', files.length
                        function run
                            param i
                            if from != null && i < from
                                return run(i+1) 
                            if to != null && i > to
                                return run(i+1) 
                            if !files[i]
                                r_cb()
                            try
                                var sourcePath = files[i].fullPath
                                var wizzifyName 
                                    _ getWizzifyName
                                        @ sourcePath
                                if !wf.canWizzify(wizzifyName)
                                    log i+1, '/', files.length, sourcePath,'has no wizzifier'
                                    return
                                        _ file.copyFile
                                            @ sourcePath
                                            _ path.join
                                                @ destFolder
                                                @ files[i].relPath
                                            a_cb_no_throw( result )
                                                if err
                                                    error 'copying file', sourcePath
                                                    error err
                                                    return run(i+1) 
                                                log i+1, '/', files.length, sourcePath, 'copied'
                                                return run(i+1) 
                                log "from, to, i", from, to, i+1, '/', files.length 
                                $$ var destRelPath = wizziUtils.replaceAll(files[i].relPath, 'jsx', 'js')
                                var destPath 
                                    _ path.join
                                        @ destFolder
                                        @ files[i].relPath + '.ittf'
                                _ wf.getWizziIttfFromText
                                    @ file.read(sourcePath)
                                    @ getWizzifyName(sourcePath)
                                    a_cb_no_throw( result )
                                        if err
                                            error 'on file', sourcePath
                                            error err
                                            return
                                                _ process.nextTick
                                                    =>
                                                        _ run(i+1)
                                        _ file.write(destPath, result)
                                        log 'Done. Wizzify file', destPath
                                        return
                                            _ process.nextTick
                                                =>
                                                    _ run(i+1)
                            catch ex
                                error 'in file', sourcePath, 'message', ex.message
                                _ process.nextTick
                                    =>
                                        _ run(i+1)
                            $*                            
                            _ wizzifyFile
                                @ files[i].fullPath
                                _ path.join
                                    @ destFolder
                                    @ files[i].relPath + '.ittf'
                                a_cb()
                                    _ run(i+1)
                            *$
                        _ run(0)

    function wizzifyFile
        param sourcePath
        param destPath
        param callback
        _ getWizziFactory
            a_cb( wf )
                try
                    _ wf.getWizziIttfFromText
                        @ file.read(sourcePath)
                        @ getWizzifyName(sourcePath)
                        a_cb( result )
                            _ file.write(destPath, result)
                            log 'Done. Wizzify file', destPath
                            r_cb()
                catch ex
                    error 'in file', sourcePath, 'message', ex.message
                    r_cb()

    function getWizzifyName
        param sourcePath
        var ext = path.extname(sourcePath).substr(1)
        if ext == 'tsx'
            return 'ts'
        elif ext == 'jsx'
            return 'js'
        elif ext == 'mdx'
            return 'md'
        else
            return ext

    function getWizziFactory
        param callback
        if _wf != null
            r_cb( _wf )
        const globalContext = {}
        _ factory.createWizziFactory
            @ globalContext
            {
                @ items factory.getDefaultPlugins()
                @ pluginsBaseFolder factory.getDefaultPluginsBaseFolder()
            a_cb( wf )
                set _wf = wf
                r_cb( _wf )