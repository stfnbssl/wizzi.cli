module
	kind es6

	const path = require('path')
	const wizziUtils = require('@wizzi/utils')
    const verify = wizziUtils.verify
    const file = wizziUtils.file
    const vfile = wizziUtils.vfile
    const help = require('./help')

	const md = module.exports = {}

    class commandChecker
        ctor
            param command
            set this.command = command
            set this.errors = []
            set this.options = []
        
        m usingOption
            param option
            _ this.options.push(option)
            return true
        
        m optionError
            param error
            _ this.errors.push
                {
                    @ message error
            return false
        
        m checkNotNullOrUndefined
            param instance
            param kind
            param options
            if verify.isEmpty(kind)
                throw new Error('commandChecker.checkNotNull.kind param missing')
            set options = options || { message: '' }
            if !instance
                return
                    _ this.optionError
                        @ kind + ' ' + options.message + ': parameter cannot be null'
            set this[kind] = instance
            if verify.isObject(instance)
                return
                    _ this.usingOption
                        @ kind + '.keys: ' + Object.keys(instance).join(',')
            elif verify.isArray(instance)
                return
                    _ this.usingOption
                        @ kind + '.items: ' + instance.length
            else
                return
                    _ this.usingOption
                        @ kind + ': ' + instance

        m checkNotEmpty
            param name
            param kind
            param options
            set name = name || ''
            if verify.isEmpty(kind)
                throw new Error('commandChecker.checkNotEmpty.kind param missing')
            set options = options || { message: '' }
            if verify.isEmpty(name)
                return
                    _ this.optionError
                        @ kind + ' ' + options.message + ': missing parameter'
            set this[kind] = name
            return
                _ this.usingOption
                    @ kind + ': ' + name

        m checkArrayNotEmpty
            param items
            param kind
            param options
            if verify.isEmpty(kind)
                throw new Error('commandChecker.checkNotEmpty.kind param missing')
            set options = options || { message: '' }
            if !verify.isArray(items)
                return
                    _ this.optionError
                        @ kind + ' ' + options.message + ': is not an array'
            if items.length < 1
                return
                    _ this.optionError
                        @ kind + ' ' + options.message + ': the array is empty'
            set this[kind] = items
            return
                _ this.usingOption
                    @ kind + ': ' + items.length + ' items'

        m checkFile
            param fileName
            param kind
            param options
            set kind = kind || '__'
            set options = options || { message: '' }
            log 'checkFile', fileName
            if verify.isEmpty(fileName)
                return
                    _ this.optionError
                        @ kind + ' ' + options.message + ': missing file name'

            let filePath = fileName
            let currentDir = process.cwd()
            if verify.isAbsolutePath(filePath) == false
                set filePath = path.join(currentDir, filePath)
            if !file.exists(filePath)
                if options.parentFolderMustExist
                    # log 2, file.exists(path.dirname(filePath))
                    if !file.exists(path.dirname(filePath))
                        return
                            _ this.optionError
                                @ kind + ' ' + options.message + ' parent folder must exist: ' + filePath
                    else
                        set this[kind + '_parent_only_exists'] = true
                else
                    return
                        _ this.optionError
                            @ kind + ' ' + options.message + ' file not found: ' + filePath
            set this[kind] = filePath
            set this[kind+'_is_folder'] = file.isDirectory(filePath)
            return
                _ this.usingOption
                    @ kind + ': ' + filePath

        m checkFolder
            param folderName
            param kind
            param options
            set kind = kind || '__'
            set options = options || { message: '' }
            if verify.isEmpty(folderName)
                return
                    _ this.optionError
                        @ kind + ': missing folder name'
            let folderPath = folderName
            let currentDir = process.cwd()
            if verify.isAbsolutePath(folderPath) == false
                set folderPath = path.join(currentDir, folderPath)
            if !file.exists(folderPath)
                if options.parentFolderMustExist
                    log 2, file.exists(path.dirname(folderPath))
                    if !file.exists(path.dirname(folderPath))
                        return
                            _ this.optionError
                                @ kind + ' ' + options.message + ' parent folder must exist: ' + folderPath
                    else
                        set this[kind + '_parent_only_exists'] = true
                else
                    return
                        _ this.optionError
                            @ kind + ' ' +  'folder not found: ' + folderName
            set this[kind] = folderPath
            return
                _ this.usingOption
                    @ kind + ': ' + folderPath
            
        m isValid
            return this.errors.length == 0

        m checkOut
            error ''
            error ''
            if this.errors.length == 0
                success '------------------------------'
                success 'Executing', this.command, 'command'
                success '------------------------------'
                foreach opt in this.options
                    success 'using ->', opt
                success ''
                success ''
                return true
            error '------------------------------'
            error 'Error executing', this.command, 'command'
            error '------------------------------'
            foreach err in this.errors
                error err.message
            error 'Review the command options using'
            error '-> wz help ' + this.command
            error ''
            error ''
            $$ _ help({_:['help', this.command]})
            return false

	set md.commandChecker = commandChecker

