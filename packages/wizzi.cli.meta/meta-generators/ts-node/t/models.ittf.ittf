$group

    $file __dot__wizzi/models/wzctx.json.ittf.ittf
        {
            ${"${'$'}"}include v08/env/vars
            ---
            ${'$'}include cli/v08/wzctx-info.json
            ---
            { App
                name "${cliCtx.App.name}"
                kind "${cliCtx.App.kind}"
            ---
            { Build
                $if cliCtx.App.kind == 'NodeCLI'
                    isCLI true
                $if cliCtx.useFeatures
                    [ features
                        $if cliCtx.features.useGithub
                            {
                                name "github"
                                hasControllers false
                                useMongoDb false
                        $if cliCtx.features.usePacki
                            {
                                name "packi"
                                hasControllers false
                                useMongoDb false
                        $if cliCtx.features.useWizziProduction
                            {
                                name "production"
                                fileName "wizzi-production"
                                hasControllers false
                                useMongoDb true
                        $if cliCtx.features.useWizziCdn
                            {
                                name "cdn"
                                fileName "wizzi-cdn"
                                hasControllers false
                                useMongoDb true
                    $if cliCtx.features.useGithub
                        useFeatureGithub true
                        { featureGithub
                            accessToken "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"
                    $if cliCtx.features.usePacki
                        useFeaturePacki true
                        { featurePacki
                    $if cliCtx.features.useWizziProduction
                        useWizziProduction true
                        { wizziProduction
                            useCachedProductions false
                    ---
                ${"${'$'}"}include config.json
                ---
                ${"${'$'}"}include code.json
                ---
                ${"${'$'}"}include test.json
                ---
                ${"${'$'}"}include wizzi.json
                ---
                ${"${'$'}"}include utils.json
                $if cliCtx.useMongoDb || cliCtx.usePostgres || cliCtx.useSequelize
                    ---
                    ${"${'$'}"}include db.json
                $if cliCtx.useAuthentication
                    ---
                    ${"${'$'}"}include auth.json
                $if cliCtx.useData
                    ---
                    ${"${'$'}"}include data.json

    $file __dot__wizzi/models/t/code.json.ittf.ittf
        ${"${'$'}"}group
        
            useTypescript true
            { typescript
                ${'$'}${'$'} for webpack client
                useBabelLoader true
                useTsxFiles false
                
            $if cliCtx.usePrettier
                usePrettier true
                { prettier
        
            $if cliCtx.usePrismjs
                usePrismjs true
                { prismjs
                    [ modes
        
            $if cliCtx.useLint
                useLint true
                { lint
    
    $file __dot__wizzi/models/t/config.json.ittf.ittf
        ${"${'$'}"}group
                
            useConfig true
            { config
                $if cliCtx.useEnvalid
                    useEnvalid true
                    { envalid
        
    $file __dot__wizzi/models/t/test.json.ittf.ittf
        ${"${'$'}"}group
                
            useJest false
            { jest
        
    $file __dot__wizzi/models/t/utils.json.ittf.ittf
        ${"${'$'}"}group
                
            { utils
                useRimRaf true
                useMinimist true
                useAxios false
                useEscapeRegexp false
                useEscapeHtml false
                useNullThrows false
                useLodash false
                useStringifySafe false
                useParseUrl false
                useEs6Error false
                useJsCookie false
                useQueryString false
                useSanitizeHtml false
                useDateFns false
                useFetchPonyfill false
                useNanoId false
                $if cliCtx.features && cliCtx.features.useWizziProduction
                    useNodeCache true
                useGitUrlParse false
                useJsonToAst false
    
    $file __dot__wizzi/models/t/wizzi.json.ittf.ittf
        ${"${'$'}"}group
                
            $if cliCtx.useWizzi || (cliCtx.useFeatures && cliCtx.features.useWizzi)
                useWizzi true
                { wizzi
                    isDev true
                    $if cliCtx.useWizziV08
                        useV08 true
                        { v08
                            [ plugins
                                $foreach item in cliCtx.wizziV08.plugins
                                    "${item}"

                    $if cliCtx.useAzure || cliCtx.useHeroku
                        [ plugins
                            "wizzi-core"
                            "wizzi-js" 
                            "wizzi-web" 
                    $else
                        [ plugins
                            $if cliCtx.useWizziV08
                                $foreach item in cliCtx.wizziV08.plugins
                                    "./wizzi.plugin.${item}/index.js" 
                                $*
                                "./wizzi.plugin.ts/index.js" 
                                "./wizzi.plugin.json/index.js" 
                                "./wizzi.plugin.yaml/index.js" 
                                "./wizzi.plugin.ittf/index.js" 
                                "./wizzi.plugin.xml/index.js" 
                                "./wizzi.plugin.text/index.js" 
                                "./wizzi.plugin.md/index.js" 
                                "./wizzi.plugin.html/index.js" 
                                "./wizzi.plugin.css/index.js" 
                                "./wizzi.plugin.svg/index.js" 
                                "./wizzi.plugin.wzjob/index.js" 
                                *$
                            $else
                                "./wizzi-core/index.js" 
                                "./wizzi-js/index.js" 
                                "./wizzi-web/index.js" 
                                "./wizzi-meta/index.js" 
                        $if cliCtx.useWizziV08
                            pluginsBaseFolder "C:/My/wizzi/stfnbssl/wizzi.plugins/packages"
                        $else
                            pluginsBaseFolder "C:/My/wizzi/stfnbssl/wizzi.v07/packages"
                    { globalContext
                        wzConfigIsDevelopment true
                        wzConfigIsPackageDeploy false
                    useRunner false

            $if cliCtx.useWizziDocs
                useWizziDocs true
                { wizziDocs
            
            $if cliCtx.usePacki
                usePacki true
                { packi
                    useAdmin false
            
            $if cliCtx.usePackiBrowse
                usePackiBrowse true
                { packiBrowse

            $if cliCtx.useIttfStatic
                useIttfStatic true
                { ittfStatic
        
            $if cliCtx.useWizziViewEngine
                useWizziViewEngine true
                { wizziViewEngine

            $if cliCtx.useWizziJsonFactory
                useWizziJsonFactory true
                { wizziJsonFactory

    $if cliCtx.useMongoDb || cliCtx.usePostgres || cliCtx.useSequelize
        $file __dot__wizzi/models/t/db.json.ittf.ittf
            ${"${'$'}"}group

                $if cliCtx.useMongoDb
                    useMongoDb true
                    { mongoDb
                        host "mongodb+srv"
                        user "yanez"
                        password "${"${'$'}"}{stfnbssl_env.mongoDbPsw}"
                        dbPath "@cluster0.idlk7.mongodb.net"
                        dbName "wizzi"
                        { options
                            useNewUrlParser true
                            useUnifiedTopology true
                
                $if cliCtx.useSequelize
                    useSequelize true
                    { sequelize
                        databaseUrl "${"${'$'}"}{stfnbssl_env.sequelizeDbUrl}"
                        $if cliCtx.sequelize.usePostgres
                            dialect "postgres"
                            usePostgres true
                            { postgres

    $if cliCtx.useAuthentication
        $file __dot__wizzi/models/t/auth.json.ittf.ittf
            ${"${'$'}"}group
                useAuthentication true
                { authentication
                    $if cliCtx.isProduction
                        isProduction true
                    $else
                        isProduction false
                    $if cliCtx.isLocal
                        isLocal true
                    $else
                        isLocal false
                    authRequired false
                    userInfo false
                    useLocal true
                    { local
                    useGithub true
                    { github
                        clientIdLocal "${"${'$'}"}{stfnbssl_env.githubClientIdLocal}"
                        clientSecretLocal "${"${'$'}"}{stfnbssl_env.githubClientSecretLocal}"
                        callbackURLLocal "${cliCtx.baseUrlLocal}/api/${cliCtx.apiVersion}/authenticate/github/callback"
                        clientId "${"${'$'}"}{stfnbssl_env.githubClientId}"
                        clientSecret "${"${'$'}"}{stfnbssl_env.githubClientSecret}"
                        callbackURL "${cliCtx.baseUrl}/api/${cliCtx.apiVersion}/authenticate/github/callback"
                    useGoogle true
                    { google
                        clientIdLocal "${"${'$'}"}{stfnbssl_env.googleClientIdLocal}"
                        clientSecretLocal "${"${'$'}"}{stfnbssl_env.googleClientSecretLocal}"
                        callbackURLLocal "${cliCtx.baseUrlLocal}/api/${cliCtx.apiVersion}/authenticate/google/callback"
                        clientId "${"${'$'}"}{stfnbssl_env.googleClientId}"
                        clientSecret "${"${'$'}"}{stfnbssl_env.googleClientSecret}"
                        callbackURL "${cliCtx.baseUrl}/api/${cliCtx.apiVersion}/authenticate/google/callback"

    $if cliCtx.useData
        $file __dot__wizzi/models/t/data.json.ittf.ittf
            ${"${'$'}"}group
                useData true
                { data