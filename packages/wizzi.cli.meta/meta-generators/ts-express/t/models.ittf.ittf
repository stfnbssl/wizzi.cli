$group

    $file __dot__wizzi/models/wzctx.json.ittf.ittf
        {
            ${"${'$'}"}include v08/env/vars
            ---
            ${'$'}include cli/v08/wzctx-info.json
            ---
            { App
                name "Wizzi Hub"
                title "The public Wizzi Web App"
                isLocal ${cliCtx.isLocal ? "true" : "false"}
                isProduction ${cliCtx.isProduction ? "true" : "false"}
                port "${cliCtx.port}"
                useSsl ${cliCtx.useSsl ? "true" : "false"}
                siteUrl "${cliCtx.siteUrl}"
                baseUrl "${cliCtx.baseUrl}"
                siteUrlLocal "${cliCtx.siteUrlLocal}"
                baseUrlLocal "${cliCtx.baseUrlLocal}"
                apiVersion "${cliCtx.apiVersion}"
                { constants
                    { preview
                        minWidth 700
                [ Components
            ---
            { Styles
            ---
            { Build
                useSite true
                { site
                    useIttfStatic false
                    { ittfStatic
                useDemoControllers false
                [ features
                    $if cliCtx.useAuthentication
                        {
                            name "auth"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.useAccount
                        {
                            name "account"
                            hasControllers true
                            useMongoDb true
                    $if cliCtx.useFeatureBlog
                        {
                            name "blog"
                            hasControllers true
                            useMongoDb true
                    $if cliCtx.useFeatureProject
                        {
                            name "project"
                            hasControllers true
                            useMongoDb true
                    $if cliCtx.useFeatureGithub
                        {
                            name "github"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.useWizziDocs
                        {
                            name "docs"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.features.useWizzi
                        {
                            name "wizzi"
                            fileName "wizzi"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.features.useWizziFs
                        {
                            name "wizziFs"
                            fileName "wizzi-fs"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.features.useWizziGist
                        {
                            name "wizziGist"
                            fileName "wizzi-gist"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.features.useWizziMeta
                        {
                            name "wizziMeta"
                            fileName "wizzi-meta"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.useWizziProductions
                        {
                            name "production"
                            hasControllers true
                            useMongoDb true
                    $if cliCtx.usePacki
                        {
                            name "packi"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.features.usePackiEdit
                        {
                            name "packiEdit"
                            hasControllers true
                            useMongoDb false
                    $if cliCtx.useWizziCdn
                        {
                            name "cdn"
                            hasControllers true
                            useMongoDb true
                    $if cliCtx.useFeatureUser
                        {
                            name "user"
                            hasControllers true
                            $if cliCtx.featureUser.store = "mongoDb"
                                useMongoDb true
                $if cliCtx.features.useGithub
                    useFeatureGithub true
                    { featureGithub
                        accessToken "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"
                [ examples
                    $if cliCtx.useExamples
                        $if cliCtx.examples.usePromise
                        {
                            name "promise"
                            hasControllers true
                            useMongoDb false
                $if cliCtx.useAzure
                    ${"${'$'}"}include azure.json
                    ---
                $if cliCtx.useHeroku
                    ${"${'$'}"}include heroku.json
                    ---
                ${"${'$'}"}include config.json
                ---
                ${"${'$'}"}include code.json
                ---
                ${"${'$'}"}include express.json
                ---
                ${"${'$'}"}include styles.json
                ---
                ${"${'$'}"}include test.json
                ---
                ${"${'$'}"}include wizzi.json
                ---
                ${"${'$'}"}include utils.json
                $if cliCtx.useMongoDb || cliCtx.usePostgres || cliCtx.useSequelize
                    ---
                    ${"${'$'}"}include db.json
                $if cliCtx.useAuthentication
                    ---
                    ${"${'$'}"}include auth.json
                $if cliCtx.usePages
                    ---
                    ${"${'$'}"}include react.json
                $if cliCtx.useData
                    ---
                    ${"${'$'}"}include data.json

    $if cliCtx.useAzure
        $file __dot__wizzi/models/t/azure.json.ittf.ittf
            ${"${'$'}"}group

                useAzure true
                { azure
                    webAppName "wizzi"
                    resourceGroupName "wizzi-rg"
                    hostingPlanName "wizzi-plan"
                    sku "S1 Standard"
                    databaseAccountId "wizzi-app"
                    webAppLocation "West Europe"
                    appInsightsLocation "West Europe"
                    databaseAccountLocation "eastasia"
                    nodejsVersion "16.2.0"
                    packagePath "Application"
                    webAppPort 5000
                    testTitle "Hello home"
                    timeoutMinutesShort 10
                    timeoutMinutesMedium 20
                    timeoutMinutesLong 60

    $if cliCtx.useHeroku
        $file __dot__wizzi/models/t/heroku.json.ittf.ittf
            ${"${'$'}"}group

                useHeroku true
                { heroku
                    webAppName "wizzi"
                    nodejsVersion "16.2.0"
                    packagePath "deploy"
                    webAppPort 5000
                    Procfile "server.js"
                    testTitle "Hello home"
                    timeoutMinutesShort 10
                    timeoutMinutesMedium 20
                    timeoutMinutesLong 60

    $file __dot__wizzi/models/t/code.json.ittf.ittf
        ${"${'$'}"}group
        
            useTypescript true
            { typescript
                ${'$'}${'$'} for webpack client
                useBabelLoader true
                useTsxFiles false
                
            usePrettier true
            { prettier
        
            usePrismjs false
            { prismjs
                [ modes
        
            useLint true
            { lint
    
    $file __dot__wizzi/models/t/config.json.ittf.ittf
        ${"${'$'}"}group
                
            useConfig true
            { config
                useEnvalid true
                { envalid
                $if cliCtx.config.useUserInfo
                    useUserInfo true
                    { userInfo
        
    $file __dot__wizzi/models/t/express.json.ittf.ittf
        ${"${'$'}"}group
                
            useExpress true
            { express
                useSslCert ${cliCtx.useSslCert ? "true" : "false"}
                useErrors false
                useStaticFiles true
                { staticFiles
                    basePath "__dirname, '..', '..'"
                    $if cliCtx.useStaticFiles && cliCtx.staticFiles.publicPath
                        publicPath "${cliCtx.staticFiles.publicPath}"
                useSessionStore false
                useExpressValidator true
        
            useSession true
            { session
                name "${'$'}{cliCtx.name}"
                secret "${"${'$'}"}{stfnbssl_env.sessionSecret}"
        
            noCache true
        
            useSocketIO false 
            { socketIO
            
            useCookie true
            { cookie
        
            useLogger false
            { logger
                useMorgan false
                { morgan
        
            useCompression false
            { compression
                level 6
            
            useHelmet false
            { helmet
            
            usePromiseMiddleware true
            { promiseMiddleware

            $if cliCtx.useCors
                useCors true
                { cors
                    $if cliCtx.cors.clientOrigins && cliCtx.cors.clientOrigins.length > 0
                        [ clientOrigins
                            $foreach item in cliCtx.cors.clientOrigins
                                "${item}"
        
    $file __dot__wizzi/models/t/styles.json.ittf.ittf
        ${"${'$'}"}group
                
                { styles
                    usePalx false
                
                useStyledComponents false
                { styledComponents
        
                useStyledSystem false
                { styledSystem
        
                useAphrodite false
                { aphrodite
                    disableImportant true
        
                useTailwindcss false
                { tailwindcss
        
                useExpoStyles false
                { expoStyles
        
    $file __dot__wizzi/models/t/test.json.ittf.ittf
        ${"${'$'}"}group
                
            useJest false
            { jest
        
    $file __dot__wizzi/models/t/utils.json.ittf.ittf
        ${"${'$'}"}group
                
            { utils
                useAxios true
                useEscapeRegexp false
                useEscapeHtml false
                useNullThrows false
                useLodash false
                useStringifySafe true
                useParseUrl true
                useEs6Error false
                useJsCookie false
                useQueryString true
                useSanitizeHtml false
                useDateFns false
                useFetchPonyfill false
                $if cliCtx.useMongoDb || cliCtx.usePostgres || cliCtx.useSequelize
                    useNanoId true
                useNodeCache true
                useGitUrlParse false
                useJsonToAst false
                useRimRaf false
                $if cliCtx.utils && cliCtx.utils.useDiffMatchPatch
                    useDiffMatchPatch true
                    
    $file __dot__wizzi/models/t/wizzi.json.ittf.ittf
        ${"${'$'}"}group
                
            useWizzi true
            { wizzi
                isDev true
                $if cliCtx.useAzure || cliCtx.useHeroku
                    [ plugins
                        "wizzi-core"
                        "wizzi-js" 
                        "wizzi-web" 
                $else
                    [ plugins
                        "./wizzi-core/index.js"
                        "./wizzi-js/index.js" 
                        "./wizzi-web/index.js" 
                        "./wizzi-meta/index.js"
                    pluginsBaseFolder "C:/My/wizzi/stfnbssl/wizzi/packages"
                { globalContext
                    wzConfigIsDevelopment true
                useRunner false

            $if cliCtx.useWizziDocs
                useWizziDocs true
                { wizziDocs

            $if cliCtx.features.useWizziFs
                useWizziFs true
                { wizziFs
            
            $if cliCtx.useWizziProductions
                useWizziProductions true
                { wizziProductions
                    useCachedProductions false

            $if cliCtx.usePacki
                usePacki true
                { packi
                    useAdmin false
            $if cliCtx.usePackiBrowse
                usePackiBrowse true
                { packiBrowse 

            useIttfStatic true
            { ittfStatic
        
            useWizziViewEngine true
            { wizziViewEngine

            $if cliCtx.useWizziCdn
                useWizziCdn true
                { wizziCdn

            useWizziJsonFactory true
            { wizziJsonFactory

    $if cliCtx.useMongoDb || cliCtx.usePostgres || cliCtx.useSequelize
        $file __dot__wizzi/models/t/db.json.ittf.ittf
            ${"${'$'}"}group

                $if cliCtx.useMongoDb
                    useMongoDb true
                    { mongoDb
                        host "mongodb+srv"
                        user "yanez"
                        password "${"${'$'}"}{stfnbssl_env.mongoDbPsw}"
                        dbPath "@cluster0.idlk7.mongodb.net"
                        dbName "wizzi"
                        { options
                            useNewUrlParser true
                            useUnifiedTopology true
                
                $if cliCtx.useSequelize
                    useSequelize true
                    { sequelize
                        databaseUrl "${"${'$'}"}{stfnbssl_env.sequelizeDbUrl}"
                        $if cliCtx.sequelize.usePostgres
                            dialect "postgres"
                            usePostgres true
                            { postgres

    $if cliCtx.useAuthentication
        $file __dot__wizzi/models/t/auth.json.ittf.ittf
            ${"${'$'}"}group
                useAuthentication true
                { authentication
                    $if cliCtx.isProduction
                        isProduction true
                    $else
                        isProduction false
                    $if cliCtx.isLocal
                        isLocal true
                    $else
                        isLocal false
                    $if cliCtx.authentication.usePermissionFlag
                        usePermissionFlag true
                    authRequired false
                    userInfo false
                    useLocal true
                    { local
                    useGithub true
                    { github
                        clientIdLocal "${"${'$'}"}{stfnbssl_env.githubClientIdLocal}"
                        clientSecretLocal "${"${'$'}"}{stfnbssl_env.githubClientSecretLocal}"
                        callbackURLLocal "${cliCtx.baseUrlLocal}/api/${cliCtx.apiVersion}/authenticate/github/callback"
                        clientId "${"${'$'}"}{stfnbssl_env.githubClientId}"
                        clientSecret "${"${'$'}"}{stfnbssl_env.githubClientSecret}"
                        callbackURL "${cliCtx.baseUrl}/api/${cliCtx.apiVersion}/authenticate/github/callback"
                    useGoogle true
                    { google
                        clientIdLocal "${"${'$'}"}{stfnbssl_env.googleClientIdLocal}"
                        clientSecretLocal "${"${'$'}"}{stfnbssl_env.googleClientSecretLocal}"
                        callbackURLLocal "${cliCtx.baseUrlLocal}/api/${cliCtx.apiVersion}/authenticate/google/callback"
                        clientId "${"${'$'}"}{stfnbssl_env.googleClientId}"
                        clientSecret "${"${'$'}"}{stfnbssl_env.googleClientSecret}"
                        callbackURL "${cliCtx.baseUrl}/api/${cliCtx.apiVersion}/authenticate/google/callback"
                $if cliCtx.authentication.useJwt
                    useJwt true
                    { jwt

    $if cliCtx.usePages
        $file __dot__wizzi/models/t/react.json.ittf.ittf
            ${"${'$'}"}group
                useReact true
                { react
                usePages true
                { pages

    $if cliCtx.useData
        $file __dot__wizzi/models/t/data.json.ittf.ittf
            ${"${'$'}"}group
                useData true
                { data
                    { Blog
                        { db
                            Name "Blog"
                            name "blog"
                            [ tables
                                { 
                                    Name "Post"
                                    Names "Posts"
                                    name "post"
                                    names "posts"
                                    descr "Post"
                                    [ indexes
                                    [ fields
                                        { 
                                            name "id"
                                            type "integer"
                                            autoIncrement true
                                            primaryKey true
                                        { 
                                            name "title"
                                            type "string"
                                            allowNull false
                                        { 
                                            name "content"
                                            type "string"
                                            allowNull false
                    { Project
                        { db
                            Name "Project"
                            name "project"
                            [ tables
                                { 
                                    Name "Category"
                                    Names "Categories"
                                    name "category"
                                    names "categories"
                                    descr "Category"
                                    [ indexes
                                    [ fields
                                        { 
                                            name "id"
                                            type "integer"
                                            autoIncrement true
                                            primaryKey true
                                        { 
                                            name "name"
                                            type "string"
                                            allowNull false
                                { 
                                    Name "Todo"
                                    Names "Todos"
                                    name "todo"
                                    names "todos"
                                    descr "Todo"
                                    [ indexes
                                    [ fields
                                        { 
                                            name "id"
                                            type "integer"
                                            autoIncrement true
                                            primaryKey true
                                        { 
                                            name "activity"
                                            type "string"
                                            allowNull false
                                        { 
                                            name "category"
                                            type "string"
                                            allowNull false
                                        { 
                                            name "done"
                                            type "boolean"
                                            defaultValue "false"
                                            allowNull false
                                { 
                                    Name "Issue"
                                    Names "Issues"
                                    name "issue"
                                    names "issues"
                                    descr "Issue"
                                    [ indexes
                                    [ fields
                                        { 
                                            name "id"
                                            type "integer"
                                            autoIncrement true
                                            primaryKey true
                                        { 
                                            name "description"
                                            type "string"
                                            allowNull false
                                        { 
                                            name "category"
                                            type "string"
                                            allowNull false
                                        { 
                                            name "closed"
                                            type "boolean"
                                            defaultValue "false"
                                            allowNull false
                            [ relations
                                { 
                                    kind "one-to-many"
                                    ltable "Category"
                                    rtable "Todo"
                                { 
                                    kind "one-to-many"
                                    ltable "Category"
                                    rtable "Issue"                                       