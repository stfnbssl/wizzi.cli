$group
    $params &schema

    ${"${'$'}"}
        var md = {
            name: '${schema.name}',
        };
    
    v08/examples/plugin${"${'('}"} &md )

        ${"${'$'}"}append plugins
            [ items
                @ './index.js'
                $foreach include in schema.includes
                    $if include.name == "js"
                        @ 'wizzi-js'
                    $elif include.name == "json"
                        @ 'wizzi-core'
                    $elif include.name == "css"
                        @ 'wizzi-web'

            @ pluginsBaseFolder
                _ path.resolve
                    @ __dirname
                    @ '..'

        _ executeGenerateModules
            [
                @ 'first'
            a_cb_no_throw${"${'('}"} result )
                if err
                    error '${schema.name}.examples.executeGenerateModules.err', err
                    error '${schema.name}.examples.executeGenerateModules.err.toString()', err.toString()
                    if err.inner
                        error '${schema.name}.examples.executeGenerateModules.err.inner.toString()', err.inner.toString()
                else
                    $$ loog '${schema.name}.examples.executeGenerateModules.result', result

        function executeGenerateModules
            param modules
            param callback

            _ async.mapSeries
                @ modules
                =>
                    param module
                    param callback

                    log '${schema.name}.example.executeGenerateModules.module: ' + module
            
                    var ittfDocumentUri
                        _ path.join
                            @ __dirname
                            @ 'ittf'
                            @ module + '.${schema.name}.ittf'
                    
                    var outputLoadedPath
                        _ path.join
                            @ __dirname
                            @ 'results'
                            @ module + '.${schema.name}.json'

                    var outputExtendedPath
                        _ path.join
                            @ __dirname
                            @ 'results'
                            @ module + '.${schema.name}.extended.json'

                    _ loadWizziModel
                        @ ittfDocumentUri
                        {
                        a_cb${"${'('}"} model )
                            log '${schema.name}.example.executeGenerateModules.outputLoadedPath: ' + outputLoadedPath
                            _ file.write
                                @ outputLoadedPath
                                _ stringify
                                    @ model.toJson()
                                    @ null
                                    @ 4
                            _ loadModelAndTransform
                                @ ittfDocumentUri
                                {
                                @ "${schema.name}/extended"
                                a_cb${"${'('}"} model )
                                    log '${schema.name}.example.executeGenerateModules.outputExtendedPath: ' + outputExtendedPath
                                    _ file.write
                                        @ outputExtendedPath
                                        _ stringify
                                            @ model
                                            @ null
                                            @ 4
                                    r_cb${"${'('}"} )
                @ callback