$group
    $params &schema

    ${"${'$'}"}
        var md = {
            name: '${schema.name}',
            artifact: '${schema.artifact}',
        };
    
    v08/examples/plugin${"${'('}"} &md )

        ${"${'$'}"}append plugins
            [ items
                @ './index.js'
                $foreach include in schema.includes
                    $if include.name == "js"
                        @ 'wizzi-js'
                    $elif include.name == "json"
                        @ 'wizzi-core'
                    $elif include.name == "css"
                        @ 'wizzi-web'

            @ pluginsBaseFolder
                _ path.resolve
                    @ __dirname
                    @ '..'

        let arg = process.argv[2]
        const moduleName = arg && arg.length > 0 ? arg : 'first'
        _ executeGenerateModules
            [
                @ moduleName
            a_cb_no_throw${"${'('}"} result )
                if err
                    error '${schema.name}/${schema.artifact}.examples.executeGenerateModules.err', err
                    error '${schema.name}/${schema.artifact}.examples.executeGenerateModules.err.toString()', err.toString()
                    if err.inner
                        error '${schema.name}/${schema.artifact}.examples.executeGenerateModules.err.inner.toString()', err.inner.toString()
                else
                    $$ loog '${schema.name}.examples.executeGenerateModules.result', result

        function executeGenerateModules
            param modules
            param callback

            _ async.mapSeries
                @ modules
                =>
                    param module
                    param callback

                    log '${schema.name}/${schema.artifact}.example.executeGenerateModules.module: ' + module
            
                    var ittfDocumentUri
                        _ path.join
                            @ __dirname
                            @ 'ittf'
                            @ module + '.${schema.name}.ittf'
                    
                    var outputPath
                        _ path.join
                            @ __dirname
                            @ 'results'
                            @ '${schema.name}'
                            @ module + '-${schema.artifact}.g.${schema.outmime}'
                    
                    _ loadModelAndGenerateArtifact
                        @ ittfDocumentUri
                        {
                        @ '${schema.name}/${schema.artifact}'
                        a_cb${"${'('}"} artifactText )
                            log '${schema.name}/${schema.artifact}.example.executeGenerateModules.outputPath: ' + outputPath
                            _ file.write
                                @ outputPath
                                @ artifactText
                            r_cb${"${'('}"} artifactText )
                @ callback