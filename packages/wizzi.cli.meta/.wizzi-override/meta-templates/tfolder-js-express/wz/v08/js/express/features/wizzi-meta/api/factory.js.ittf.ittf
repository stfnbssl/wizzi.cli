$group

    const path = require('path')
    $if cliCtx.useWizziV08
        const wizzi = require('@wizzi/factory')
    $else
        const wizzi = require('wizzi')
    $if cliCtx.useWizziV08
        const wizziUtils = require('@wizzi/utils')
    $else
        const wizziUtils = require('wizzi-utils')
    $if cliCtx.useWizziV08
        const wizziRepo = require('@wizzi/repo')
    $else
        const wizziRepo = require('wizzi-repo')
    ${'$'}if wzCtx.Build.useWizziJsonFactory
        const configEnv = require('../config/env')
    +
    const 
        {
            @ fSystem
        = wizziUtils
    const 
        {
            @ JsonComponents
            @ JsonDocumentDto
            @ JsonFs
        = wizziRepo
    +
    ${'$'}if wzCtx.Build.useWizziJsonFactory
        const 
            {
                @ packiFilePrefix 
            = configEnv
    # const config = require('../config')
    +
    const mdDisplayName = 'features/wizzi-meta/api/factory'
    +
    const md = module.exports = {}
    +
    ${'$'}if wzCtx.Build.useWizziJsonFactory
        set md.packiFilesToJsonDocuments
            function
                param files
                const jsonDocuments = []
                _ Object.keys(files).map
                    =>
                        param value
                        if files[value].type === 'CODE'
                            const filePath = ensurePackiFilePrefix(value)
                            _ jsonDocuments.push
                                {
                                    @ path filePath
                                    @ content files[value].contents
                return jsonDocuments
    +
    set md.createFilesystemFactoryWithParameters
        async-function
            param pluginsBaseFolder
            param plugins
            param globalContext
            r_promise${'('})
                _ wizzi.fsFactory
                    {
                        { repo
                            @ storeKind "filesystem"
                        { plugins
                            @ items plugins
                            @ pluginsBaseFolder pluginsBaseFolder
                        @ globalContext globalContext
                    function
                        param err
                        param wf
                        if err
                            return reject(err)
                        return resolve(wf)
    +
    set md.createFilesystemFactory
        async-function
            param globalContext
            const gc = {}
            if appConfig.isWizziDev
                set gc['isWizziStudio'] = true
            return
                new Promise
                    =>
                        param resolve
                        param reject
                        _ wizzi.fsFactory
                            {
                                { repo
                                    @ storeKind "filesystem"
                                { plugins
                                    [ items
                                        ${'$'}foreach item in wzCtx.Build.wizziMeta.plugins
                                            @ '${'$'}{item}'
                                    @ pluginsBaseFolder '${'$'}{wzCtx.Build.wizziMeta.pluginsBaseFolder}'
                                @ globalContext
                                    _ Object.assign
                                        {
                                        @ gc
                                        @ globalContext || {}
                            function
                                param err
                                param wf
                                if err
                                    return reject(err)
                                _ resolve(wf)
    +
    ${'$'}if wzCtx.Build.useWizziJsonFactory
        set md.createJsonFsAndFactory
            async-function
                param files
                const jsonDocuments = []
                _ Object.keys(files).map
                    =>
                        param value
                        if files[value].type === 'CODE' && files[value].contents && files[value].contents.length > 0
                            const filePath = ensurePackiFilePrefix(value)
                            _ jsonDocuments.push
                                {
                                    @ path filePath
                                    @ content files[value].contents
                $$ loog mdDisplayName, 'createFactory', plugins, 'jsonDocuments.length', jsonDocuments.length
                return
                    new Promise
                        =>
                            param resolve
                            param reject
                            _ JsonComponents.createJsonFs
                                @ jsonDocuments
                                =>
                                    param err
                                    param jsonFs
                                    if err
                                        return reject(err)
                                    _ wizzi.jsonFactory
                                        {
                                            @ jsonFs
                                            { plugins
                                                [ items
                                                    ${'$'}foreach item in wzCtx.Build.wizziMeta.plugins
                                                        @ '${'$'}{item}'
                                                @ pluginsBaseFolder '${'$'}{wzCtx.Build.wizziMeta.pluginsBaseFolder}'
                                        function
                                            param err
                                            param wf
                                            if err
                                                return reject(err)
                                            $$ loog mdDisplayName, 'createFactory', 'done'
                                            _ resolve
                                                {
                                                    @ wf
                                                    @ jsonFs
        +
        set md.createJsonFs
            async-function
                param files
                const jsonDocuments = []
                _ Object.keys(files).map
                    =>
                        param value
                        if files[value].type === 'CODE'
                            const filePath = ensurePackiFilePrefix(value)
                            _ jsonDocuments.push
                                {
                                    @ path filePath
                                    @ content files[value].contents
                $$ loog 'createJsonFs', 'jsonDocuments.length', jsonDocuments.length
                return
                    new Promise
                        =>
                            param resolve
                            param reject
                            _ JsonComponents.createJsonFs
                                @ jsonDocuments
                                =>
                                    param err
                                    param result
                                    if err
                                        return reject(err)
                                    _ resolve(result)
        +
        set md.extractGeneratedFiles
            async-function
                param jsonFs
                const files = {}
                r_promise${'('})
                    _ jsonFs.toFiles
                        {
                            @ removeRoot packiFilePrefix
                        =>
                            param err
                            param result
                            if err
                                _ reject(err)
                            _ result.forEach
                                =>
                                    param value
                                    $$ loog 'wizzi.factory.extractGeneratedFiles.value.fullPath', value.fullPath,
                                    $$    \b value.fullPath.substr(packiFilePrefix.length)
                                    if value.relPath.endsWith('.ittf') == false
                                        set files[value.relPath] =
                                            {
                                                @ type 'CODE'
                                                @ contents value.content
                                                @ generated true
                            _ resolve(files)
        +
        set md.ensurePackiFilePrefix
            function 
                param filePath
                var newFilePath = normalizePath(filePath)
                return
                    iif newFilePath.startsWith(packiFilePrefix)
                        then newFilePath
                        else packiFilePrefix + newFilePath

        function normalizePath
            param path
            return path.replace(/\\/g, '/')
