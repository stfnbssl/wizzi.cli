$group

    const path = require('path')
    $if cliCtx.useWizziV08
        const wizzi = require('@wizzi/factory')
    $else
        const wizzi = require('wizzi')
    $if cliCtx.useWizziV08
        const wizziUtils = require('@wizzi/utils')
    $else
        const wizziUtils = require('wizzi-utils')
    +
    const
        {
            @ verify
            @ fSystem
        = wizziUtils
    +
    const metaFolderProcessor = require('./metaFolderProcessor')
    +
    const wizziProds = require('./wizziProds')
    +
    const mdDisplayName = 'features.wizzi-meta.api.wizziMeta'
    +
    const file = fSystem.vfile()

    const meta_generators
        [
            @ 'ts-node'
            @ 'ts-express'
            @ 'ts-client'
            @ 'js-vanilla'
            @ 'js-express'
            @ 'js-wizzi-plugin'
            @ 'js-wizzi-meta'
    +
    const md = module.exports = {}
    +
    set md.createWizziPackage
        async-function
            param options
            r_promise${'('})
                if !options.metaSourcesFolderPath || options.metaSourcesFolderPath.length == 0
                    r_reject${'('})
                        @ mdDisplayName + '.createWizziPackage. Missing metaSourcesFolderPath: ' + options.metaSourcesFolderPath
                if meta_generators.indexOf(options.metaGenerator) < 0
                    r_reject${'('})
                        @ mdDisplayName + '.createWizziPackage. Unknown metaGenerator: ' + options.metaGenerator
                if !options.outputPackageName || options.outputPackageName.length == 0
                    r_reject${'('})
                        @ mdDisplayName + '.createWizziPackage. Missing outputPackageName: ' + options.outputPackageName

                log mdDisplayName + '.createWizziPackage.options', options

                var metaGeneratorFolderPath
                    _ path.join
                        @ options.metaSourcesFolderPath
                        @ 'meta-generators'
                        @ options.metaGenerator

                var metaGeneratorFileTemplatesIndex
                    _ path.join
                        @ metaGeneratorFolderPath
                        @ 'index.ittf.ittf'
                $$ loog 'metaGeneratorFileTemplatesIndex', metaGeneratorFileTemplatesIndex

                var destinationIttfTempFolder
                    _ path.join
                        @ options.metaSourcesFolderPath
                        @ 'meta-templates'
                        @ '__temp'
                        @ options.metaGenerator
                        @ options.outputPackageName
                $$ loog 'destinationIttfTempFolder', destinationIttfTempFolder

                _ createMetaCtx
                    @ options
                    a_then${'('} metaCtx )
                        $$ loog mdDisplayName + '.createWizziPackage.metaCtx', metaCtx
                        _ metaFolderProcessor
                            @ metaGeneratorFileTemplatesIndex
                            @ destinationIttfTempFolder
                            @ metaCtx
                            a_then${'('} result )
                                return
                                    _ generatePackageFiles
                                        @ destinationIttfTempFolder
                                        @ options
                                        @ metaCtx
                            catch_reject${'('} wizziMeta.createWizziPackage.metaFolderProcessor )
                    catch_reject${'('} wizziMeta.createWizziPackage.createMetaCtx )

    set md.createMetaCtx
        async-function
            param options
            r_promise${'('})
                if options.metaCtx
                    r_resolve${'('})
                        @ options.metaCtx
                elif verify.isNotEmpty(options.metaCtxPackifileName)
                    throw new error("Not implemented yet")
                elif verify.isNotEmpty(options.metaCtxFileName)
                    const _metaCtxName 
                        iif options.metaCtxFileName.toLowerCase().endsWith(".json.ittf") 
                            then options.metaCtxFileName 
                            else options.metaCtxFileName + '.json.ittf'
                    var metaGeneratorMetaCtxFilePath
                        _ path.join
                            @ options.metaSourcesFolderPath
                            @ 'meta-generators'
                            @ options.metaGenerator
                            @ 'contexts'
                            @ _metaCtxName
                else
                    r_reject${'('})
                        @ mdDisplayName + '.createMetaCtx. Missing both metaCtx and metaCtxName: ' + options.metaCtxName 
                $$ loog 'metaGeneratorMetaCtxFilePath', metaGeneratorMetaCtxFilePath
                _ wizzi.model
                    _ path.join
                        @ metaGeneratorMetaCtxFilePath
                    {
                        { metaCtx
                            @ pkgName options.outputPackageName  
                            @ description options.description || options.outputPackageName
                    =>
                        param err
                        param metaCtx
                        if err
                            error mdDisplayName + '.createMetaCtx.wizzi.model. Load metaCtx error', err
                            r_reject${'('}
                                {
                                    @ message mdDisplayName + '.createMetaCtx.wizzi.model. Load metaCtx error'
                                    @ err
                        r_resolve${'('})
                            @ metaCtx

    set md.generatePackageFiles
        async-function generatePackageFiles
            param destinationIttfTempFolder
            param options
            param metaCtx
            r_promise${'('})
                if !options.outputPackagePath || options.outputPackagePath.length == 0
                    r_reject${'('})
                        @ mdDisplayName + '.generatePackageFiles. Missing outputPackagePath: ' + options.outputPackagePath
                # TODO check parent folder of outputPackagePath exists
                
                $$ loog"wizziMeta.generatePackageFiles.generating to folder", path.join(options.outputPackagePath, options.outputPackageName)
                _ wizziProds.generateFolderArtifactsFs
                    @ destinationIttfTempFolder
                    ${'$'}*
                    {
                        { modelContext
                            {
                                @ metaCtx metaCtx
                        @ artifactContext {}
                    {
                        @ destFolder
                            _ path.join
                                @ options.outputPackagePath
                                @ options.outputPackageName
                        @ copyInclude ['*']
                        @ copyExclude []
                    *${'$'}
                    _ path.join
                        @ options.outputPackagePath
                        @ options.outputPackageName
                    {
                        @ metaCtx metaCtx
                    a_then${'('} genFolderResult )
                        ${'$'}*
                        _ file.deleteFolder
                            @ destinationIttfTempFolder
                            =>
                                param err
                                if err
                                    error mdDisplayName + '.generatePackageFiles.deleteFolder error', err
                                    r_reject${'('}
                                        {
                                            message mdDisplayName + '.generatePackageFiles.deleteFolder error'
                                            @  err
                                r_resolve${'('})
                                    @ genFolderResult
                        *${'$'}
                        r_resolve${'('})
                            @ genFolderResult
                    catch_reject${'('} wizziMeta.generatePackageFiles.wizziProds.generateFolderArtifactsFs )

