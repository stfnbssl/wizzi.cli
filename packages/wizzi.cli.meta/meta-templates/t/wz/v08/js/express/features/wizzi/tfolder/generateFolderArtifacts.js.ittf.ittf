$group

    ${'$'}if wzCtx.Build.useWizziJsonFactory    
        +
        export 
            async-function generateFolderArtifacts
                param sourceFolderUri
                param destFolderUri
                param files
                param context
                r_promise_async${'('})
                    if !verify.isObject(files)
                        return
                            _ reject
                                {
                                    @ action mdDisplayName + '.generateFolderArtifacts'
                                    @ message 'files parameter must be an object of type PackiFiles'
                                    @ files
                    log mdDisplayName, 'generateFolderArtifacts.sourceFolderUri,destFolderUri', sourceFolderUri, destFolderUri
                    let jsonwf
                        =
                            { 
                    try 
                        set jsonwf =
                            await 
                                _ createJsonFsAndFactory(files)
                        _ jsonwf.wf.generateFolderArtifacts
                            @ packiFilePrefix + sourceFolderUri
                            { 
                                @ modelRequestContext context
                                @ artifactRequestContext context
                            {
                                @ destFolder packiFilePrefix + destFolderUri
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                $$ loog myname, 'generateFolderArtifacts.result', result
                                _ jsonwf.wf.fileService.getFiles
                                    @ packiFilePrefix + destFolderUri
                                    {
                                        @ deep true
                                        @ documentContent true
                                    =>
                                        param err
                                        param files
                                        if err
                                            return reject(err)
                                        const packiFiles
                                            = {}
                                        foreach file in files
                                            set packiFiles[file.relPath]
                                                {
                                                    @ type 'CODE'
                                                    @ contents file.content
                                        _ resolve
                                            @ packiFiles
                    catch ex
                        return reject(ex)

    +
    export 
        async-function generateFolderArtifactsFs
            param sourceFolderUri
            param destFolderUri
            param context
            r_promise_async${'('})
                try 
                    const wf
                        await 
                            _ createFilesystemFactory()
                    _ wf.generateFolderArtifacts
                        @ sourceFolderUri
                        { 
                            @ modelRequestContext context
                            @ artifactRequestContext context
                        {
                            @ destFolder destFolderUri
                        => 
                            param err
                            param result
                            if err
                                return reject(err)
                            _ resolve
                                @ "Generated folder artifacts"
                catch ex
                    return reject(ex)                                